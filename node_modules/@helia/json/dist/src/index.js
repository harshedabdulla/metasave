/**
 * @packageDocumentation
 *
 * `@helia/json` makes working with JSON in {@link https://github.com/ipfs/helia Helia} simple & straightforward.
 *
 * See the {@link JSON} interface for all available operations.
 *
 * @example
 *
 * ```typescript
 * import { createHelia } from 'helia'
 * import { json } from '@helia/json'
 * import { CID } from 'multiformats/cid'
 *
 * const j = json(helia)
 * const cid = await j.put({
 *   hello: 'world'
 * })
 * const obj = await j.get(cid)
 *
 * console.info(obj)
 * // { hello: 'world' }
 * ```
 */
import { CID } from 'multiformats/cid';
import * as jsonCodec from 'multiformats/codecs/json';
import { sha256 } from 'multiformats/hashes/sha2';
class DefaultJSON {
    components;
    constructor(components) {
        this.components = components;
    }
    async add(obj, options = {}) {
        const buf = jsonCodec.encode(obj);
        const hash = await (options.hasher ?? sha256).digest(buf);
        const cid = CID.createV1(jsonCodec.code, hash);
        await this.components.blockstore.put(cid, buf, options);
        return cid;
    }
    async get(cid, options = {}) {
        const buf = await this.components.blockstore.get(cid, options);
        return jsonCodec.decode(buf);
    }
}
/**
 * Create a {@link JSON} instance for use with {@link https://github.com/ipfs/helia Helia}
 */
export function json(helia) {
    return new DefaultJSON(helia);
}
//# sourceMappingURL=index.js.map