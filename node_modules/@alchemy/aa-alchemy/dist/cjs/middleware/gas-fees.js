"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAlchemyGasFeeEstimator = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const withAlchemyGasFeeEstimator = (provider) => {
    provider.withFeeDataGetter(async (struct, overrides, feeOptions) => {
        let [block, maxPriorityFeePerGasEstimate] = await Promise.all([
            provider.rpcClient.getBlock({ blockTag: "latest" }),
            provider.rpcClient.request({
                method: "rundler_maxPriorityFeePerGas",
                params: [],
            }),
        ]);
        const baseFeePerGas = block.baseFeePerGas;
        if (baseFeePerGas == null) {
            throw new Error("baseFeePerGas is null");
        }
        const maxPriorityFeePerGas = (0, aa_core_1.applyUserOpOverrideOrFeeOption)(maxPriorityFeePerGasEstimate, overrides?.maxPriorityFeePerGas, feeOptions?.maxPriorityFeePerGas);
        const maxFeePerGas = (0, aa_core_1.applyUserOpOverrideOrFeeOption)(baseFeePerGas + BigInt(maxPriorityFeePerGas), overrides?.maxFeePerGas, feeOptions?.maxFeePerGas);
        return {
            ...struct,
            maxPriorityFeePerGas,
            maxFeePerGas,
        };
    });
    return provider;
};
exports.withAlchemyGasFeeEstimator = withAlchemyGasFeeEstimator;
//# sourceMappingURL=gas-fees.js.map