{"version":3,"file":"gas-manager.js","sourceRoot":"","sources":["../../../src/middleware/gas-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  deepHexlify,\n  filterUndefined,\n  isBigNumberish,\n  isPercentage,\n  resolveProperties,\n  type AccountMiddlewareFn,\n  type Hex,\n  type Percentage,\n  type UserOperationFeeOptions,\n  type UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport { fromHex } from \"viem\";\nimport type { AlchemyProvider } from \"../provider/base.js\";\nimport type { ClientWithAlchemyMethods } from \"./client.js\";\nimport type { RequestGasAndPaymasterAndDataOverrides } from \"./types/index.js\";\n\nexport interface AlchemyGasManagerConfig {\n  policyId: string;\n}\n\nexport interface AlchemyGasEstimationOptions {\n  estimateGas: boolean;\n  fallbackGasEstimator?: AccountMiddlewareFn;\n  fallbackFeeDataGetter?: AccountMiddlewareFn;\n}\n\n/**\n * This middleware wraps the Alchemy Gas Manager APIs to provide more flexible UserOperation gas sponsorship.\n *\n * If `delegateGasEstimation` is true, it will use `alchemy_requestGasAndPaymasterAndData` to get all of the gas estimates + paymaster data\n * in one RPC call.\n *\n * Otherwise, it will use `alchemy_requestPaymasterAndData` to get only paymaster data, allowing you\n * to customize the gas and fee estimation middleware.\n *\n * @param provider - the smart account provider to override to use the alchemy gas manager\n * @param config - the alchemy gas manager configuration\n * @param delegateGasEstimation - if true, this will use `alchemy_requestGasAndPaymasterAndData` else will use `alchemy_requestPaymasterAndData`\n * @returns the provider augmented to use the alchemy gas manager\n */\nexport const withAlchemyGasManager = <P extends AlchemyProvider>(\n  provider: P,\n  config: AlchemyGasManagerConfig,\n  gasEstimationOptions: AlchemyGasEstimationOptions = { estimateGas: true }\n): P => {\n  const fallbackGasEstimator =\n    gasEstimationOptions.fallbackGasEstimator ?? provider.gasEstimator;\n  const fallbackFeeDataGetter =\n    gasEstimationOptions.fallbackFeeDataGetter ?? provider.feeDataGetter;\n\n  return gasEstimationOptions.estimateGas\n    ? provider\n        // no-op gas estimator\n        .withGasEstimator(async (struct, overrides, feeOptions) => {\n          // but if user is bypassing paymaster to fallback to having the account to pay the gas (one-off override),\n          // we cannot delegate gas estimation to the bundler because paymaster middleware will not be called\n          if (overrides?.paymasterAndData === \"0x\") {\n            const result = await fallbackGasEstimator(\n              struct,\n              overrides,\n              feeOptions\n            );\n            return {\n              callGasLimit: (await result.callGasLimit) ?? 0n,\n              preVerificationGas: (await result.preVerificationGas) ?? 0n,\n              verificationGasLimit: (await result.verificationGasLimit) ?? 0n,\n            };\n          } else {\n            return {\n              callGasLimit: 0n,\n              preVerificationGas: 0n,\n              verificationGasLimit: 0n,\n            };\n          }\n        })\n        // no-op fee because the alchemy api will do it\n        .withFeeDataGetter(async (struct, overrides, feeOptions) => {\n          let maxFeePerGas = (await struct.maxFeePerGas) ?? 0n;\n          let maxPriorityFeePerGas = (await struct.maxPriorityFeePerGas) ?? 0n;\n\n          // but if user is bypassing paymaster to fallback to having the account to pay the gas (one-off override),\n          // we cannot delegate gas estimation to the bundler because paymaster middleware will not be called\n          if (overrides?.paymasterAndData === \"0x\") {\n            const result = await fallbackFeeDataGetter(\n              struct,\n              overrides,\n              feeOptions\n            );\n            maxFeePerGas = (await result.maxFeePerGas) ?? maxFeePerGas;\n            maxPriorityFeePerGas =\n              (await result.maxPriorityFeePerGas) ?? maxPriorityFeePerGas;\n          }\n\n          return {\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n          };\n        })\n        .withPaymasterMiddleware(\n          withAlchemyGasAndPaymasterAndDataMiddleware(provider, config)\n        )\n    : provider.withPaymasterMiddleware(\n        withAlchemyPaymasterAndDataMiddleware(provider, config)\n      );\n};\n\n/**\n * This uses the alchemy RPC method: `alchemy_requestPaymasterAndData`, which does not estimate gas. It's recommended to use\n * this middleware if you want more customization over the gas and fee estimation middleware, including setting\n * non-default buffer values for the fee/gas estimation.\n *\n * @param config - the alchemy gas manager configuration\n * @returns middleware overrides for paymaster middlewares\n */\nconst withAlchemyPaymasterAndDataMiddleware = <P extends AlchemyProvider>(\n  provider: P,\n  config: AlchemyGasManagerConfig\n): Parameters<P[\"withPaymasterMiddleware\"]>[\"0\"] => ({\n  dummyPaymasterDataMiddleware: async (_struct) => {\n    switch (provider.rpcClient.chain.id) {\n      case 1:\n      case 10:\n      case 137:\n      case 42161:\n        return {\n          paymasterAndData:\n            \"0x4Fd9098af9ddcB41DA48A1d78F91F1398965addcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\",\n        };\n      default:\n        return {\n          paymasterAndData:\n            \"0xc03aac639bb21233e0139381970328db8bceeb67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\",\n        };\n    }\n  },\n  paymasterDataMiddleware: async (struct) => {\n    const { paymasterAndData } = await (\n      provider.rpcClient as ClientWithAlchemyMethods\n    ).request({\n      method: \"alchemy_requestPaymasterAndData\",\n      params: [\n        {\n          policyId: config.policyId,\n          entryPoint: provider.getEntryPointAddress(),\n          userOperation: deepHexlify(await resolveProperties(struct)),\n        },\n      ],\n    });\n    return { paymasterAndData };\n  },\n});\n\n/**\n * This uses the alchemy RPC method: `alchemy_requestGasAndPaymasterAndData` to get all of the gas estimates + paymaster data\n * in one RPC call. It will no-op the gas estimator and fee data getter middleware and set a custom middleware that makes the RPC call.\n *\n * @param config - the alchemy gas manager configuration\n * @returns middleware overrides for paymaster middlewares\n */\nconst withAlchemyGasAndPaymasterAndDataMiddleware = <P extends AlchemyProvider>(\n  provider: P,\n  config: AlchemyGasManagerConfig\n): Parameters<P[\"withPaymasterMiddleware\"]>[\"0\"] => ({\n  paymasterDataMiddleware: async (struct, overrides, feeOptions) => {\n    const userOperation: UserOperationRequest = deepHexlify(\n      await resolveProperties(struct)\n    );\n\n    const overrideField = (\n      field: keyof UserOperationFeeOptions\n    ): Hex | Percentage | undefined => {\n      if (overrides?.[field] != null) {\n        // one-off absolute override\n        if (isBigNumberish(overrides[field])) {\n          return deepHexlify(overrides[field]);\n        }\n        // one-off percentage overrides\n        else {\n          return {\n            percentage:\n              100 + Number((overrides[field] as Percentage).percentage),\n          };\n        }\n      }\n\n      // provider level fee options with percentage\n      if (isPercentage(feeOptions?.[field])) {\n        return {\n          percentage:\n            100 + Number((feeOptions![field] as Percentage).percentage),\n        };\n      }\n\n      if (fromHex(userOperation[field], \"bigint\") > 0n) {\n        return userOperation[field];\n      }\n\n      return undefined;\n    };\n\n    const _overrides: RequestGasAndPaymasterAndDataOverrides = filterUndefined({\n      maxFeePerGas: overrideField(\"maxFeePerGas\"),\n      maxPriorityFeePerGas: overrideField(\"maxPriorityFeePerGas\"),\n      callGasLimit: overrideField(\"callGasLimit\"),\n      verificationGasLimit: overrideField(\"verificationGasLimit\"),\n      preVerificationGas: overrideField(\"preVerificationGas\"),\n    });\n\n    const result = await (\n      provider.rpcClient as ClientWithAlchemyMethods\n    ).request({\n      method: \"alchemy_requestGasAndPaymasterAndData\",\n      params: [\n        {\n          policyId: config.policyId,\n          entryPoint: provider.getEntryPointAddress(),\n          userOperation: userOperation,\n          dummySignature: userOperation.signature,\n          overrides:\n            Object.keys(_overrides).length > 0 ? _overrides : undefined,\n        },\n      ],\n    });\n\n    return result;\n  },\n});\n"]}