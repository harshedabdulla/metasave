"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightAccountAlchemyProviderConfigSchema = exports.AlchemySdkClientSchema = exports.AlchemyProviderConfigSchema = exports.AlchemyChainSchema = void 0;
const aa_accounts_1 = require("@alchemy/aa-accounts");
const aa_core_1 = require("@alchemy/aa-core");
const alchemy_sdk_1 = require("alchemy-sdk");
const zod_1 = __importDefault(require("zod"));
const chains_js_1 = require("./chains.js");
exports.AlchemyChainSchema = zod_1.default.custom((chain) => {
    const _chain = aa_core_1.ChainSchema.parse(chain);
    let chainObject;
    try {
        chainObject = (0, aa_core_1.getChain)(_chain.id);
    }
    catch {
        return false;
    }
    return (chains_js_1.SupportedChains.get(_chain.id) != null &&
        chainObject.rpcUrls.alchemy != null);
}, "chain is not supported by Alchemy");
exports.AlchemyProviderConfigSchema = (0, aa_core_1.createSmartAccountProviderConfigSchema)()
    .omit({ rpcProvider: true, chain: true })
    .and(aa_core_1.ConnectionConfigSchema)
    .and(zod_1.default.object({ chain: exports.AlchemyChainSchema }));
exports.AlchemySdkClientSchema = zod_1.default.instanceof(alchemy_sdk_1.Alchemy);
exports.LightAccountAlchemyProviderConfigSchema = exports.AlchemyProviderConfigSchema.and(aa_accounts_1.LightAccountFactoryConfigSchema);
//# sourceMappingURL=schema.js.map