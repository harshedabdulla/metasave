"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemyProvider = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const defaults_js_1 = require("../defaults.js");
const gas_fees_js_1 = require("../middleware/gas-fees.js");
const gas_manager_js_1 = require("../middleware/gas-manager.js");
const simulate_uo_js_1 = require("../middleware/simulate-uo.js");
const schema_js_1 = require("../schema.js");
class AlchemyProvider extends aa_core_1.SmartAccountProvider {
    constructor(config_) {
        const config = schema_js_1.AlchemyProviderConfigSchema.parse(config_);
        const { chain, entryPointAddress, opts, ...connectionConfig } = config;
        const rpcUrl = connectionConfig.rpcUrl == null
            ? `${chain.rpcUrls.alchemy.http[0]}/${connectionConfig.apiKey ?? ""}`
            : connectionConfig.rpcUrl;
        const client = (0, aa_core_1.createPublicErc4337Client)({
            chain: chain,
            rpcUrl,
            ...(connectionConfig.jwt != null && {
                fetchOptions: {
                    headers: {
                        Authorization: `Bearer ${connectionConfig.jwt}`,
                    },
                },
            }),
        });
        const feeOptions = config.opts?.feeOptions ?? (0, defaults_js_1.getDefaultUserOperationFeeOptions)(chain);
        super({
            rpcProvider: client,
            entryPointAddress,
            chain,
            opts: { ...opts, feeOptions },
        });
        Object.defineProperty(this, "rpcUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "simulateUserOperationAssetChanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (data, overrides) => {
                const uoStruct = (0, aa_core_1.deepHexlify)(await this.buildUserOperation(data, overrides));
                return this.rpcClient.request({
                    method: "alchemy_simulateUserOperationAssetChanges",
                    params: [uoStruct, this.getEntryPointAddress()],
                });
            }
        });
        this.rpcUrl = rpcUrl;
        (0, gas_fees_js_1.withAlchemyGasFeeEstimator)(this);
    }
    withAlchemyGasManager(config, delegateGasEstimation = true) {
        if (!this.isConnected()) {
            throw new Error("AlchemyProvider: account is not set, did you call `connect` first?");
        }
        return (0, gas_manager_js_1.withAlchemyGasManager)(this, config, {
            estimateGas: delegateGasEstimation,
        });
    }
    withAlchemyUserOpSimulation() {
        if (!this.isConnected()) {
            throw new Error("AlchemyProvider: account is not set, did you call `connect` first?");
        }
        return (0, simulate_uo_js_1.withAlchemyUserOpSimulation)(this);
    }
    withAlchemyEnhancedApis(alchemy) {
        schema_js_1.AlchemySdkClientSchema.parse(alchemy);
        if (alchemy.config.url && alchemy.config.url !== this.rpcUrl) {
            throw new Error("Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL");
        }
        const alchemyUrl = `https://${alchemy.config.network}.g.alchemy.com/v2/${alchemy.config.apiKey}`;
        if (alchemyUrl !== this.rpcUrl) {
            throw new Error("Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL");
        }
        return this.extend(() => {
            return {
                core: alchemy.core,
                nft: alchemy.nft,
                transact: alchemy.transact,
                debug: alchemy.debug,
                ws: alchemy.ws,
                notify: alchemy.notify,
                config: alchemy.config,
            };
        });
    }
}
exports.AlchemyProvider = AlchemyProvider;
//# sourceMappingURL=base.js.map