{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/schema.ts"],"names":[],"mappings":";;;;;;AAAA,sDAAuE;AACvE,8CAK0B;AAC1B,6CAAsC;AAEtC,8CAAoB;AACpB,2CAA8C;AAEjC,QAAA,kBAAkB,GAAG,aAAC,CAAC,MAAM,CAAQ,CAAC,KAAK,EAAE,EAAE;IAC1D,MAAM,MAAM,GAAG,qBAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAExC,IAAI,WAAW,CAAC;IAChB,IAAI,CAAC;QACH,WAAW,GAAG,IAAA,kBAAQ,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,CACL,2BAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,IAAI;QACtC,WAAW,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CACpC,CAAC;AACJ,CAAC,EAAE,mCAAmC,CAAC,CAAC;AAE3B,QAAA,2BAA2B,GACtC,IAAA,gDAAsC,GAAE;KACrC,IAAI,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;KACxC,GAAG,CAAC,gCAAsB,CAAC;KAC3B,GAAG,CAAC,aAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,0BAAkB,EAAE,CAAC,CAAC,CAAC;AAErC,QAAA,sBAAsB,GAAG,aAAC,CAAC,UAAU,CAAC,qBAAO,CAAC,CAAC;AAE/C,QAAA,uCAAuC,GAClD,mCAA2B,CAAC,GAAG,CAAC,6CAA+B,CAAC,CAAC","sourcesContent":["import { LightAccountFactoryConfigSchema } from \"@alchemy/aa-accounts\";\nimport {\n  ChainSchema,\n  ConnectionConfigSchema,\n  createSmartAccountProviderConfigSchema,\n  getChain,\n} from \"@alchemy/aa-core\";\nimport { Alchemy } from \"alchemy-sdk\";\nimport type { Chain } from \"viem\";\nimport z from \"zod\";\nimport { SupportedChains } from \"./chains.js\";\n\nexport const AlchemyChainSchema = z.custom<Chain>((chain) => {\n  const _chain = ChainSchema.parse(chain);\n\n  let chainObject;\n  try {\n    chainObject = getChain(_chain.id);\n  } catch {\n    return false;\n  }\n\n  return (\n    SupportedChains.get(_chain.id) != null &&\n    chainObject.rpcUrls.alchemy != null\n  );\n}, \"chain is not supported by Alchemy\");\n\nexport const AlchemyProviderConfigSchema =\n  createSmartAccountProviderConfigSchema()\n    .omit({ rpcProvider: true, chain: true })\n    .and(ConnectionConfigSchema)\n    .and(z.object({ chain: AlchemyChainSchema }));\n\nexport const AlchemySdkClientSchema = z.instanceof(Alchemy);\n\nexport const LightAccountAlchemyProviderConfigSchema =\n  AlchemyProviderConfigSchema.and(LightAccountFactoryConfigSchema);\n"]}