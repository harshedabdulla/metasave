import { Alchemy } from "alchemy-sdk";
import type { Chain } from "viem";
import z from "zod";
export declare const AlchemyChainSchema: z.ZodType<Chain, z.ZodTypeDef, Chain>;
export declare const AlchemyProviderConfigSchema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<Omit<{
    rpcProvider: z.ZodUnion<[z.ZodString, z.ZodType<import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>, z.ZodTypeDef, import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>>]>;
    chain: z.ZodType<Chain<import("viem").ChainFormatters | undefined>, z.ZodTypeDef, Chain<import("viem").ChainFormatters | undefined>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    opts: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        txMaxRetries: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        txRetryIntervalMs: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        txRetryMulitplier: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        feeOptions: z.ZodOptional<z.ZodObject<{
            maxFeePerGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            maxPriorityFeePerGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            callGasLimit: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            verificationGasLimit: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            preVerificationGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        }, {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        txMaxRetries: number;
        txRetryIntervalMs: number;
        txRetryMulitplier: number;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    }, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    }>>>;
}, "chain" | "rpcProvider">, "strip", z.ZodTypeAny, {
    opts: {
        txMaxRetries: number;
        txRetryIntervalMs: number;
        txRetryMulitplier: number;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    };
    entryPointAddress?: `0x${string}` | undefined;
}, {
    entryPointAddress?: string | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodString;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}>]>>, z.ZodObject<{
    chain: z.ZodType<Chain, z.ZodTypeDef, Chain>;
}, "strip", z.ZodTypeAny, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
}>>;
export declare const AlchemySdkClientSchema: z.ZodType<Alchemy, z.ZodTypeDef, Alchemy>;
export declare const LightAccountAlchemyProviderConfigSchema: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<Omit<{
    rpcProvider: z.ZodUnion<[z.ZodString, z.ZodType<import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>, z.ZodTypeDef, import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>>]>;
    chain: z.ZodType<Chain<import("viem").ChainFormatters | undefined>, z.ZodTypeDef, Chain<import("viem").ChainFormatters | undefined>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    opts: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        txMaxRetries: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        txRetryIntervalMs: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        txRetryMulitplier: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        feeOptions: z.ZodOptional<z.ZodObject<{
            maxFeePerGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            maxPriorityFeePerGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            callGasLimit: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            verificationGasLimit: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
            preVerificationGas: z.ZodOptional<z.ZodObject<{
                min: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                max: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<`0x${string}`, z.ZodTypeDef, `0x${string}`>, z.ZodNumber, z.ZodBigInt]>>>;
                percentage: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }, {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        }, {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        txMaxRetries: number;
        txRetryIntervalMs: number;
        txRetryMulitplier: number;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    }, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    }>>>;
}, "chain" | "rpcProvider">, "strip", z.ZodTypeAny, {
    opts: {
        txMaxRetries: number;
        txRetryIntervalMs: number;
        txRetryMulitplier: number;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    };
    entryPointAddress?: `0x${string}` | undefined;
}, {
    entryPointAddress?: string | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        feeOptions?: {
            maxFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            maxPriorityFeePerGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            callGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            verificationGasLimit?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
            preVerificationGas?: {
                min?: number | bigint | `0x${string}` | undefined;
                max?: number | bigint | `0x${string}` | undefined;
                percentage?: number | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodString;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}>]>>, z.ZodObject<{
    chain: z.ZodType<Chain, z.ZodTypeDef, Chain>;
}, "strip", z.ZodTypeAny, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
}>>, z.ZodObject<{
    owner: z.ZodType<import("@alchemy/aa-core").SmartAccountSigner<any>, z.ZodTypeDef, import("@alchemy/aa-core").SmartAccountSigner<any>>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    factoryAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    version: z.ZodOptional<z.ZodEffects<z.ZodString, import("@alchemy/aa-accounts").LightAccountVersion, string>>;
}, "strip", z.ZodTypeAny, {
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    accountAddress?: `0x${string}` | undefined;
    initCode?: `0x${string}` | undefined;
    factoryAddress?: `0x${string}` | undefined;
    version?: import("@alchemy/aa-accounts").LightAccountVersion | undefined;
}, {
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    accountAddress?: string | undefined;
    initCode?: string | undefined;
    factoryAddress?: string | undefined;
    version?: string | undefined;
}>>;
