{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../../src/middleware/gas-fees.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,8BAA8B,EAAE,MAAM,kBAAkB,CAAC;AAIlE,MAAM,CAAC,MAAM,0BAA0B,GAAG,CACxC,QAAyB,EACR,EAAE;IACnB,QAAQ,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE;QACjE,IAAI,CAAC,KAAK,EAAE,4BAA4B,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC5D,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAElD,QAAQ,CAAC,SAAsC,CAAC,OAAO,CAAC;gBACvD,MAAM,EAAE,8BAA8B;gBACtC,MAAM,EAAE,EAAE;aACX,CAAC;SACH,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;QAC1C,IAAI,aAAa,IAAI,IAAI,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,oBAAoB,GAAG,8BAA8B,CACzD,4BAA4B,EAC5B,SAAS,EAAE,oBAAoB,EAC/B,UAAU,EAAE,oBAAoB,CACjC,CAAC;QACF,MAAM,YAAY,GAAG,8BAA8B,CACjD,aAAa,GAAG,MAAM,CAAC,oBAAoB,CAAC,EAC5C,SAAS,EAAE,YAAY,EACvB,UAAU,EAAE,YAAY,CACzB,CAAC;QAEF,OAAO;YACL,GAAG,MAAM;YACT,oBAAoB;YACpB,YAAY;SACb,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { applyUserOpOverrideOrFeeOption } from \"@alchemy/aa-core\";\nimport type { AlchemyProvider } from \"../provider/base.js\";\nimport type { ClientWithAlchemyMethods } from \"./client.js\";\n\nexport const withAlchemyGasFeeEstimator = (\n  provider: AlchemyProvider\n): AlchemyProvider => {\n  provider.withFeeDataGetter(async (struct, overrides, feeOptions) => {\n    let [block, maxPriorityFeePerGasEstimate] = await Promise.all([\n      provider.rpcClient.getBlock({ blockTag: \"latest\" }),\n      // it's a fair assumption that if someone is using this Alchemy Middleware, then they are using Alchemy RPC\n      (provider.rpcClient as ClientWithAlchemyMethods).request({\n        method: \"rundler_maxPriorityFeePerGas\",\n        params: [],\n      }),\n    ]);\n    const baseFeePerGas = block.baseFeePerGas;\n    if (baseFeePerGas == null) {\n      throw new Error(\"baseFeePerGas is null\");\n    }\n\n    const maxPriorityFeePerGas = applyUserOpOverrideOrFeeOption(\n      maxPriorityFeePerGasEstimate,\n      overrides?.maxPriorityFeePerGas,\n      feeOptions?.maxPriorityFeePerGas\n    );\n    const maxFeePerGas = applyUserOpOverrideOrFeeOption(\n      baseFeePerGas + BigInt(maxPriorityFeePerGas),\n      overrides?.maxFeePerGas,\n      feeOptions?.maxFeePerGas\n    );\n\n    return {\n      ...struct,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n    };\n  });\n  return provider;\n};\n"]}