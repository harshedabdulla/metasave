{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../src/middleware/client.ts"],"names":[],"mappings":"AAAA,OAAO,EAGN,MAAM,kBAAkB,CAAC","sourcesContent":["import {\n  type PublicErc4337Client,\n  type UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport type { Address, Hex } from \"viem\";\nimport type {\n  RequestGasAndPaymasterAndDataOverrides,\n  SimulateUserOperationAssetChangesRequest,\n  SimulateUserOperationAssetChangesResponse,\n} from \"./types/index.js\";\n\nexport type ClientWithAlchemyMethods = PublicErc4337Client & {\n  request: PublicErc4337Client[\"request\"] &\n    {\n      request(args: {\n        method: \"alchemy_requestPaymasterAndData\";\n        params: [\n          {\n            policyId: string;\n            entryPoint: Address;\n            userOperation: UserOperationRequest;\n          }\n        ];\n      }): Promise<{ paymasterAndData: Hex }>;\n\n      request(args: {\n        method: \"alchemy_requestGasAndPaymasterAndData\";\n        params: [\n          {\n            policyId: string;\n            entryPoint: Address;\n            userOperation: UserOperationRequest;\n            dummySignature: Hex;\n            overrides?: RequestGasAndPaymasterAndDataOverrides;\n          }\n        ];\n      }): Promise<{\n        paymasterAndData: Hex;\n        callGasLimit: Hex;\n        verificationGasLimit: Hex;\n        preVerificationGas: Hex;\n        maxFeePerGas: Hex;\n        maxPriorityFeePerGas: Hex;\n      }>;\n\n      request(args: {\n        method: \"alchemy_simulateUserOperationAssetChanges\";\n        params: SimulateUserOperationAssetChangesRequest;\n      }): Promise<SimulateUserOperationAssetChangesResponse>;\n\n      request(args: {\n        method: \"rundler_maxPriorityFeePerGas\";\n        params: [];\n      }): Promise<Hex>;\n    }[\"request\"];\n};\n"]}