{"version":3,"file":"simulate-uo.js","sourceRoot":"","sources":["../../../src/middleware/simulate-uo.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,WAAW,EACX,iBAAiB,GAElB,MAAM,kBAAkB,CAAC;AAI1B,MAAM,CAAC,MAAM,2BAA2B,GAAG,CACzC,QAAW,EACR,EAAE;IACL,QAAQ,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QACnD,MAAM,WAAW,GAAG,MAClB,QAAQ,CAAC,SACV,CAAC,OAAO,CAAC;YACR,MAAM,EAAE,2CAA2C;YACnD,MAAM,EAAE;gBACN,WAAW,CAAC,MAAM,iBAAiB,CAAC,QAAQ,CAAC,CAAwB;gBACrE,QAAQ,CAAC,oBAAoB,EAAE;aAChC;SACF,CAAC,CAAC;QAEH,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import {\n  deepHexlify,\n  resolveProperties,\n  type UserOperationStruct,\n} from \"@alchemy/aa-core\";\nimport type { AlchemyProvider } from \"../provider/index.js\";\nimport type { ClientWithAlchemyMethods } from \"./client.js\";\n\nexport const withAlchemyUserOpSimulation = <P extends AlchemyProvider>(\n  provider: P\n): P => {\n  provider.withSimulateUOMiddleware(async (uoStruct) => {\n    const uoSimResult = await (\n      provider.rpcClient as ClientWithAlchemyMethods\n    ).request({\n      method: \"alchemy_simulateUserOperationAssetChanges\",\n      params: [\n        deepHexlify(await resolveProperties(uoStruct)) as UserOperationStruct,\n        provider.getEntryPointAddress(),\n      ],\n    });\n\n    if (uoSimResult.error) {\n      throw new Error(uoSimResult.error.message);\n    }\n\n    return uoStruct;\n  });\n  return provider;\n};\n"]}