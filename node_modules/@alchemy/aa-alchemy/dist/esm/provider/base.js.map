{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/provider/base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SmartAccountProvider,\n  createPublicErc4337Client,\n  deepHexlify,\n  type BatchUserOperationCallData,\n  type UserOperationCallData,\n  type UserOperationOverrides,\n} from \"@alchemy/aa-core\";\nimport { Alchemy } from \"alchemy-sdk\";\nimport { type HttpTransport } from \"viem\";\nimport { getDefaultUserOperationFeeOptions } from \"../defaults.js\";\nimport type { ClientWithAlchemyMethods } from \"../middleware/client.js\";\nimport { withAlchemyGasFeeEstimator } from \"../middleware/gas-fees.js\";\nimport {\n  withAlchemyGasManager,\n  type AlchemyGasManagerConfig,\n} from \"../middleware/gas-manager.js\";\nimport { withAlchemyUserOpSimulation } from \"../middleware/simulate-uo.js\";\nimport {\n  AlchemyProviderConfigSchema,\n  AlchemySdkClientSchema,\n} from \"../schema.js\";\nimport type { AlchemyProviderConfig } from \"../type.js\";\n\nexport class AlchemyProvider extends SmartAccountProvider<HttpTransport> {\n  private rpcUrl: string;\n\n  constructor(config_: AlchemyProviderConfig) {\n    const config = AlchemyProviderConfigSchema.parse(config_);\n\n    const { chain, entryPointAddress, opts, ...connectionConfig } = config;\n\n    const rpcUrl =\n      connectionConfig.rpcUrl == null\n        ? `${chain.rpcUrls.alchemy.http[0]}/${connectionConfig.apiKey ?? \"\"}`\n        : connectionConfig.rpcUrl;\n\n    const client = createPublicErc4337Client({\n      chain: chain,\n      rpcUrl,\n      ...(connectionConfig.jwt != null && {\n        fetchOptions: {\n          headers: {\n            Authorization: `Bearer ${connectionConfig.jwt}`,\n          },\n        },\n      }),\n    });\n\n    const feeOptions =\n      config.opts?.feeOptions ?? getDefaultUserOperationFeeOptions(chain);\n\n    super({\n      rpcProvider: client,\n      entryPointAddress,\n      chain,\n      opts: { ...opts, feeOptions },\n    });\n\n    this.rpcUrl = rpcUrl;\n\n    withAlchemyGasFeeEstimator(this);\n  }\n\n  simulateUserOperationAssetChanges = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ) => {\n    const uoStruct = deepHexlify(\n      await this.buildUserOperation(data, overrides)\n    );\n\n    return (this.rpcClient as ClientWithAlchemyMethods).request({\n      method: \"alchemy_simulateUserOperationAssetChanges\",\n      params: [uoStruct, this.getEntryPointAddress()],\n    });\n  };\n\n  /**\n   * This methods adds the Alchemy Gas Manager middleware to the provider.\n   *\n   * @param config - the Alchemy Gas Manager configuration\n   * @param delegateGasEstimation - whether to delegate the gas estimation entirely to bundler\n   *\n   * Note that with delegateGasEstimation set to true, the gas estimation middleware will be no-op'd\n   * and fee options set upon provider init will be ignored.\n   *\n   * @returns {AlchemyProvider} - a new AlchemyProvider with the Gas Manager middleware\n   */\n  withAlchemyGasManager(\n    config: AlchemyGasManagerConfig,\n    delegateGasEstimation: boolean = true\n  ): AlchemyProvider {\n    if (!this.isConnected()) {\n      throw new Error(\n        \"AlchemyProvider: account is not set, did you call `connect` first?\"\n      );\n    }\n\n    return withAlchemyGasManager(this, config, {\n      estimateGas: delegateGasEstimation,\n    });\n  }\n\n  /**\n   * This method adds the Alchemy UserOperation Simulation middleware to the provider.\n   *\n   * @returns {AlchemyProvider} - a new AlchemyProvider with UserOperation Simulation middleware\n   */\n  withAlchemyUserOpSimulation(): this {\n    if (!this.isConnected()) {\n      throw new Error(\n        \"AlchemyProvider: account is not set, did you call `connect` first?\"\n      );\n    }\n\n    return withAlchemyUserOpSimulation(this);\n  }\n\n  /**\n   * This method adds Alchemy Enhanced APIs to the provider, via an optional dependency on\n   * `alchemy-sdk`.\n   * @see: https://github.com/alchemyplatform/alchemy-sdk-js\n   *\n   * The Alchemy SDK client must be configured with the same API key and network as the\n   * AlchemyProvider. This method validates such at runtime.\n   *\n   * Additionally, since the Alchemy SDK client does not yet support JWT authentication,\n   * AlchemyProvider initialized with JWTs cannot use this method. They must be initialized with an\n   * API key or RPC URL.\n   *\n   * There is an open issue on the Alchemy SDK repo to add JWT support in the meantime.\n   * @see: https://github.com/alchemyplatform/alchemy-sdk-js/issues/386\n   *\n   * @param alchemy - an initialized Alchemy SDK client\n   * @returns - a new AlchemyProvider extended with Alchemy SDK client methods\n   */\n  withAlchemyEnhancedApis(alchemy: Alchemy): this & Alchemy {\n    AlchemySdkClientSchema.parse(alchemy);\n\n    if (alchemy.config.url && alchemy.config.url !== this.rpcUrl) {\n      throw new Error(\n        \"Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL\"\n      );\n    }\n\n    const alchemyUrl = `https://${alchemy.config.network}.g.alchemy.com/v2/${alchemy.config.apiKey}`;\n    if (alchemyUrl !== this.rpcUrl) {\n      throw new Error(\n        \"Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL\"\n      );\n    }\n\n    return this.extend(() => {\n      return {\n        core: alchemy.core,\n        nft: alchemy.nft,\n        transact: alchemy.transact,\n        debug: alchemy.debug,\n        ws: alchemy.ws,\n        notify: alchemy.notify,\n        config: alchemy.config,\n      };\n    });\n  }\n}\n"]}