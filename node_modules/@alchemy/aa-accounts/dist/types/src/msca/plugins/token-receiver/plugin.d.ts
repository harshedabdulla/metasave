import { encodeAbiParameters, type Address, type GetContractReturnType, type HttpTransport, type Transport, type GetFunctionArgs } from 'viem';
import { type Plugin } from '../types.js';
import { type PublicErc4337Client, type UserOperationOverrides, type SupportedTransports, type ISmartAccountProvider } from '@alchemy/aa-core';
import { type IMSCA } from '../../types.js';
import { type FunctionReference } from '../../account-loupe/types.js';
type InstallArgs = [];
export type InstallTokenReceiverPluginParams = {
    args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
    pluginAddress?: Address;
    dependencyOverrides?: FunctionReference[];
};
declare const TokenReceiverPlugin_: {
    meta: {
        name: string;
        version: string;
        addresses: Record<number, `0x${string}`>;
    };
    getContract: (rpcClient: PublicErc4337Client<HttpTransport> | PublicErc4337Client<Transport>, address?: Address) => GetContractReturnType<readonly [{
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onInstall";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onUninstall";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pluginManifest";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PluginManifest";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "interfaceIds";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "dependencyInterfaceIds";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "executionFunctions";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "permittedExecutionSelectors";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "permitAnyExternalAddress";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "canSpendNativeToken";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "permittedExternalCalls";
                readonly internalType: "struct ManifestExternalCallPermission[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "externalAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "permitAnySelector";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "selectors";
                    readonly internalType: "bytes4[]";
                    readonly type: "bytes4[]";
                }];
            }, {
                readonly name: "userOpValidationFunctions";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "runtimeValidationFunctions";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "preUserOpValidationHooks";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "preRuntimeValidationHooks";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "executionHooks";
                readonly internalType: "struct ManifestExecutionHook[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "preExecHook";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }, {
                    readonly name: "postExecHook";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }];
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pluginMetadata";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PluginMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "version";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "author";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "permissionDescriptors";
                readonly internalType: "struct SelectorPermission[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "functionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "permissionDescription";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "preExecHookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "postExecutionHook";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preExecutionHook";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preRuntimeValidationHook";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "userOp";
            readonly internalType: "struct UserOperation";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "initCode";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "verificationGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "preVerificationGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPriorityFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "paymasterAndData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "userOpHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "preUserOpValidationHook";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "runtimeValidationFunction";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "tokensReceived";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "userOp";
            readonly internalType: "struct UserOperation";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "initCode";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "verificationGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "preVerificationGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPriorityFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "paymasterAndData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "userOpHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "userOpValidationFunction";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotContractCaller";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "selector";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "NotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitialized";
    }], PublicErc4337Client<HttpTransport> | PublicErc4337Client<Transport>, undefined, `0x${string}`>;
    accountMethods: (_account: IMSCA<any, any, any>) => {
        encodeTokensReceivedData: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'tokensReceived'>) => `0x${string}`;
        encodeOnErc721ReceivedData: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC721Received'>) => `0x${string}`;
        encodeOnErc1155ReceivedData: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC1155Received'>) => `0x${string}`;
        encodeOnErc1155BatchReceivedData: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC1155BatchReceived'>) => `0x${string}`;
    };
    providerMethods: <TTransport extends SupportedTransports, P extends ISmartAccountProvider<TTransport> & {
        account: IMSCA<TTransport, import("@alchemy/aa-core").SmartAccountSigner<any>, {}>;
    }>(provider: P) => {
        tokensReceived: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'tokensReceived'>, overrides?: UserOperationOverrides) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
        onErc721Received: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC721Received'>, overrides?: UserOperationOverrides) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
        onErc1155Received: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC1155Received'>, overrides?: UserOperationOverrides) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
        onErc1155BatchReceived: ({ args, }: GetFunctionArgs<typeof TokenReceiverPluginExecutionFunctionAbi, 'onERC1155BatchReceived'>, overrides?: UserOperationOverrides) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
        installTokenReceiverPlugin: (params: InstallTokenReceiverPluginParams, overrides?: UserOperationOverrides) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    };
};
export declare const TokenReceiverPlugin: Plugin<ReturnType<(typeof TokenReceiverPlugin_)['accountMethods']>, ReturnType<(typeof TokenReceiverPlugin_)['providerMethods']>, typeof TokenReceiverPluginAbi>;
export declare const TokenReceiverPluginExecutionFunctionAbi: readonly [{
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "tokensReceived";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}];
export declare const TokenReceiverPluginAbi: readonly [{
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onInstall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onUninstall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pluginManifest";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PluginManifest";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "interfaceIds";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "dependencyInterfaceIds";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "executionFunctions";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "permittedExecutionSelectors";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "permitAnyExternalAddress";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "canSpendNativeToken";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "permittedExternalCalls";
            readonly internalType: "struct ManifestExternalCallPermission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "externalAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "permitAnySelector";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "selectors";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }];
        }, {
            readonly name: "userOpValidationFunctions";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "runtimeValidationFunctions";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "preUserOpValidationHooks";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "preRuntimeValidationHooks";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "executionHooks";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "preExecHook";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "postExecHook";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }];
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pluginMetadata";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PluginMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "author";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "permissionDescriptors";
            readonly internalType: "struct SelectorPermission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "functionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "permissionDescription";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "preExecHookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "postExecutionHook";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "preExecutionHook";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "preRuntimeValidationHook";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "userOp";
        readonly internalType: "struct UserOperation";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verificationGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "preVerificationGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPriorityFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "paymasterAndData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "preUserOpValidationHook";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "runtimeValidationFunction";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "tokensReceived";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "userOp";
        readonly internalType: "struct UserOperation";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verificationGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "preVerificationGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPriorityFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "paymasterAndData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "userOpValidationFunction";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyInitialized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotContractCaller";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "NotImplemented";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitialized";
}];
export {};
//# sourceMappingURL=plugin.d.ts.map