import { BaseSmartContractAccount, SmartAccountProvider, type SignTypedDataParams, type SmartAccountSigner, type BaseSmartAccountParams, type BatchUserOperationCallData } from "@alchemy/aa-core";
import { type Address, type FallbackTransport, type Hash, type Hex, type Transport } from "viem";
export interface NaniSmartAccountParams<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartAccountParams<TTransport> {
    owner: SmartAccountSigner;
    index?: bigint;
    salt?: Hex;
}
export declare class NaniAccount<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartContractAccount<TTransport> {
    protected owner: SmartAccountSigner;
    private readonly index;
    protected salt?: Hex;
    constructor(params: NaniSmartAccountParams<TTransport>);
    signTypedData(params: SignTypedDataParams): Promise<Hash>;
    /**
     * Returns the on-chain EOA owner address of the account.
     *
     * @returns {Address} the on-chain EOA owner of the account
     */
    getOwnerAddress(): Promise<Address>;
    getAddress(): Promise<Address>;
    getDummySignature(): Hex;
    signMessage(msg: Uint8Array | string): Promise<Hex>;
    encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex>;
    encodeBatchExecute(calls: BatchUserOperationCallData): Promise<Hex>;
    /**
     * Encodes the delegateExecute function call using Nani Account ABI.
     *
     * @param delegate - the delegate to execute the function call
     * @param data - the data to be passed to the function call
     * @returns {Hex} the encoded function call
     */
    static encodeExecuteDelegate(delegate: Address, data: Hex): Hex;
    /**
     * Encodes the transferOwnership function call using Nani Account ABI.
     *
     * @param newOwner - the new owner of the account
     * @returns {Hex} the encoded function call
     */
    static encodeTransferOwnership(newOwner: Address): Hex;
    /**
     * Transfers ownership of the account to the newOwner on-chain and also updates the owner of the account.
     * Optionally waits for the transaction to be mined.
     *
     * @param provider - the provider to use to send the transaction
     * @param newOwner - the new owner of the account
     * @param waitForTxn - whether or not to wait for the transaction to be mined
     * @returns {Hash} the userOperation hash, or transaction hash if `waitForTxn` is true
     */
    static transferOwnership<TTransport extends Transport | FallbackTransport = Transport>(provider: SmartAccountProvider<TTransport> & {
        account: NaniAccount<TTransport>;
    }, newOwner: SmartAccountSigner, waitForTxn?: boolean): Promise<Hash>;
    protected getAccountInitCode(): Promise<`0x${string}`>;
    protected getSalt(): Promise<Hex>;
    protected getFactoryInitCode(): Promise<Hex>;
}
//# sourceMappingURL=account.d.ts.map