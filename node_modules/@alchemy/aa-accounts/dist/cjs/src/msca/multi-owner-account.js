"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMultiOwnerMSCAWithSessionKey = exports.createMultiOwnerMSCA = exports.createMultiOwnerMSCABuilder = exports.createMultiOwnerMSCASchema = void 0;
const zod_1 = require("abitype/zod");
const viem_1 = require("viem");
const zod_2 = require("zod");
const index_js_1 = require("../index.js");
const MultiOwnerMSCAFactory_js_1 = require("./abis/MultiOwnerMSCAFactory.js");
const MultiOwnerTokenReceiverMSCAFactory_js_1 = require("./abis/MultiOwnerTokenReceiverMSCAFactory.js");
const decorator_js_1 = require("./account-loupe/decorator.js");
const index_js_2 = require("./builder/index.js");
const wrapped_signer_js_1 = require("./builder/wrapped-signer.js");
const index_js_3 = require("./plugins/multi-owner/index.js");
const plugin_js_1 = require("./plugins/token-receiver/plugin.js");
const createMultiOwnerMSCASchema = () => (0, index_js_2.ModularAccountBuilderParamsSchema)()
    .extend({
    owners: zod_2.z.array(zod_1.Address).default([]),
    index: zod_2.z.bigint().optional().default(0n),
    excludeDefaultTokenReceiverPlugin: zod_2.z.boolean().optional().default(false),
    factoryAddress: zod_1.Address.optional(),
})
    .transform((params) => {
    const factoryAddress = params.factoryAddress ??
        (0, index_js_1.getDefaultMultiOwnerMSCAFactoryAddress)(params.chain, params.excludeDefaultTokenReceiverPlugin);
    return {
        ...params,
        factoryAddress,
    };
});
exports.createMultiOwnerMSCASchema = createMultiOwnerMSCASchema;
const createMultiOwnerMSCABuilder = (params_) => {
    const params = (0, exports.createMultiOwnerMSCASchema)().parse(params_);
    const builder = new index_js_2.MSCABuilder()
        .withFactory(async (acct) => {
        const ownerAddress = await params.owner.getAddress();
        const owners = Array.from(new Set([...params.owners, ownerAddress]))
            .filter((x) => (0, viem_1.hexToBigInt)(x) !== 0n)
            .sort((a, b) => {
            const bigintA = (0, viem_1.hexToBigInt)(a);
            const bigintB = (0, viem_1.hexToBigInt)(b);
            return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;
        });
        return (0, viem_1.concatHex)([
            acct.getFactoryAddress(),
            (0, viem_1.encodeFunctionData)({
                abi: params.excludeDefaultTokenReceiverPlugin
                    ? MultiOwnerMSCAFactory_js_1.MultiOwnerMSCAFactoryAbi
                    : MultiOwnerTokenReceiverMSCAFactory_js_1.MultiOwnerTokenReceiverMSCAFactoryAbi,
                functionName: "createAccount",
                args: [params.index, owners],
            }),
        ]);
    })
        .withExecutor(index_js_1.StandardExecutor)
        .withSigner(wrapped_signer_js_1.WrapWith712SignerMethods);
    return builder;
};
exports.createMultiOwnerMSCABuilder = createMultiOwnerMSCABuilder;
const createMultiOwnerMSCA = (params_) => {
    const params = (0, exports.createMultiOwnerMSCASchema)().parse(params_);
    const builder = (0, exports.createMultiOwnerMSCABuilder)(params);
    let account = builder
        .build(params)
        .extendWithPluginMethods(index_js_3.MultiOwnerPlugin)
        .extend(decorator_js_1.accountLoupeDecorators);
    if (params.excludeDefaultTokenReceiverPlugin) {
        return account;
    }
    return account.extendWithPluginMethods(plugin_js_1.TokenReceiverPlugin);
};
exports.createMultiOwnerMSCA = createMultiOwnerMSCA;
const createMultiOwnerMSCAWithSessionKey = async (params_, sessionKeyOverrides) => {
    const params = (0, exports.createMultiOwnerMSCASchema)().parse(params_);
    const builder = (0, exports.createMultiOwnerMSCABuilder)(params);
    const sessionKeySigner = new index_js_1.SessionKeySigner({
        fallbackSigner: params.owner,
        ...sessionKeyOverrides,
    });
    sessionKeySigner.setKeyActive(sessionKeyOverrides?.keyActive ?? true);
    const baseAccount = builder.build(params);
    const accountAddress = await baseAccount.getAddress();
    const initCode = await baseAccount.getInitCode();
    let account = builder
        .withExecutor(index_js_1.SessionKeyExecutor)
        .build({ ...params, owner: sessionKeySigner, initCode, accountAddress })
        .extendWithPluginMethods(index_js_3.MultiOwnerPlugin)
        .extendWithPluginMethods(index_js_1.SessionKeyPlugin)
        .extend(decorator_js_1.accountLoupeDecorators);
    if (params.excludeDefaultTokenReceiverPlugin) {
        return account;
    }
    return account.extendWithPluginMethods(plugin_js_1.TokenReceiverPlugin);
};
exports.createMultiOwnerMSCAWithSessionKey = createMultiOwnerMSCAWithSessionKey;
//# sourceMappingURL=multi-owner-account.js.map