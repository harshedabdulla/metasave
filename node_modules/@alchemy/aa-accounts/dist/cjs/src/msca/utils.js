"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMSCAUpgradeToData = exports.getDefaultMultiOwnerMSCAFactoryAddress = void 0;
const viem_1 = require("viem");
const chains_1 = require("viem/chains");
const IPlugin_js_1 = require("./abis/IPlugin.js");
const MultiOwnerTokenReceiverMSCAFactory_js_1 = require("./abis/MultiOwnerTokenReceiverMSCAFactory.js");
const UpgradeableModularAccount_js_1 = require("./abis/UpgradeableModularAccount.js");
const multi_owner_account_js_1 = require("./multi-owner-account.js");
const index_js_1 = require("./plugins/multi-owner/index.js");
const plugin_js_1 = require("./plugins/token-receiver/plugin.js");
const getDefaultMultiOwnerMSCAFactoryAddress = (chain, excludeDefaultTokenReceiverPlugin = false) => {
    switch (chain.id) {
        case chains_1.sepolia.id:
            return excludeDefaultTokenReceiverPlugin
                ? "0xC69731F267760466663470256A7ba28F79eDC4d6"
                : "0x852B3a676684031Cb77b69B50D8d7879f4c4807d";
        case chains_1.mainnet.id:
        case chains_1.goerli.id:
        case chains_1.polygon.id:
        case chains_1.polygonMumbai.id:
        case chains_1.optimism.id:
        case chains_1.optimismGoerli.id:
        case chains_1.optimismSepolia.id:
        case chains_1.arbitrum.id:
        case chains_1.arbitrumGoerli.id:
        case chains_1.arbitrumSepolia.id:
        case chains_1.base.id:
        case chains_1.baseGoerli.id:
        case chains_1.baseSepolia.id:
            throw new Error("not yet deployed");
    }
    throw new Error(`no default multi owner msca factory contract exists for ${chain.name}`);
};
exports.getDefaultMultiOwnerMSCAFactoryAddress = getDefaultMultiOwnerMSCAFactoryAddress;
const getMSCAUpgradeToData = async (provider, multiOwnerPluginAddress, tokenReceiverPluginAddress) => {
    const factoryAddress = (0, exports.getDefaultMultiOwnerMSCAFactoryAddress)(provider.rpcClient.chain);
    const accountAddress = await provider.getAddress();
    const implAddress = await provider.rpcClient.readContract({
        abi: MultiOwnerTokenReceiverMSCAFactory_js_1.MultiOwnerTokenReceiverMSCAFactoryAbi,
        address: factoryAddress,
        functionName: "IMPL",
    });
    const multiOwnerAddress = multiOwnerPluginAddress ??
        index_js_1.MultiOwnerPlugin.meta.addresses[provider.rpcClient.chain.id];
    const tokenReceiverAddress = tokenReceiverPluginAddress ??
        plugin_js_1.TokenReceiverPlugin.meta.addresses[provider.rpcClient.chain.id];
    if (!multiOwnerAddress) {
        throw new Error("could not get multi owner plugin address");
    }
    if (!tokenReceiverAddress) {
        throw new Error("could not get token receiver plugin address");
    }
    const moPluginManifest = await provider.rpcClient.readContract({
        abi: IPlugin_js_1.IPluginAbi,
        address: multiOwnerAddress,
        functionName: "pluginManifest",
    });
    const hashedMultiOwnerPluginManifest = (0, viem_1.keccak256)((0, viem_1.encodeFunctionResult)({
        abi: IPlugin_js_1.IPluginAbi,
        functionName: "pluginManifest",
        result: moPluginManifest,
    }));
    const trPluginManifest = await provider.rpcClient.readContract({
        abi: IPlugin_js_1.IPluginAbi,
        address: tokenReceiverAddress,
        functionName: "pluginManifest",
    });
    const hashedTrPluginManifest = (0, viem_1.keccak256)((0, viem_1.encodeFunctionResult)({
        abi: IPlugin_js_1.IPluginAbi,
        functionName: "pluginManifest",
        result: trPluginManifest,
    }));
    const owner = provider.account.getOwner();
    if (owner == null) {
        throw new Error("could not get owner");
    }
    const ownerAddress = await owner.getAddress();
    const encodedOwner = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("address[]"), [
        [ownerAddress],
    ]);
    const encodedPluginInitData = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("bytes32[], bytes[]"), [
        [hashedMultiOwnerPluginManifest, hashedTrPluginManifest],
        [encodedOwner, "0x"],
    ]);
    const encodedMSCAInitializeData = (0, viem_1.encodeFunctionData)({
        abi: UpgradeableModularAccount_js_1.UpgradeableModularAccountAbi,
        functionName: "initialize",
        args: [[multiOwnerAddress, tokenReceiverAddress], encodedPluginInitData],
    });
    return {
        implAddress,
        initializationData: encodedMSCAInitializeData,
        connectFn: (rpcClient) => (0, multi_owner_account_js_1.createMultiOwnerMSCA)({
            rpcClient,
            owner,
            entryPointAddress: provider.account.getEntryPointAddress(),
            factoryAddress,
            chain: rpcClient.chain,
            accountAddress,
        }),
    };
};
exports.getMSCAUpgradeToData = getMSCAUpgradeToData;
//# sourceMappingURL=utils.js.map