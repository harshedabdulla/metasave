"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MSCABuilder = exports.ModularAccountBuilderParamsSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const zod_1 = require("zod");
const decorator_js_1 = require("../plugin-manager/decorator.js");
const zCompleteBuilder = zod_1.z.object({
    executor: zod_1.z.custom(),
    signer: zod_1.z.custom(),
    factory: zod_1.z.custom(),
});
const ModularAccountBuilderParamsSchema = () => (0, aa_core_1.createBaseSmartAccountParamsSchema)().extend({
    owner: zod_1.z.custom(aa_core_1.isSigner),
    index: zod_1.z.bigint().optional(),
});
exports.ModularAccountBuilderParamsSchema = ModularAccountBuilderParamsSchema;
class MSCABuilder {
    constructor() {
        Object.defineProperty(this, "executor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "factory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    withExecutor(executor) {
        return Object.assign(this, { executor });
    }
    withSigner(methods) {
        return Object.assign(this, { signer: methods });
    }
    withFactory(initCode) {
        return Object.assign(this, { factory: initCode });
    }
    build(params) {
        const builder = this;
        const { signer, executor, factory } = zCompleteBuilder.parse(builder);
        return new (class DynamicMSCA extends aa_core_1.BaseSmartContractAccount {
            constructor() {
                super(...arguments);
                Object.defineProperty(this, "providerDecorators_", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: [decorator_js_1.pluginManagerDecorator]
                });
                Object.defineProperty(this, "providerDecorators", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: (p) => {
                        if (!p.isConnected() && p.account !== this) {
                            throw new Error("provider should be connected if it is being decorated by the account");
                        }
                        return this.providerDecorators_.reduce((acc, decorator) => ({
                            ...acc,
                            ...decorator(p),
                        }), {});
                    }
                });
                Object.defineProperty(this, "extendWithPluginMethods", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: (plugin) => {
                        const methods = plugin.accountMethods(this);
                        const result = Object.assign(this, methods);
                        result.providerDecorators_.push(plugin.providerMethods);
                        return result;
                    }
                });
                Object.defineProperty(this, "addProviderDecorator", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: (decorator) => {
                        this.providerDecorators_.push(decorator);
                        return this;
                    }
                });
            }
            getDummySignature() {
                return signer(this).getDummySignature();
            }
            encodeExecute(target, value, data) {
                return executor(this).encodeExecute(target, value, data);
            }
            encodeBatchExecute(txs) {
                return executor(this).encodeBatchExecute(txs);
            }
            signMessage(msg) {
                return signer(this).signMessage(msg);
            }
            signTypedData(params) {
                return signer(this).signTypedData(params);
            }
            signUserOperationHash(uoHash) {
                return signer(this).signUserOperationHash(uoHash);
            }
            getAccountInitCode() {
                return factory(this);
            }
        })(params);
    }
}
exports.MSCABuilder = MSCABuilder;
//# sourceMappingURL=index.js.map