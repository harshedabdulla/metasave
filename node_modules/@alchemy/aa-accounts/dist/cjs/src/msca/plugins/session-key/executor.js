"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionKeyExecutor = void 0;
const viem_1 = require("viem");
const IStandardExecutor_js_1 = require("../../abis/IStandardExecutor.js");
const plugin_js_1 = require("./plugin.js");
const signer_js_1 = require("./signer.js");
const SessionKeyExecutor = (acct) => {
    const owner = acct.getOwner();
    if (!owner) {
        throw new Error("Account must be connected to an owner");
    }
    const isSessionKeyActive = async (pluginAddress) => {
        const contract = plugin_js_1.SessionKeyPlugin.getContract(acct.rpcProvider, pluginAddress);
        const [accountAddress, sessionKey] = await Promise.all([
            acct.getAddress(),
            owner.getAddress(),
        ]);
        if (await contract.read
            .isSessionKeyOf([accountAddress, sessionKey])
            .catch(() => false)) {
            return true;
        }
        return (!owner.signerType.startsWith(signer_js_1.SESSION_KEY_SIGNER_TYPE_PFX) ||
            (owner.signerType.startsWith(signer_js_1.SESSION_KEY_SIGNER_TYPE_PFX) &&
                owner.isKeyActive()));
    };
    return {
        async encodeExecute(target, value, data) {
            if (!isSessionKeyActive()) {
                return (0, viem_1.encodeFunctionData)({
                    abi: IStandardExecutor_js_1.IStandardExecutorAbi,
                    functionName: "execute",
                    args: [target, value, data],
                });
            }
            return (0, viem_1.encodeFunctionData)({
                abi: plugin_js_1.SessionKeyPluginAbi,
                functionName: "executeWithSessionKey",
                args: [[{ target, value, data }], await owner.getAddress()],
            });
        },
        async encodeBatchExecute(txs) {
            if (!isSessionKeyActive()) {
                return (0, viem_1.encodeFunctionData)({
                    abi: IStandardExecutor_js_1.IStandardExecutorAbi,
                    functionName: "executeBatch",
                    args: [
                        txs.map((tx) => ({
                            target: tx.target,
                            data: tx.data,
                            value: tx.value ?? 0n,
                        })),
                    ],
                });
            }
            return (0, viem_1.encodeFunctionData)({
                abi: plugin_js_1.SessionKeyPluginAbi,
                functionName: "executeWithSessionKey",
                args: [
                    txs.map((tx) => ({
                        target: tx.target,
                        data: tx.data,
                        value: tx.value ?? 0n,
                    })),
                    await owner.getAddress(),
                ],
            });
        },
    };
};
exports.SessionKeyExecutor = SessionKeyExecutor;
//# sourceMappingURL=executor.js.map