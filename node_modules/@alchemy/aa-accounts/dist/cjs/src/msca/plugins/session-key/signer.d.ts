import { LocalAccountSigner, type SignTypedDataParams, type SmartAccountSigner } from "@alchemy/aa-core";
import type { PrivateKeyAccount } from "viem";
import { z } from "zod";
export declare const createSessionKeySignerSchema: <TFallback extends SmartAccountSigner<any>>() => z.ZodObject<{
    storageType: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"local-storage">, z.ZodLiteral<"session-storage">]>>;
    storageKey: z.ZodDefault<z.ZodString>;
    fallbackSigner: z.ZodType<TFallback, z.ZodTypeDef, TFallback>;
}, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    storageType: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"local-storage">, z.ZodLiteral<"session-storage">]>>;
    storageKey: z.ZodDefault<z.ZodString>;
    fallbackSigner: z.ZodType<TFallback, z.ZodTypeDef, TFallback>;
}>, "storageType" | "storageKey" | (undefined extends TFallback ? never : "fallbackSigner")>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    storageType: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"local-storage">, z.ZodLiteral<"session-storage">]>>;
    storageKey: z.ZodDefault<z.ZodString>;
    fallbackSigner: z.ZodType<TFallback, z.ZodTypeDef, TFallback>;
}>, "storageType" | "storageKey" | (undefined extends TFallback ? never : "fallbackSigner")>[k_1]; }, { [k_2 in keyof z.baseObjectInputType<{
    storageType: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"local-storage">, z.ZodLiteral<"session-storage">]>>;
    storageKey: z.ZodDefault<z.ZodString>;
    fallbackSigner: z.ZodType<TFallback, z.ZodTypeDef, TFallback>;
}>]: z.baseObjectInputType<{
    storageType: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"local-storage">, z.ZodLiteral<"session-storage">]>>;
    storageKey: z.ZodDefault<z.ZodString>;
    fallbackSigner: z.ZodType<TFallback, z.ZodTypeDef, TFallback>;
}>[k_2]; }>;
export type SessionKeySignerConfig<TFallback extends SmartAccountSigner> = z.input<ReturnType<typeof createSessionKeySignerSchema<TFallback>>>;
export declare const SESSION_KEY_SIGNER_TYPE_PFX = "alchemy:session-key";
export declare class SessionKeySigner<TFallback extends SmartAccountSigner> implements SmartAccountSigner<LocalAccountSigner<PrivateKeyAccount>> {
    signerType: string;
    inner: LocalAccountSigner<PrivateKeyAccount>;
    private keyActive;
    private fallback;
    private storageType;
    private storageKey;
    constructor(config_: SessionKeySignerConfig<TFallback>);
    getAddress: () => Promise<`0x${string}`>;
    signMessage: (msg: string | Uint8Array) => Promise<`0x${string}`>;
    signTypedData: (params: SignTypedDataParams) => Promise<`0x${string}`>;
    isKeyActive: () => boolean;
    setKeyActive: (active: boolean) => boolean;
    generateNewKey: () => `0x${string}`;
}
