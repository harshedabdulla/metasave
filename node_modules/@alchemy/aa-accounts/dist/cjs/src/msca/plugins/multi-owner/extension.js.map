{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multi-owner/extension.ts"],"names":[],"mappings":";;;AAGA,2CAAoE;AAEpE,MAAM,yBAAyB,GAAG;IAChC,GAAG,4BAAgB;IACnB,cAAc,EAAE,CAAC,OAA6B,EAAE,EAAE;QAChD,MAAM,EAAE,GAAG,4BAAgB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACpD,OAAO;YACL,GAAG,EAAE;YACL,UAAU,EAAE,KAAK,EAAE,aAAuB,EAAE,EAAE;gBAG5C,MAAM,QAAQ,GAAG,4BAAgB,CAAC,WAAW,CAC3C,OAAO,CAAC,WAAW,EACnB,aAAa,CACd,CAAC;gBACF,OAAO,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAC9D,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEW,QAAA,wBAAwB,GAIjC,yBAAyB,CAAC","sourcesContent":["import { type Address } from \"viem\";\nimport type { IMSCA } from \"../../types.js\";\nimport type { Plugin } from \"../types.js\";\nimport { MultiOwnerPlugin, MultiOwnerPluginAbi } from \"./plugin.js\";\n\nconst ExtendedMultiOwnerPlugin_ = {\n  ...MultiOwnerPlugin,\n  accountMethods: (account: IMSCA<any, any, any>) => {\n    const og = MultiOwnerPlugin.accountMethods(account);\n    return {\n      ...og,\n      readOwners: async (pluginAddress?: Address) => {\n        // TODO: check if the account actually has the plugin installed\n        // either via account loupe or checking if the supports interface call passes on the account\n        const contract = MultiOwnerPlugin.getContract(\n          account.rpcProvider,\n          pluginAddress\n        );\n        return contract.read.ownersOf([await account.getAddress()]);\n      },\n    };\n  },\n};\n\nexport const ExtendedMultiOwnerPlugin: Plugin<\n  ReturnType<(typeof ExtendedMultiOwnerPlugin_)[\"accountMethods\"]>,\n  ReturnType<(typeof ExtendedMultiOwnerPlugin_)[\"providerMethods\"]>,\n  typeof MultiOwnerPluginAbi\n> = ExtendedMultiOwnerPlugin_;\n"]}