{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/msca/plugins/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  Abi,\n  Address,\n  ISmartAccountProvider,\n  PublicErc4337Client,\n  SupportedTransports,\n} from \"@alchemy/aa-core\";\nimport type { GetContractReturnType, HttpTransport, Transport } from \"viem\";\nimport type { IMSCA } from \"../types\";\n\nexport interface Plugin<AD, PD, TAbi extends Abi> {\n  meta: { name: string; version: string; addresses: Record<number, Address> };\n  /**\n   * helper functions that can be used to get contract instance of the plugin\n   *\n   * @param p - a provider instance to provide public client instance to fetch the contract with\n   * @returns the plugin contract instance\n   */\n  getContract: (\n    rpcClient:\n      | PublicErc4337Client<HttpTransport>\n      | PublicErc4337Client<Transport>,\n    address?: Address\n  ) => GetContractReturnType<TAbi, typeof rpcClient, undefined, Address>;\n  /**\n   * Decorator functions that can be used to read data from an MSCA contract instance\n   * These methods can be used on their own or with the `account.extend` method to add them to the account instance\n   *  @example\n   * const account = new MSCA(...);\n   * const extendedAccount = account.extend(plugin.accountMethods);\n   * // OR\n   * const accountReadMethods = plugin.accountMethods(account);\n   *\n   * @param a - the MSCA contract instance we want to read from\n   * @returns the various read methods this plugin provides for this MSCA contract instance\n   */\n  accountMethods: (a: IMSCA<any, any, any>) => AD;\n  /**\n   *  Decorator functions that can be used to write data to an MSCA contract instance\n   *\n   * @example\n   * const provider = new SmartAccountProvider(...).connect(rpcClient => new MSCA(...));\n   * const extendedProvider = provider.extend(plugin.providerMethods);\n   * // OR\n   * const accountWriteMethods = plugin.providerMethods(provider);\n   *\n   * @param p - a provider instance connected to an MSCA that we want to send user ops to\n   * @returns the various write methods this plugin provides for this MSCA contract instance\n   */\n  providerMethods: <\n    TTransport extends SupportedTransports,\n    P extends ISmartAccountProvider<TTransport> & { account: IMSCA<TTransport> }\n  >(\n    p: P\n  ) => PD;\n}\n"]}