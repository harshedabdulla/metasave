"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionKeyPluginAbi = exports.SessionKeyPluginExecutionFunctionAbi = exports.SessionKeyPlugin = void 0;
const viem_1 = require("viem");
const plugin_js_1 = require("../multi-owner/plugin.js");
const installPlugin_js_1 = require("../../plugin-manager/installPlugin.js");
const addresses = {
    11155111: '0x70a64501Fd1398b0A236b69006936009d31C1520',
};
const SessionKeyPlugin_ = {
    meta: {
        name: 'Session Key Plugin',
        version: '1.0.0',
        addresses,
    },
    getContract: (rpcClient, address) => (0, viem_1.getContract)({
        address: address || addresses[rpcClient.chain.id],
        abi: exports.SessionKeyPluginAbi,
        publicClient: rpcClient,
    }),
    accountMethods: (_account) => ({
        encodeExecuteWithSessionKeyData: ({ args, }) => {
            return (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'executeWithSessionKey',
                args,
            });
        },
        encodeAddSessionKeyData: ({ args, }) => {
            return (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'addSessionKey',
                args,
            });
        },
        encodeRemoveSessionKeyData: ({ args, }) => {
            return (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'removeSessionKey',
                args,
            });
        },
        encodeRotateSessionKeyData: ({ args, }) => {
            return (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'rotateSessionKey',
                args,
            });
        },
        encodeUpdateKeyPermissionsData: ({ args, }) => {
            return (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'updateKeyPermissions',
                args,
            });
        },
    }),
    providerMethods: (provider) => ({
        executeWithSessionKey: ({ args, }, overrides) => {
            const callData = (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'executeWithSessionKey',
                args,
            });
            return provider.sendUserOperation(callData, overrides);
        },
        addSessionKey: ({ args, }, overrides) => {
            const callData = (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'addSessionKey',
                args,
            });
            return provider.sendUserOperation(callData, overrides);
        },
        removeSessionKey: ({ args, }, overrides) => {
            const callData = (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'removeSessionKey',
                args,
            });
            return provider.sendUserOperation(callData, overrides);
        },
        rotateSessionKey: ({ args, }, overrides) => {
            const callData = (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'rotateSessionKey',
                args,
            });
            return provider.sendUserOperation(callData, overrides);
        },
        updateKeyPermissions: ({ args, }, overrides) => {
            const callData = (0, viem_1.encodeFunctionData)({
                abi: exports.SessionKeyPluginExecutionFunctionAbi,
                functionName: 'updateKeyPermissions',
                args,
            });
            return provider.sendUserOperation(callData, overrides);
        },
        installSessionKeyPlugin: (params, overrides) => {
            const chain = provider.rpcClient.chain;
            const dependencies = params.dependencyOverrides ?? [
                (() => {
                    const pluginAddress = plugin_js_1.MultiOwnerPlugin.meta.addresses[chain.id];
                    if (!pluginAddress) {
                        throw new Error('missing MultiOwnerPlugin address for chain ' + chain.name);
                    }
                    return (0, viem_1.encodePacked)(['address', 'uint8'], [pluginAddress, 0x0]);
                })(),
                (() => {
                    const pluginAddress = plugin_js_1.MultiOwnerPlugin.meta.addresses[chain.id];
                    if (!pluginAddress) {
                        throw new Error('missing MultiOwnerPlugin address for chain ' + chain.name);
                    }
                    return (0, viem_1.encodePacked)(['address', 'uint8'], [pluginAddress, 0x1]);
                })(),
            ];
            const pluginAddress = params.pluginAddress ??
                SessionKeyPlugin_.meta.addresses[chain.id];
            if (!pluginAddress) {
                throw new Error('missing SessionKeyPlugin address for chain ' + chain.name);
            }
            return (0, installPlugin_js_1.installPlugin)(provider, {
                pluginAddress,
                pluginInitData: (0, viem_1.encodeAbiParameters)([
                    { type: 'address[]', name: 'initialKeys' },
                    { type: 'bytes32[]', name: 'tags' },
                    { type: 'bytes[][]', name: 'initialPermissions' },
                ], params.args),
                dependencies,
            }, overrides);
        },
    }),
};
exports.SessionKeyPlugin = SessionKeyPlugin_;
exports.SessionKeyPluginExecutionFunctionAbi = [
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'value', internalType: 'uint256', type: 'uint256' },
                    { name: 'data', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'executeWithSessionKey',
        outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'tag', internalType: 'bytes32', type: 'bytes32' },
            { name: 'permissionUpdates', internalType: 'bytes[]', type: 'bytes[]' },
        ],
        name: 'addSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'removeSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'oldSessionKey', internalType: 'address', type: 'address' },
            { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
            { name: 'newSessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'rotateSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'updates', internalType: 'bytes[]', type: 'bytes[]' },
        ],
        name: 'updateKeyPermissions',
        outputs: [],
    },
];
exports.SessionKeyPluginAbi = [
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'tag', internalType: 'bytes32', type: 'bytes32' },
            { name: 'permissionUpdates', internalType: 'bytes[]', type: 'bytes[]' },
        ],
        name: 'addSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'value', internalType: 'uint256', type: 'uint256' },
                    { name: 'data', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'executeWithSessionKey',
        outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'findPredecessor',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'contractAddress', internalType: 'address', type: 'address' },
        ],
        name: 'getAccessControlEntry',
        outputs: [
            { name: 'isOnList', internalType: 'bool', type: 'bool' },
            { name: 'checkSelectors', internalType: 'bool', type: 'bool' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'getAccessControlType',
        outputs: [
            {
                name: '',
                internalType: 'enum ISessionKeyPlugin.ContractAccessControlType',
                type: 'uint8',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'token', internalType: 'address', type: 'address' },
        ],
        name: 'getERC20SpendLimitInfo',
        outputs: [
            {
                name: '',
                internalType: 'struct ISessionKeyPlugin.SpendLimitInfo',
                type: 'tuple',
                components: [
                    { name: 'hasLimit', internalType: 'bool', type: 'bool' },
                    { name: 'limit', internalType: 'uint256', type: 'uint256' },
                    { name: 'limitUsed', internalType: 'uint256', type: 'uint256' },
                    { name: 'refreshInterval', internalType: 'uint48', type: 'uint48' },
                    { name: 'lastUsedTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'getGasSpendLimit',
        outputs: [
            {
                name: 'info',
                internalType: 'struct ISessionKeyPlugin.SpendLimitInfo',
                type: 'tuple',
                components: [
                    { name: 'hasLimit', internalType: 'bool', type: 'bool' },
                    { name: 'limit', internalType: 'uint256', type: 'uint256' },
                    { name: 'limitUsed', internalType: 'uint256', type: 'uint256' },
                    { name: 'refreshInterval', internalType: 'uint48', type: 'uint48' },
                    { name: 'lastUsedTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
            { name: 'shouldReset', internalType: 'bool', type: 'bool' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'getKeyTimeRange',
        outputs: [
            { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
            { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'getNativeTokenSpendLimitInfo',
        outputs: [
            {
                name: 'info',
                internalType: 'struct ISessionKeyPlugin.SpendLimitInfo',
                type: 'tuple',
                components: [
                    { name: 'hasLimit', internalType: 'bool', type: 'bool' },
                    { name: 'limit', internalType: 'uint256', type: 'uint256' },
                    { name: 'limitUsed', internalType: 'uint256', type: 'uint256' },
                    { name: 'refreshInterval', internalType: 'uint48', type: 'uint48' },
                    { name: 'lastUsedTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'getRequiredPaymaster',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'contractAddress', internalType: 'address', type: 'address' },
            { name: 'selector', internalType: 'bytes4', type: 'bytes4' },
        ],
        name: 'isSelectorOnAccessControlList',
        outputs: [{ name: 'isOnList', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'isSessionKeyOf',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'onInstall',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
        name: 'onUninstall',
        outputs: [],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [],
        name: 'pluginManifest',
        outputs: [
            {
                name: '',
                internalType: 'struct PluginManifest',
                type: 'tuple',
                components: [
                    { name: 'interfaceIds', internalType: 'bytes4[]', type: 'bytes4[]' },
                    {
                        name: 'dependencyInterfaceIds',
                        internalType: 'bytes4[]',
                        type: 'bytes4[]',
                    },
                    {
                        name: 'executionFunctions',
                        internalType: 'bytes4[]',
                        type: 'bytes4[]',
                    },
                    {
                        name: 'permittedExecutionSelectors',
                        internalType: 'bytes4[]',
                        type: 'bytes4[]',
                    },
                    {
                        name: 'permitAnyExternalAddress',
                        internalType: 'bool',
                        type: 'bool',
                    },
                    { name: 'canSpendNativeToken', internalType: 'bool', type: 'bool' },
                    {
                        name: 'permittedExternalCalls',
                        internalType: 'struct ManifestExternalCallPermission[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'externalAddress',
                                internalType: 'address',
                                type: 'address',
                            },
                            { name: 'permitAnySelector', internalType: 'bool', type: 'bool' },
                            { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
                        ],
                    },
                    {
                        name: 'userOpValidationFunctions',
                        internalType: 'struct ManifestAssociatedFunction[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'executionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'associatedFunction',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        name: 'runtimeValidationFunctions',
                        internalType: 'struct ManifestAssociatedFunction[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'executionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'associatedFunction',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        name: 'preUserOpValidationHooks',
                        internalType: 'struct ManifestAssociatedFunction[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'executionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'associatedFunction',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        name: 'preRuntimeValidationHooks',
                        internalType: 'struct ManifestAssociatedFunction[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'executionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'associatedFunction',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        name: 'executionHooks',
                        internalType: 'struct ManifestExecutionHook[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'executionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'preExecHook',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                            {
                                name: 'postExecHook',
                                internalType: 'struct ManifestFunction',
                                type: 'tuple',
                                components: [
                                    {
                                        name: 'functionType',
                                        internalType: 'enum ManifestAssociatedFunctionType',
                                        type: 'uint8',
                                    },
                                    { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                                    {
                                        name: 'dependencyIndex',
                                        internalType: 'uint256',
                                        type: 'uint256',
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [],
        name: 'pluginMetadata',
        outputs: [
            {
                name: '',
                internalType: 'struct PluginMetadata',
                type: 'tuple',
                components: [
                    { name: 'name', internalType: 'string', type: 'string' },
                    { name: 'version', internalType: 'string', type: 'string' },
                    { name: 'author', internalType: 'string', type: 'string' },
                    {
                        name: 'permissionDescriptors',
                        internalType: 'struct SelectorPermission[]',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'functionSelector',
                                internalType: 'bytes4',
                                type: 'bytes4',
                            },
                            {
                                name: 'permissionDescription',
                                internalType: 'string',
                                type: 'string',
                            },
                        ],
                    },
                ],
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            { name: 'preExecHookData', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'postExecutionHook',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            { name: 'sender', internalType: 'address', type: 'address' },
            { name: 'value', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'preExecutionHook',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            { name: 'sender', internalType: 'address', type: 'address' },
            { name: 'value', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'preRuntimeValidationHook',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'preUserOpValidationHook',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'removeSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'resetSessionKeyGasLimitTimestamp',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'oldSessionKey', internalType: 'address', type: 'address' },
            { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
            { name: 'newSessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'rotateSessionKey',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            { name: 'sender', internalType: 'address', type: 'address' },
            { name: 'value', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'runtimeValidationFunction',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'sessionKeysOf',
        outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'updates', internalType: 'bytes[]', type: 'bytes[]' },
        ],
        name: 'updateKeyPermissions',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'userOpValidationFunction',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'sessionKey',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'updates',
                internalType: 'bytes[]',
                type: 'bytes[]',
                indexed: false,
            },
        ],
        name: 'PermissionsUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'sessionKey',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            { name: 'tag', internalType: 'bytes32', type: 'bytes32', indexed: true },
        ],
        name: 'SessionKeyAdded',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'sessionKey',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'SessionKeyRemoved',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'oldSessionKey',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'newSessionKey',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'SessionKeyRotated',
    },
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
        type: 'error',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
            { name: 'token', internalType: 'address', type: 'address' },
        ],
        name: 'ERC20SpendLimitExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidAction' },
    {
        type: 'error',
        inputs: [
            { name: 'updateSelector', internalType: 'bytes4', type: 'bytes4' },
        ],
        name: 'InvalidPermissionsUpdate',
    },
    {
        type: 'error',
        inputs: [{ name: 'sessionKey', internalType: 'address', type: 'address' }],
        name: 'InvalidSessionKey',
    },
    {
        type: 'error',
        inputs: [{ name: 'sessionKey', internalType: 'address', type: 'address' }],
        name: 'InvalidSignature',
    },
    {
        type: 'error',
        inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
        name: 'InvalidToken',
    },
    { type: 'error', inputs: [], name: 'LengthMismatch' },
    {
        type: 'error',
        inputs: [
            { name: 'account', internalType: 'address', type: 'address' },
            { name: 'sessionKey', internalType: 'address', type: 'address' },
        ],
        name: 'NativeTokenSpendLimitExceeded',
    },
    {
        type: 'error',
        inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
        name: 'NotContractCaller',
    },
    {
        type: 'error',
        inputs: [
            { name: 'selector', internalType: 'bytes4', type: 'bytes4' },
            { name: 'functionId', internalType: 'uint8', type: 'uint8' },
        ],
        name: 'NotImplemented',
    },
    { type: 'error', inputs: [], name: 'NotInitialized' },
    {
        type: 'error',
        inputs: [{ name: 'sessionKey', internalType: 'address', type: 'address' }],
        name: 'SessionKeyNotFound',
    },
];
//# sourceMappingURL=plugin.js.map