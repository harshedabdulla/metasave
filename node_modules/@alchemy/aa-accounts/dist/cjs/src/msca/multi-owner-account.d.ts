import { type SupportedTransports } from "@alchemy/aa-core";
import { type FallbackTransport, type Transport } from "viem";
import { z } from "zod";
import { SessionKeySigner } from "../index.js";
import { MSCABuilder } from "./builder/index.js";
import type { SessionKeySignerConfig } from "./plugins/session-key/signer.js";
export declare const createMultiOwnerMSCASchema: <TTransport extends SupportedTransports = Transport>() => z.ZodEffects<z.ZodObject<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain<import("viem").ChainFormatters | undefined>, z.ZodTypeDef, import("viem").Chain<import("viem").ChainFormatters | undefined>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("@alchemy/aa-core").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("@alchemy/aa-core").PublicErc4337Client<TTransport>>]>;
    owner: z.ZodType<import("@alchemy/aa-core").SmartAccountSigner<any>, z.ZodTypeDef, import("@alchemy/aa-core").SmartAccountSigner<any>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owners: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">>;
    index: z.ZodDefault<z.ZodOptional<z.ZodBigInt>>;
    excludeDefaultTokenReceiverPlugin: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    factoryAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}, "strip", z.ZodTypeAny, {
    index: bigint;
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcClient: (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport>) & (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport> | undefined);
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    owners: `0x${string}`[];
    excludeDefaultTokenReceiverPlugin: boolean;
    initCode?: `0x${string}` | undefined;
    entryPointAddress?: `0x${string}` | undefined;
    accountAddress?: `0x${string}` | undefined;
    factoryAddress?: `0x${string}` | undefined;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcClient: (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport>) & (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport> | undefined);
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    initCode?: string | undefined;
    entryPointAddress?: string | undefined;
    accountAddress?: string | undefined;
    owners?: string[] | undefined;
    index?: bigint | undefined;
    excludeDefaultTokenReceiverPlugin?: boolean | undefined;
    factoryAddress?: string | undefined;
}>, {
    factoryAddress: `0x${string}`;
    index: bigint;
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcClient: (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport>) & (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport> | undefined);
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    owners: `0x${string}`[];
    excludeDefaultTokenReceiverPlugin: boolean;
    initCode?: `0x${string}` | undefined;
    entryPointAddress?: `0x${string}` | undefined;
    accountAddress?: `0x${string}` | undefined;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcClient: (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport>) & (string | import("@alchemy/aa-core").PublicErc4337Client<TTransport> | undefined);
    owner: import("@alchemy/aa-core").SmartAccountSigner<any>;
    initCode?: string | undefined;
    entryPointAddress?: string | undefined;
    accountAddress?: string | undefined;
    owners?: string[] | undefined;
    index?: bigint | undefined;
    excludeDefaultTokenReceiverPlugin?: boolean | undefined;
    factoryAddress?: string | undefined;
}>;
export type MultiOwnerMSCAParams = z.input<ReturnType<typeof createMultiOwnerMSCASchema>>;
export declare const createMultiOwnerMSCABuilder: <TTransport extends Transport | FallbackTransport = Transport>(params_: MultiOwnerMSCAParams) => MSCABuilder & {
    factory: import("./builder/types.js").Factory;
} & {
    executor: import("./builder/types.js").Executor;
} & {
    signer: import("./builder/types.js").SignerMethods;
};
export declare const createMultiOwnerMSCA: <TTransport extends Transport | FallbackTransport = Transport>(params_: MultiOwnerMSCAParams) => import("./types.js").IMSCA<TTransport, import("@alchemy/aa-core").SmartAccountSigner<any>, {
    installPlugin: (params: import("./plugin-manager/installPlugin.js").InstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    uninstallPlugin: (params: import("./plugin-manager/uninstallPlugin.js").UninstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}> & import("./types.js").IMSCA<TTransport, import("@alchemy/aa-core").SmartAccountSigner<any>, {
    installPlugin: (params: import("./plugin-manager/installPlugin.js").InstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    uninstallPlugin: (params: import("./plugin-manager/uninstallPlugin.js").UninstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
} & {
    updateOwners: ({ args, }: {
        args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    installMultiOwnerPlugin: (params: import("./plugins/multi-owner/plugin.js").InstallMultiOwnerPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}> & {
    readOwners: (pluginAddress?: `0x${string}` | undefined) => Promise<readonly `0x${string}`[]>;
    encodeUpdateOwnersData: ({ args, }: {
        args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
    }) => `0x${string}`;
    encodeEip712DomainData: () => `0x${string}`;
    readEip712Domain: () => Promise<readonly [`0x${string}`, string, string, bigint, `0x${string}`, `0x${string}`, readonly bigint[]]>;
    encodeIsValidSignatureData: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`];
    }) => `0x${string}`;
    readIsValidSignature: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`];
    }) => Promise<`0x${string}`>;
} & import("./account-loupe/types.js").IAccountLoupe;
export declare const createMultiOwnerMSCAWithSessionKey: <TTransport extends Transport | FallbackTransport = Transport>(params_: MultiOwnerMSCAParams, sessionKeyOverrides?: Pick<SessionKeySignerConfig<MultiOwnerMSCAParams["owner"]>, "storageKey" | "storageType"> & {
    keyActive?: boolean;
}) => Promise<import("./types.js").IMSCA<TTransport, SessionKeySigner<import("@alchemy/aa-core").SmartAccountSigner<any>>, {
    installPlugin: (params: import("./plugin-manager/installPlugin.js").InstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    uninstallPlugin: (params: import("./plugin-manager/uninstallPlugin.js").UninstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}> & import("./types.js").IMSCA<TTransport, SessionKeySigner<import("@alchemy/aa-core").SmartAccountSigner<any>>, {
    installPlugin: (params: import("./plugin-manager/installPlugin.js").InstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    uninstallPlugin: (params: import("./plugin-manager/uninstallPlugin.js").UninstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
} & {
    updateOwners: ({ args, }: {
        args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    installMultiOwnerPlugin: (params: import("./plugins/multi-owner/plugin.js").InstallMultiOwnerPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}> & {
    readOwners: (pluginAddress?: `0x${string}` | undefined) => Promise<readonly `0x${string}`[]>;
    encodeUpdateOwnersData: ({ args, }: {
        args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
    }) => `0x${string}`;
    encodeEip712DomainData: () => `0x${string}`;
    readEip712Domain: () => Promise<readonly [`0x${string}`, string, string, bigint, `0x${string}`, `0x${string}`, readonly bigint[]]>;
    encodeIsValidSignatureData: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`];
    }) => `0x${string}`;
    readIsValidSignature: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`];
    }) => Promise<`0x${string}`>;
} & import("./types.js").IMSCA<TTransport, SessionKeySigner<import("@alchemy/aa-core").SmartAccountSigner<any>>, {
    installPlugin: (params: import("./plugin-manager/installPlugin.js").InstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    uninstallPlugin: (params: import("./plugin-manager/uninstallPlugin.js").UninstallPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
} & {
    removeAccountSessionKey: ({ key }: {
        key: `0x${string}`;
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    executeWithSessionKey: ({ args, }: {
        args: readonly [readonly {
            target: `0x${string}`;
            value: bigint;
            data: `0x${string}`;
        }[], `0x${string}`];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    addSessionKey: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`, readonly `0x${string}`[]];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    removeSessionKey: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    rotateSessionKey: ({ args, }: {
        args: readonly [`0x${string}`, `0x${string}`, `0x${string}`];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    updateKeyPermissions: ({ args, }: {
        args: readonly [`0x${string}`, readonly `0x${string}`[]];
    }, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    installSessionKeyPlugin: (params: import("./plugins/session-key/plugin.js").InstallSessionKeyPluginParams, overrides?: Partial<{
        callGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        maxPriorityFeePerGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        preVerificationGas: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        verificationGasLimit: number | bigint | `0x${string}` | {
            percentage: number;
        } | undefined;
        paymasterAndData: import("@alchemy/aa-core").BytesLike;
    }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}> & {
    isAccountSessionKey: ({ key, pluginAddress, }: {
        key: `0x${string}`;
        pluginAddress?: `0x${string}` | undefined;
    }) => Promise<boolean>;
    getAccountSessionKeys: ({ pluginAddress, }: {
        pluginAddress?: `0x${string}` | undefined;
    }) => Promise<readonly `0x${string}`[]>;
} & import("./account-loupe/types.js").IAccountLoupe>;
