{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/msca/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ISmartAccountProvider,\n  ISmartContractAccount,\n  UpgradeToData,\n} from \"@alchemy/aa-core\";\nimport type { Address, Chain } from \"viem\";\nimport {\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  parseAbiParameters,\n} from \"viem\";\nimport {\n  arbitrum,\n  arbitrumGoerli,\n  arbitrumSepolia,\n  base,\n  baseGoerli,\n  baseSepolia,\n  goerli,\n  mainnet,\n  optimism,\n  optimismGoerli,\n  optimismSepolia,\n  polygon,\n  polygonMumbai,\n  sepolia,\n} from \"viem/chains\";\nimport { IPluginAbi } from \"./abis/IPlugin.js\";\nimport { MultiOwnerTokenReceiverMSCAFactoryAbi } from \"./abis/MultiOwnerTokenReceiverMSCAFactory.js\";\nimport { UpgradeableModularAccountAbi } from \"./abis/UpgradeableModularAccount.js\";\nimport { createMultiOwnerMSCA } from \"./multi-owner-account.js\";\nimport { MultiOwnerPlugin } from \"./plugins/multi-owner/index.js\";\nimport { TokenReceiverPlugin } from \"./plugins/token-receiver/plugin.js\";\n\n/**\n * Utility method returning the default multi owner msca factory address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @returns a {@link Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultMultiOwnerMSCAFactoryAddress = (\n  chain: Chain,\n  excludeDefaultTokenReceiverPlugin: boolean = false\n): Address => {\n  switch (chain.id) {\n    case sepolia.id:\n      return excludeDefaultTokenReceiverPlugin\n        ? \"0xC69731F267760466663470256A7ba28F79eDC4d6\" // MultiOwnerMSCAFactory\n        : \"0x852B3a676684031Cb77b69B50D8d7879f4c4807d\";\n    case mainnet.id:\n    case goerli.id:\n    case polygon.id:\n    case polygonMumbai.id:\n    case optimism.id:\n    case optimismGoerli.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumGoerli.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    case baseGoerli.id:\n    case baseSepolia.id:\n      throw new Error(\"not yet deployed\");\n  }\n  throw new Error(\n    `no default multi owner msca factory contract exists for ${chain.name}`\n  );\n};\n\nexport const getMSCAUpgradeToData = async <\n  P extends ISmartAccountProvider & { account: ISmartContractAccount }\n>(\n  provider: P,\n  multiOwnerPluginAddress?: Address,\n  tokenReceiverPluginAddress?: Address\n): Promise<\n  UpgradeToData & {\n    connectFn: (\n      rpcClient: P[\"rpcClient\"]\n    ) => ReturnType<typeof createMultiOwnerMSCA>;\n  }\n> => {\n  const factoryAddress = getDefaultMultiOwnerMSCAFactoryAddress(\n    provider.rpcClient.chain\n  );\n  const accountAddress = await provider.getAddress();\n\n  const implAddress = await provider.rpcClient.readContract({\n    abi: MultiOwnerTokenReceiverMSCAFactoryAbi,\n    address: factoryAddress,\n    functionName: \"IMPL\",\n  });\n\n  const multiOwnerAddress =\n    multiOwnerPluginAddress ??\n    MultiOwnerPlugin.meta.addresses[provider.rpcClient.chain.id];\n\n  const tokenReceiverAddress =\n    tokenReceiverPluginAddress ??\n    TokenReceiverPlugin.meta.addresses[provider.rpcClient.chain.id];\n\n  if (!multiOwnerAddress) {\n    throw new Error(\"could not get multi owner plugin address\");\n  }\n\n  if (!tokenReceiverAddress) {\n    throw new Error(\"could not get token receiver plugin address\");\n  }\n\n  const moPluginManifest = await provider.rpcClient.readContract({\n    abi: IPluginAbi,\n    address: multiOwnerAddress,\n    functionName: \"pluginManifest\",\n  });\n\n  const hashedMultiOwnerPluginManifest = keccak256(\n    encodeFunctionResult({\n      abi: IPluginAbi,\n      functionName: \"pluginManifest\",\n      result: moPluginManifest,\n    })\n  );\n\n  const trPluginManifest = await provider.rpcClient.readContract({\n    abi: IPluginAbi,\n    address: tokenReceiverAddress,\n    functionName: \"pluginManifest\",\n  });\n\n  const hashedTrPluginManifest = keccak256(\n    encodeFunctionResult({\n      abi: IPluginAbi,\n      functionName: \"pluginManifest\",\n      result: trPluginManifest,\n    })\n  );\n\n  const owner = provider.account.getOwner();\n  if (owner == null) {\n    throw new Error(\"could not get owner\");\n  }\n\n  const ownerAddress = await owner.getAddress();\n  const encodedOwner = encodeAbiParameters(parseAbiParameters(\"address[]\"), [\n    [ownerAddress],\n  ]);\n\n  const encodedPluginInitData = encodeAbiParameters(\n    parseAbiParameters(\"bytes32[], bytes[]\"),\n    [\n      [hashedMultiOwnerPluginManifest, hashedTrPluginManifest],\n      [encodedOwner, \"0x\"],\n    ]\n  );\n\n  const encodedMSCAInitializeData = encodeFunctionData({\n    abi: UpgradeableModularAccountAbi,\n    functionName: \"initialize\",\n    args: [[multiOwnerAddress, tokenReceiverAddress], encodedPluginInitData],\n  });\n\n  return {\n    implAddress,\n    initializationData: encodedMSCAInitializeData,\n    connectFn: (rpcClient: P[\"rpcClient\"]) =>\n      createMultiOwnerMSCA({\n        rpcClient,\n        owner,\n        entryPointAddress: provider.account.getEntryPointAddress(),\n        factoryAddress,\n        chain: rpcClient.chain,\n        accountAddress,\n      }),\n  };\n};\n"]}