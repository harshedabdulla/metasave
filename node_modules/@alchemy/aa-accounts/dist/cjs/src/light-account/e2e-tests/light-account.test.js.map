{"version":3,"file":"light-account.test.js","sourceRoot":"","sources":["../../../../../src/light-account/e2e-tests/light-account.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  LocalAccountSigner,\n  Logger,\n  LogLevel,\n  type SmartAccountSigner,\n  type UserOperationFeeOptions,\n} from \"@alchemy/aa-core\";\nimport {\n  isAddress,\n  toHex,\n  type Address,\n  type Chain,\n  type Hash,\n  type HDAccount,\n} from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { sepolia } from \"viem/chains\";\nimport {\n  createLightAccountProvider,\n  LightSmartContractAccount,\n  type LightAccountVersion,\n} from \"../../index.js\";\nimport { getMSCAUpgradeToData } from \"../../msca/utils.js\";\nimport {\n  API_KEY,\n  LIGHT_ACCOUNT_OWNER_MNEMONIC,\n  UNDEPLOYED_OWNER_MNEMONIC,\n} from \"./constants.js\";\n\nconst chain = sepolia;\n\nLogger.setLogLevel(LogLevel.DEBUG);\n\ndescribe(\"Light Account Tests\", () => {\n  const owner: SmartAccountSigner<HDAccount> =\n    LocalAccountSigner.mnemonicToAccountSigner(LIGHT_ACCOUNT_OWNER_MNEMONIC);\n  const undeployedOwner = LocalAccountSigner.mnemonicToAccountSigner(\n    UNDEPLOYED_OWNER_MNEMONIC\n  );\n\n  it.each([\n    { version: \"v1.0.1\" as const, expected: true },\n    { version: \"v1.0.2\" as const, throws: true },\n    { version: \"v1.1.0\" as const, expected: true },\n  ])(\n    \"LA version $version should correctly verify 1271 signatures\",\n    async ({ version, expected, throws }) => {\n      const provider = givenConnectedProvider({ owner, chain, version });\n      const message = \"test\";\n\n      if (!throws) {\n        const signature = await provider.signMessage(message);\n        expect(\n          await provider.rpcClient.verifyMessage({\n            address: await provider.getAddress(),\n            message,\n            signature,\n          })\n        ).toBe(expected);\n      } else {\n        await expect(provider.signMessage(message)).rejects.toThrowError();\n      }\n    }\n  );\n\n  it(\"should successfully get counterfactual address\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    expect(await provider.getAddress()).toMatchInlineSnapshot(\n      '\"0x86f3B0211764971Ad0Fc8C8898d31f5d792faD84\"'\n    );\n  });\n\n  it(\"should sign typed data with 6492 successfully for undeployed account\", async () => {\n    const undeployedProvider = givenConnectedProvider({\n      owner: undeployedOwner,\n      chain,\n    });\n    const typedData = {\n      types: {\n        Request: [{ name: \"hello\", type: \"string\" }],\n      },\n      primaryType: \"Request\",\n      message: {\n        hello: \"world\",\n      },\n    };\n    expect(\n      await undeployedProvider.signTypedDataWith6492(typedData)\n    ).toMatchInlineSnapshot(\n      '\"0x00000000000000000000000000004ec70002a32400f8ae005a26081065620d20000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000445fbfb9cf000000000000000000000000ef9d7530d16df66481adf291dc9a12b44c7f7df00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041ac03c38ea7f6308cf37067659115b9c982cd29354db4e90044cce8a113fd66890588245cf7076f5364de6010e5e5aff42efec5c719b5de3f555d389766518a2b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492\"'\n    );\n  });\n\n  it(\"should sign message with 6492 successfully for undeployed account\", async () => {\n    const undeployedProvider = givenConnectedProvider({\n      owner: undeployedOwner,\n      chain,\n    });\n    expect(\n      await undeployedProvider.signMessageWith6492(\"test\")\n    ).toMatchInlineSnapshot(\n      '\"0x00000000000000000000000000004ec70002a32400f8ae005a26081065620d20000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000445fbfb9cf000000000000000000000000ef9d7530d16df66481adf291dc9a12b44c7f7df0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004181c6c4855d1cb16616c78e4b99bdde42eeda6bc8fbec920434e196445b64dede539eb9d934092f8e472766ded3f06d1a5f8ed2c209a5aaac7b13f9a8795757381b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492\"'\n    );\n  });\n\n  /**\n   * Need to add test eth to the counterfactual address for this test to pass.\n   * For current balance, @see: https://sepolia.etherscan.io/address/0x7eDdc16B15259E5541aCfdebC46929873839B872\n   */\n  it(\"should execute successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    const result = await provider.sendUserOperation({\n      target: await provider.getAddress(),\n      data: \"0x\",\n    });\n    const txnHash = provider.waitForUserOperationTransaction(\n      result.hash as Hash\n    );\n\n    await expect(txnHash).resolves.not.toThrowError();\n  }, 100000);\n\n  it(\"should fail to execute if account address is not deployed and not correct\", async () => {\n    const accountAddress = \"0xc33AbD9621834CA7c6Fc9f9CC3c47b9c17B03f9F\";\n    const newProvider = givenConnectedProvider({\n      owner,\n      chain,\n      accountAddress,\n    });\n\n    const result = newProvider.sendUserOperation({\n      target: await newProvider.getAddress(),\n      data: \"0x\",\n    });\n\n    await expect(result).rejects.toThrowError();\n  });\n\n  it(\"should get counterfactual for undeployed account\", async () => {\n    const owner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const provider = givenConnectedProvider({ owner, chain });\n\n    const address = provider.getAddress();\n    await expect(address).resolves.not.toThrowError();\n    expect(isAddress(await address)).toBe(true);\n  });\n\n  it(\"should get owner successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    expect(await provider.account.getOwnerAddress()).toMatchInlineSnapshot(\n      '\"0x65eaA2AfDF6c97295bA44C458abb00FebFB3a5FA\"'\n    );\n    expect(await provider.account.getOwnerAddress()).toBe(\n      await owner.getAddress()\n    );\n  });\n\n  it(\"should transfer ownership successfully\", async () => {\n    const provider = givenConnectedProvider({\n      owner,\n      chain,\n    });\n\n    // create a throwaway address\n    const throwawayOwner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const throwawayProvider = givenConnectedProvider({\n      owner: throwawayOwner,\n      chain,\n    });\n\n    const oldOwner = await throwawayOwner.getAddress();\n\n    // fund the throwaway address\n    await provider.sendTransaction({\n      from: await provider.getAddress(),\n      to: await throwawayProvider.getAddress(),\n      data: \"0x\",\n      value: toHex(1000000000000000n),\n    });\n\n    // create new owner and transfer ownership\n    const newThrowawayOwner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    await LightSmartContractAccount.transferOwnership(\n      throwawayProvider,\n      newThrowawayOwner,\n      true\n    );\n\n    const newOwnerViaProvider =\n      await throwawayProvider.account.getOwnerAddress();\n    const newOwner = await newThrowawayOwner.getAddress();\n\n    expect(newOwnerViaProvider).not.toBe(oldOwner);\n    expect(newOwnerViaProvider).toBe(newOwner);\n  }, 100000);\n\n  it(\"should upgrade a deployed light account to msca successfully\", async () => {\n    const provider = givenConnectedProvider({\n      owner,\n      chain,\n    });\n\n    // create a throwaway address\n    const throwawayOwner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const throwawayProvider = givenConnectedProvider({\n      owner: throwawayOwner,\n      chain,\n    });\n\n    const accountAddress = await throwawayProvider.getAddress();\n    const ownerAddress = await throwawayOwner.getAddress();\n\n    // fund + deploy the throwaway address\n    await provider.sendTransaction({\n      from: await provider.getAddress(),\n      to: accountAddress,\n      data: \"0x\",\n      value: toHex(200000000000000000n),\n    });\n\n    const { connectFn, ...upgradeToData } = await getMSCAUpgradeToData(\n      throwawayProvider\n    );\n\n    await throwawayProvider.upgradeAccount(upgradeToData, true);\n\n    const upgradedProvider = throwawayProvider.connect(connectFn);\n\n    const upgradedAccountAddress = await upgradedProvider.getAddress();\n\n    const owners = await upgradedProvider.account.readOwners();\n\n    expect(upgradedAccountAddress).toBe(accountAddress);\n    expect(owners).toContain(ownerAddress);\n  }, 200000);\n});\n\nconst givenConnectedProvider = ({\n  owner,\n  chain,\n  accountAddress,\n  feeOptions,\n  version = \"v1.1.0\",\n}: {\n  owner: SmartAccountSigner;\n  chain: Chain;\n  accountAddress?: Address;\n  feeOptions?: UserOperationFeeOptions;\n  version?: LightAccountVersion;\n}) => {\n  const provider = createLightAccountProvider({\n    rpcProvider: `${chain.rpcUrls.alchemy.http[0]}/${API_KEY!}`,\n    chain,\n    owner,\n    accountAddress,\n    opts: {\n      feeOptions,\n      txMaxRetries: 100,\n    },\n    version,\n  });\n\n  return provider;\n};\n"]}