"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightAccountProviderConfigSchema = exports.LightAccountFactoryConfigSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const zod_1 = require("abitype/zod");
const viem_1 = require("viem");
const zod_2 = require("zod");
const utils_js_1 = require("./utils.js");
const isLightAccountVersion = (x) => {
    if (typeof x === "string" && x in utils_js_1.LightAccountVersions) {
        return true;
    }
    return false;
};
exports.LightAccountFactoryConfigSchema = zod_2.z.object({
    owner: aa_core_1.SignerSchema,
    accountAddress: zod_1.Address.optional().describe("Optional override for the account address."),
    initCode: zod_2.z
        .string()
        .refine(viem_1.isHex, "initCode must be a valid hex.")
        .optional()
        .describe("Optional override for the account init code."),
    factoryAddress: zod_1.Address.optional().describe("Optional override for the factory address which deploys the smart account."),
    version: zod_2.z
        .string()
        .refine(isLightAccountVersion, "Version must be a valid Light Account version.")
        .optional(),
});
exports.LightAccountProviderConfigSchema = (0, aa_core_1.createSmartAccountProviderConfigSchema)().and(exports.LightAccountFactoryConfigSchema);
//# sourceMappingURL=schema.js.map