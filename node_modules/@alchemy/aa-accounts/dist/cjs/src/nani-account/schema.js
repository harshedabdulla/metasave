"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NaniAccountProviderConfigSchema = exports.NaniAccountFactoryConfigSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const zod_1 = require("abitype/zod");
const viem_1 = require("viem");
const zod_2 = require("zod");
exports.NaniAccountFactoryConfigSchema = zod_2.z.object({
    owner: aa_core_1.SignerSchema,
    accountAddress: zod_1.Address.optional().describe("Optional override for the account address."),
    initCode: zod_2.z
        .string()
        .refine(viem_1.isHex, "initCode must be a valid hex.")
        .optional()
        .describe("Optional override for the account init code."),
    factoryAddress: zod_1.Address.optional().describe("Optional override for the factory address which deploys the smart account."),
    salt: zod_2.z
        .string()
        .refine(viem_1.isHex, "salt must be a valid hex")
        .refine((s) => s.length === 66, "salt must be 32 bytes")
        .optional()
        .describe("Optional override for the account salt."),
    index: zod_2.z
        .bigint()
        .optional()
        .describe("Optional override for the account index."),
});
exports.NaniAccountProviderConfigSchema = (0, aa_core_1.createSmartAccountProviderConfigSchema)().and(exports.NaniAccountFactoryConfigSchema);
//# sourceMappingURL=schema.js.map