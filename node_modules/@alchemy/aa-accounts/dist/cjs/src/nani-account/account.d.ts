import { BaseSmartContractAccount, SmartAccountProvider, type SignTypedDataParams, type SmartAccountSigner, type BaseSmartAccountParams, type BatchUserOperationCallData } from "@alchemy/aa-core";
import { type Address, type FallbackTransport, type Hash, type Hex, type Transport } from "viem";
export interface NaniSmartAccountParams<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartAccountParams<TTransport> {
    owner: SmartAccountSigner;
    index?: bigint;
    salt?: Hex;
}
export declare class NaniAccount<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartContractAccount<TTransport> {
    protected owner: SmartAccountSigner;
    private readonly index;
    protected salt?: Hex;
    constructor(params: NaniSmartAccountParams<TTransport>);
    signTypedData(params: SignTypedDataParams): Promise<Hash>;
    getOwnerAddress(): Promise<Address>;
    getAddress(): Promise<Address>;
    getDummySignature(): Hex;
    signMessage(msg: Uint8Array | string): Promise<Hex>;
    encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex>;
    encodeBatchExecute(calls: BatchUserOperationCallData): Promise<Hex>;
    static encodeExecuteDelegate(delegate: Address, data: Hex): Hex;
    static encodeTransferOwnership(newOwner: Address): Hex;
    static transferOwnership<TTransport extends Transport | FallbackTransport = Transport>(provider: SmartAccountProvider<TTransport> & {
        account: NaniAccount<TTransport>;
    }, newOwner: SmartAccountSigner, waitForTxn?: boolean): Promise<Hash>;
    protected getAccountInitCode(): Promise<`0x${string}`>;
    protected getSalt(): Promise<Hex>;
    protected getFactoryInitCode(): Promise<Hex>;
}
