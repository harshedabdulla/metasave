"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginGeneratorPhase = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const dedent_1 = __importDefault(require("dedent"));
const account_method_gen_js_1 = require("./account-method-gen.js");
const get_contract_gen_js_1 = require("./get-contract-gen.js");
const meta_gen_js_1 = require("./meta-gen.js");
const index_js_1 = require("./provider-method-gen/index.js");
const PluginGeneratorPhase = async (input) => {
    const pluginPhases = [
        meta_gen_js_1.MetaGenPhase,
        get_contract_gen_js_1.GetContractGenPhase,
        account_method_gen_js_1.AccountMethodGenPhase,
        index_js_1.ProviderMethodGenPhase,
    ];
    const { contract, addImport } = input;
    addImport("../types.js", { name: "Plugin", isType: true });
    const result = await (0, aa_core_1.asyncPipe)(...pluginPhases)({
        ...input,
        content: [],
    });
    input.content.push((0, dedent_1.default) `
    const ${contract.name}_ = {
        ${result.content.join(",\n")}
    };

    export const ${contract.name}: Plugin<ReturnType<typeof ${contract.name}_["accountMethods"]>, ReturnType<typeof ${contract.name}_["providerMethods"]>, typeof ${contract.name}Abi> = ${contract.name}_;
  `);
    return input;
};
exports.PluginGeneratorPhase = PluginGeneratorPhase;
//# sourceMappingURL=index.js.map