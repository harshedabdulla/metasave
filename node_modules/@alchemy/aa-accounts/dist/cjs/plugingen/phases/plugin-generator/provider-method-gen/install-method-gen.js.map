{"version":3,"file":"install-method-gen.js","sourceRoot":"","sources":["../../../../../../plugingen/phases/plugin-generator/provider-method-gen/install-method-gen.ts"],"names":[],"mappings":";;;;;;AAAA,6CAAwC;AACxC,oDAA4B;AAIrB,MAAM,qBAAqB,GAAU,KAAK,EAAE,KAAK,EAAE,EAAE;IAC1D,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IACvD,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE,CAAC;QACjC,UAAU,CACR,SAAS,EACT,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAC9D,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,aAAa,IAAI,EAAE,CAAC;QAE1D,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjD,OAAO,CACL,UAAU,QAAQ,CAAC,IAAI,QAAQ,EAC/B,IAAA,gBAAM,EAAA;;;;MAIN,EACA,IAAI,CACL,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,GAAG,CAChE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,gBAAM,EAAA;;kCAEe,CAAC,CAAC,MAAM,CAAC,IAAI;;uCAER,CAAC,CAAC,MAAM,CAAC,IAAI;;;;;8BAKtB,CAAC,CAAC,UAAU;;;OAGnC,CACF,CAAC;QAEF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAA;aAChB,QAAQ,CAAC,IAAI,qBACpB,QAAQ,CAAC,IACX;;4DAEwD,YAAY,CAAC,IAAI,CACrE,OAAO,CACR;sDAEC,QAAQ,CAAC,IACX;;;mCAII,QAAQ,CAAC,IACX;;;;;8CAKsC,IAAI,CAAC,SAAS,CAClD,QAAQ,CACT;;;;GAIN,CAAC,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAnEW,QAAA,qBAAqB,yBAmEhC;AAEF,MAAM,UAAU,GAAG,CACjB,SAAkC,EAClC,IAAwB,EACxB,EAAE;IACF,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACpC,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACjB,SAAS,CACP,MAAM,IAAA,uBAAS,EAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,YAAY,EAChE;gBACE,IAAI,EAAE,CAAC,CAAC,IAAI;aACb,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC,CAAC;IACnD,SAAS,CAAC,uCAAuC,EAAE;QACjD,IAAI,EAAE,iCAAiC;KACxC,CAAC,CAAC;IACH,SAAS,CAAC,8BAA8B,EAAE;QACxC,IAAI,EAAE,mBAAmB;QACzB,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { kebabCase } from \"change-case\";\nimport dedent from \"dedent\";\nimport type { PluginGenConfig } from \"../../../../plugindefs/types\";\nimport type { Phase, PhaseInput } from \"../../../types\";\n\nexport const InstallMethodGenPhase: Phase = async (input) => {\n  const { addImport, config, addType, contract } = input;\n  if (config.installConfig != null) {\n    addImports(\n      addImport,\n      config.installConfig.dependencies?.map((x) => x.plugin) ?? []\n    );\n\n    const initArgs = config.installConfig.initAbiParams ?? [];\n\n    addType(\"InstallArgs\", JSON.stringify(initArgs));\n    addType(\n      `Install${contract.name}Params`,\n      dedent`{\n        args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];\n        pluginAddress?: Address;\n        dependencyOverrides?: FunctionReference[];\n    }`,\n      true\n    );\n\n    const dependencies = (config.installConfig.dependencies ?? []).map(\n      (x) => dedent`\n        (() => {\n          const pluginAddress = ${x.plugin.name}.meta.addresses[chain.id];\n          if (!pluginAddress) {\n            throw new Error(\"missing ${x.plugin.name} address for chain \" + chain.name);\n          }\n\n          return encodePacked(\n            [\"address\", \"uint8\"],\n            [pluginAddress, ${x.functionId}]\n          );\n        })()\n      `\n    );\n\n    input.content.push(dedent`\n    install${contract.name}: (params: Install${\n      contract.name\n    }Params, overrides?: UserOperationOverrides) => {\n      const chain = provider.rpcClient.chain;\n      const dependencies = params.dependencyOverrides ?? [${dependencies.join(\n        \",\\n\\n\"\n      )}];\n      const pluginAddress = params.pluginAddress ?? ${\n        contract.name\n      }_.meta.addresses[chain.id] as Address | undefined;\n\n      if (!pluginAddress) {\n        throw new Error(\"missing ${\n          contract.name\n        } address for chain \" + chain.name);\n      }\n      \n      return installPlugin_(provider, {\n        pluginAddress,\n        pluginInitData: encodeAbiParameters(${JSON.stringify(\n          initArgs\n        )}, params.args),\n        dependencies,\n      }, overrides);\n    }\n  `);\n  }\n\n  return input;\n};\n\nconst addImports = (\n  addImport: PhaseInput[\"addImport\"],\n  deps?: PluginGenConfig[]\n) => {\n  if (deps != null && deps.length > 0) {\n    addImport(\"viem\", { name: \"encodePacked\" });\n    deps.forEach((x) => {\n      addImport(\n        `../${kebabCase(x.name.replaceAll(/[pP]lugin/g, \"\"))}/plugin.js`,\n        {\n          name: x.name,\n        }\n      );\n    });\n  }\n\n  addImport(\"viem\", { name: \"encodeAbiParameters\" });\n  addImport(\"../../plugin-manager/installPlugin.js\", {\n    name: \"installPlugin as installPlugin_\",\n  });\n  addImport(\"../../account-loupe/types.js\", {\n    name: \"FunctionReference\",\n    isType: true,\n  });\n};\n"]}