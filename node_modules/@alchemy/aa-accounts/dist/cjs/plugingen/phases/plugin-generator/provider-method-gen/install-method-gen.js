"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallMethodGenPhase = void 0;
const change_case_1 = require("change-case");
const dedent_1 = __importDefault(require("dedent"));
const InstallMethodGenPhase = async (input) => {
    const { addImport, config, addType, contract } = input;
    if (config.installConfig != null) {
        addImports(addImport, config.installConfig.dependencies?.map((x) => x.plugin) ?? []);
        const initArgs = config.installConfig.initAbiParams ?? [];
        addType("InstallArgs", JSON.stringify(initArgs));
        addType(`Install${contract.name}Params`, (0, dedent_1.default) `{
        args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
        pluginAddress?: Address;
        dependencyOverrides?: FunctionReference[];
    }`, true);
        const dependencies = (config.installConfig.dependencies ?? []).map((x) => (0, dedent_1.default) `
        (() => {
          const pluginAddress = ${x.plugin.name}.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error("missing ${x.plugin.name} address for chain " + chain.name);
          }

          return encodePacked(
            ["address", "uint8"],
            [pluginAddress, ${x.functionId}]
          );
        })()
      `);
        input.content.push((0, dedent_1.default) `
    install${contract.name}: (params: Install${contract.name}Params, overrides?: UserOperationOverrides) => {
      const chain = provider.rpcClient.chain;
      const dependencies = params.dependencyOverrides ?? [${dependencies.join(",\n\n")}];
      const pluginAddress = params.pluginAddress ?? ${contract.name}_.meta.addresses[chain.id] as Address | undefined;

      if (!pluginAddress) {
        throw new Error("missing ${contract.name} address for chain " + chain.name);
      }
      
      return installPlugin_(provider, {
        pluginAddress,
        pluginInitData: encodeAbiParameters(${JSON.stringify(initArgs)}, params.args),
        dependencies,
      }, overrides);
    }
  `);
    }
    return input;
};
exports.InstallMethodGenPhase = InstallMethodGenPhase;
const addImports = (addImport, deps) => {
    if (deps != null && deps.length > 0) {
        addImport("viem", { name: "encodePacked" });
        deps.forEach((x) => {
            addImport(`../${(0, change_case_1.kebabCase)(x.name.replaceAll(/[pP]lugin/g, ""))}/plugin.js`, {
                name: x.name,
            });
        });
    }
    addImport("viem", { name: "encodeAbiParameters" });
    addImport("../../plugin-manager/installPlugin.js", {
        name: "installPlugin as installPlugin_",
    });
    addImport("../../account-loupe/types.js", {
        name: "FunctionReference",
        isType: true,
    });
};
//# sourceMappingURL=install-method-gen.js.map