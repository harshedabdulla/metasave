"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountMethodGenPhase = void 0;
const change_case_1 = require("change-case");
const dedent_1 = __importDefault(require("dedent"));
const utils_js_1 = require("../../utils.js");
const AccountMethodGenPhase = async (input) => {
    const { plugin, contract, addImport } = input;
    const { executionFunctions } = await plugin.read.pluginManifest();
    const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;
    const executionAbi = (0, utils_js_1.extractExecutionAbi)(executionFunctions, contract.abi);
    const hasViewFunction = executionAbi.filter((n) => n.stateMutability === "view").length > 0;
    addImport("viem", { name: "GetFunctionArgs", isType: true });
    addImport("viem", { name: "encodeFunctionData" });
    addImport("../../types.js", { name: "IMSCA", isType: true });
    const accountFunctions = executionAbi.map((n) => {
        const methodContent = [];
        const argsParamString = n.inputs.length > 0
            ? `{ args }: GetFunctionArgs<typeof ${executionAbiConst}, "${n.name}">`
            : "";
        const argsEncodeString = n.inputs.length > 0 ? "args," : "";
        const isViewFunction = n.stateMutability === "view";
        methodContent.push((0, dedent_1.default) `
      encode${(0, change_case_1.pascalCase)(n.name)}Data: (${argsParamString}) => {
          return encodeFunctionData({
              abi: ${executionAbiConst},
              functionName: "${n.name}",
              ${argsEncodeString}
          });
      }
    `);
        if (isViewFunction) {
            methodContent.push((0, dedent_1.default) `
        read${(0, change_case_1.pascalCase)(n.name)}: async (${argsParamString}) => {
          return account.rpcProvider.readContract({
            address: await account.getAddress(),
            abi: ${executionAbiConst},
            functionName: "${n.name}",
            ${argsEncodeString}
          });
        }
      `);
        }
        return methodContent.join(",\n\n");
    });
    input.content.push((0, dedent_1.default) `
    accountMethods: (${hasViewFunction ? "account" : "_account"}: IMSCA<any, any, any>) => ({ ${accountFunctions.join(",\n\n")} })
  `);
    return input;
};
exports.AccountMethodGenPhase = AccountMethodGenPhase;
//# sourceMappingURL=account-method-gen.js.map