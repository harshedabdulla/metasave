"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderMethodGenPhase = void 0;
const change_case_1 = require("change-case");
const dedent_1 = __importDefault(require("dedent"));
const utils_js_1 = require("../../../utils.js");
const install_method_gen_js_1 = require("./install-method-gen.js");
const ProviderMethodGenPhase = async (input) => {
    const { plugin, contract, addImport } = input;
    const { executionFunctions } = await plugin.read.pluginManifest();
    const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;
    const executionAbi = (0, utils_js_1.extractExecutionAbi)(executionFunctions, contract.abi);
    addImport("viem", { name: "GetFunctionArgs", isType: true });
    addImport("@alchemy/aa-core", {
        name: "UserOperationOverrides",
        isType: true,
    });
    addImport("@alchemy/aa-core", { name: "SupportedTransports", isType: true });
    addImport("@alchemy/aa-core", {
        name: "ISmartAccountProvider",
        isType: true,
    });
    const providerFunctions = executionAbi
        .filter((n) => n.stateMutability !== "view")
        .map((n) => {
        const argsParamString = n.inputs.length > 0
            ? `{ args }: GetFunctionArgs<typeof ${executionAbiConst}, "${n.name}">, overrides?: UserOperationOverrides`
            : "";
        const argsEncodeString = n.inputs.length > 0 ? "args," : "";
        return (0, dedent_1.default) `
            ${(0, change_case_1.camelCase)(n.name)}: (${argsParamString}) => {
              const callData = encodeFunctionData({
                abi: ${executionAbiConst},
                functionName: "${n.name}",
                ${argsEncodeString}
              });

              return provider.sendUserOperation(callData, overrides);
            }
          `;
    });
    await (0, install_method_gen_js_1.InstallMethodGenPhase)({
        ...input,
        content: providerFunctions,
    });
    input.content.push((0, dedent_1.default) `
    providerMethods: <
        TTransport extends SupportedTransports,
        P extends ISmartAccountProvider<TTransport> & { account: IMSCA<TTransport> }
    >(
        provider: P
    ) => ({ ${providerFunctions.join(",\n\n")} }),
    `);
    return input;
};
exports.ProviderMethodGenPhase = ProviderMethodGenPhase;
//# sourceMappingURL=index.js.map