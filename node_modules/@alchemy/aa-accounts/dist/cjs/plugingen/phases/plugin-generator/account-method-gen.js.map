{"version":3,"file":"account-method-gen.js","sourceRoot":"","sources":["../../../../../plugingen/phases/plugin-generator/account-method-gen.ts"],"names":[],"mappings":";;;;;;AAAA,6CAAyC;AACzC,oDAA4B;AAE5B,6CAAqD;AAE9C,MAAM,qBAAqB,GAAU,KAAK,EAAE,KAAK,EAAE,EAAE;IAC1D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAC9C,MAAM,EAAE,kBAAkB,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IAClE,MAAM,iBAAiB,GAAG,GAAG,QAAQ,CAAC,IAAI,sBAAsB,CAAC;IACjE,MAAM,YAAY,GAAG,IAAA,8BAAmB,EAAC,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC3E,MAAM,eAAe,GACnB,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAEtE,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,CAAC,CAAC;IAClD,SAAS,CAAC,gBAAgB,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAE7D,MAAM,gBAAgB,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QAC9C,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,MAAM,eAAe,GACnB,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;YACjB,CAAC,CAAC,oCAAoC,iBAAiB,MAAM,CAAC,CAAC,IAAI,IAAI;YACvE,CAAC,CAAC,EAAE,CAAC;QACT,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,MAAM,cAAc,GAAG,CAAC,CAAC,eAAe,KAAK,MAAM,CAAC;QAEpD,aAAa,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAA;cACf,IAAA,wBAAU,EAAC,CAAC,CAAC,IAAI,CAAC,UAAU,eAAe;;qBAEpC,iBAAiB;+BACP,CAAC,CAAC,IAAI;gBACrB,gBAAgB;;;KAG3B,CAAC,CAAC;QAEH,IAAI,cAAc,EAAE,CAAC;YACnB,aAAa,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAA;cACjB,IAAA,wBAAU,EAAC,CAAC,CAAC,IAAI,CAAC,YAAY,eAAe;;;mBAGxC,iBAAiB;6BACP,CAAC,CAAC,IAAI;cACrB,gBAAgB;;;OAGvB,CAAC,CAAC;QACL,CAAC;QAED,OAAO,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAA;uBAErB,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAChC,iCAAiC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC;GAChE,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAtDW,QAAA,qBAAqB,yBAsDhC","sourcesContent":["import { pascalCase } from \"change-case\";\nimport dedent from \"dedent\";\nimport type { Phase } from \"../../types\";\nimport { extractExecutionAbi } from \"../../utils.js\";\n\nexport const AccountMethodGenPhase: Phase = async (input) => {\n  const { plugin, contract, addImport } = input;\n  const { executionFunctions } = await plugin.read.pluginManifest();\n  const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;\n  const executionAbi = extractExecutionAbi(executionFunctions, contract.abi);\n  const hasViewFunction =\n    executionAbi.filter((n) => n.stateMutability === \"view\").length > 0;\n\n  addImport(\"viem\", { name: \"GetFunctionArgs\", isType: true });\n  addImport(\"viem\", { name: \"encodeFunctionData\" });\n  addImport(\"../../types.js\", { name: \"IMSCA\", isType: true });\n\n  const accountFunctions = executionAbi.map((n) => {\n    const methodContent = [];\n    const argsParamString =\n      n.inputs.length > 0\n        ? `{ args }: GetFunctionArgs<typeof ${executionAbiConst}, \"${n.name}\">`\n        : \"\";\n    const argsEncodeString = n.inputs.length > 0 ? \"args,\" : \"\";\n    const isViewFunction = n.stateMutability === \"view\";\n\n    methodContent.push(dedent`\n      encode${pascalCase(n.name)}Data: (${argsParamString}) => {\n          return encodeFunctionData({\n              abi: ${executionAbiConst},\n              functionName: \"${n.name}\",\n              ${argsEncodeString}\n          });\n      }\n    `);\n\n    if (isViewFunction) {\n      methodContent.push(dedent`\n        read${pascalCase(n.name)}: async (${argsParamString}) => {\n          return account.rpcProvider.readContract({\n            address: await account.getAddress(),\n            abi: ${executionAbiConst},\n            functionName: \"${n.name}\",\n            ${argsEncodeString}\n          });\n        }\n      `);\n    }\n\n    return methodContent.join(\",\\n\\n\");\n  });\n\n  input.content.push(dedent`\n    accountMethods: (${\n      hasViewFunction ? \"account\" : \"_account\"\n    }: IMSCA<any, any, any>) => ({ ${accountFunctions.join(\",\\n\\n\")} })\n  `);\n\n  return input;\n};\n"]}