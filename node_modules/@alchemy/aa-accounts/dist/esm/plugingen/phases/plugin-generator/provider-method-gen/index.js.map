{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../plugingen/phases/plugin-generator/provider-method-gen/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAEhE,MAAM,CAAC,MAAM,sBAAsB,GAAU,KAAK,EAAE,KAAK,EAAE,EAAE;IAC3D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAC9C,MAAM,EAAE,kBAAkB,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IAClE,MAAM,iBAAiB,GAAG,GAAG,QAAQ,CAAC,IAAI,sBAAsB,CAAC;IACjE,MAAM,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IAE3E,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,SAAS,CAAC,kBAAkB,EAAE;QAC5B,IAAI,EAAE,wBAAwB;QAC9B,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;IACH,SAAS,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7E,SAAS,CAAC,kBAAkB,EAAE;QAC5B,IAAI,EAAE,uBAAuB;QAC7B,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,YAAY;SACnC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,MAAM,CAAC;SAC3C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACT,MAAM,eAAe,GACnB,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;YACjB,CAAC,CAAC,oCAAoC,iBAAiB,MAAM,CAAC,CAAC,IAAI,wCAAwC;YAC3G,CAAC,CAAC,EAAE,CAAC;QACT,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAE5D,OAAO,MAAM,CAAA;cACL,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,eAAe;;uBAE7B,iBAAiB;iCACP,CAAC,CAAC,IAAI;kBACrB,gBAAgB;;;;;WAKvB,CAAC;IACR,CAAC,CAAC,CAAC;IAEL,MAAM,qBAAqB,CAAC;QAC1B,GAAG,KAAK;QACR,OAAO,EAAE,iBAAiB;KAC3B,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;;;;;;cAMb,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;KACxC,CAAC,CAAC;IACL,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import { camelCase } from \"change-case\";\nimport dedent from \"dedent\";\nimport type { Phase } from \"../../../types\";\nimport { extractExecutionAbi } from \"../../../utils.js\";\nimport { InstallMethodGenPhase } from \"./install-method-gen.js\";\n\nexport const ProviderMethodGenPhase: Phase = async (input) => {\n  const { plugin, contract, addImport } = input;\n  const { executionFunctions } = await plugin.read.pluginManifest();\n  const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;\n  const executionAbi = extractExecutionAbi(executionFunctions, contract.abi);\n\n  addImport(\"viem\", { name: \"GetFunctionArgs\", isType: true });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"UserOperationOverrides\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", { name: \"SupportedTransports\", isType: true });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"ISmartAccountProvider\",\n    isType: true,\n  });\n\n  const providerFunctions = executionAbi\n    .filter((n) => n.stateMutability !== \"view\")\n    .map((n) => {\n      const argsParamString =\n        n.inputs.length > 0\n          ? `{ args }: GetFunctionArgs<typeof ${executionAbiConst}, \"${n.name}\">, overrides?: UserOperationOverrides`\n          : \"\";\n      const argsEncodeString = n.inputs.length > 0 ? \"args,\" : \"\";\n\n      return dedent`\n            ${camelCase(n.name)}: (${argsParamString}) => {\n              const callData = encodeFunctionData({\n                abi: ${executionAbiConst},\n                functionName: \"${n.name}\",\n                ${argsEncodeString}\n              });\n\n              return provider.sendUserOperation(callData, overrides);\n            }\n          `;\n    });\n\n  await InstallMethodGenPhase({\n    ...input,\n    content: providerFunctions,\n  });\n\n  input.content.push(dedent`\n    providerMethods: <\n        TTransport extends SupportedTransports,\n        P extends ISmartAccountProvider<TTransport> & { account: IMSCA<TTransport> }\n    >(\n        provider: P\n    ) => ({ ${providerFunctions.join(\",\\n\\n\")} }),\n    `);\n  return input;\n};\n"]}