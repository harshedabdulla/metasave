import { type Address } from "viem";
import type { IMSCA } from "../../types.js";
import type { Plugin } from "../types.js";
import { MultiOwnerPluginAbi } from "./plugin.js";
declare const ExtendedMultiOwnerPlugin_: {
    accountMethods: (account: IMSCA<any, any, any>) => {
        readOwners: (pluginAddress?: Address) => Promise<readonly `0x${string}`[]>;
        encodeUpdateOwnersData: ({ args, }: {
            args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
        }) => `0x${string}`;
        encodeEip712DomainData: () => `0x${string}`;
        readEip712Domain: () => Promise<readonly [`0x${string}`, string, string, bigint, `0x${string}`, `0x${string}`, readonly bigint[]]>;
        encodeIsValidSignatureData: ({ args, }: {
            args: readonly [`0x${string}`, `0x${string}`];
        }) => `0x${string}`;
        readIsValidSignature: ({ args, }: {
            args: readonly [`0x${string}`, `0x${string}`];
        }) => Promise<`0x${string}`>;
    };
    meta: {
        name: string;
        version: string;
        addresses: Record<number, `0x${string}`>;
    };
    getContract: (rpcClient: import("@alchemy/aa-core").PublicErc4337Client<import("viem").HttpTransport> | import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>, address?: `0x${string}` | undefined) => import("viem").GetContractReturnType<readonly [{
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "message";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "encodeMessageData";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "message";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "getMessageHash";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ownerToCheck";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isOwnerOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "digest";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onInstall";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onUninstall";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownersOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pluginManifest";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PluginManifest";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "interfaceIds";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "dependencyInterfaceIds";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "executionFunctions";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "permittedExecutionSelectors";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }, {
                readonly name: "permitAnyExternalAddress";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "canSpendNativeToken";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "permittedExternalCalls";
                readonly internalType: "struct ManifestExternalCallPermission[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "externalAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "permitAnySelector";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "selectors";
                    readonly internalType: "bytes4[]";
                    readonly type: "bytes4[]";
                }];
            }, {
                readonly name: "userOpValidationFunctions";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "runtimeValidationFunctions";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "preUserOpValidationHooks";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "preRuntimeValidationHooks";
                readonly internalType: "struct ManifestAssociatedFunction[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "associatedFunction";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "executionHooks";
                readonly internalType: "struct ManifestExecutionHook[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "executionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "preExecHook";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }, {
                    readonly name: "postExecHook";
                    readonly internalType: "struct ManifestFunction";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "functionType";
                        readonly internalType: "enum ManifestAssociatedFunctionType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "functionId";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "dependencyIndex";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }];
        }];
    }, {
        readonly stateMutability: "pure";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pluginMetadata";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PluginMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "version";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "author";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "permissionDescriptors";
                readonly internalType: "struct SelectorPermission[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "functionSelector";
                    readonly internalType: "bytes4";
                    readonly type: "bytes4";
                }, {
                    readonly name: "permissionDescription";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "preExecHookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "postExecutionHook";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preExecutionHook";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preRuntimeValidationHook";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "userOp";
            readonly internalType: "struct UserOperation";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "initCode";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "verificationGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "preVerificationGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPriorityFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "paymasterAndData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "userOpHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "preUserOpValidationHook";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "runtimeValidationFunction";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ownersToAdd";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "ownersToRemove";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "updateOwners";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "userOp";
            readonly internalType: "struct UserOperation";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "initCode";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "callGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "verificationGasLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "preVerificationGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPriorityFeePerGas";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "paymasterAndData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "userOpHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "userOpValidationFunction";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "addedOwners";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "removedOwners";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }];
        readonly name: "OwnerUpdated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EmptyOwnersNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "InvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotAuthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotContractCaller";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "selector";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "functionId";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "NotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnerDoesNotExist";
    }], import("@alchemy/aa-core").PublicErc4337Client<import("viem").HttpTransport> | import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>, undefined, `0x${string}`>;
    providerMethods: <TTransport extends import("@alchemy/aa-core").SupportedTransports, P extends import("@alchemy/aa-core").ISmartAccountProvider<TTransport> & {
        account: IMSCA<TTransport, import("@alchemy/aa-core").SmartAccountSigner<any>, {}>;
    }>(p: P) => {
        updateOwners: ({ args, }: {
            args: readonly [readonly `0x${string}`[], readonly `0x${string}`[]];
        }, overrides?: Partial<{
            callGasLimit: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            maxFeePerGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            maxPriorityFeePerGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            preVerificationGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            verificationGasLimit: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            paymasterAndData: import("@alchemy/aa-core").BytesLike;
        }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
        installMultiOwnerPlugin: (params: import("./plugin.js").InstallMultiOwnerPluginParams, overrides?: Partial<{
            callGasLimit: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            maxFeePerGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            maxPriorityFeePerGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            preVerificationGas: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            verificationGasLimit: number | bigint | `0x${string}` | {
                percentage: number;
            } | undefined;
            paymasterAndData: import("@alchemy/aa-core").BytesLike;
        }> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    };
};
export declare const ExtendedMultiOwnerPlugin: Plugin<ReturnType<(typeof ExtendedMultiOwnerPlugin_)["accountMethods"]>, ReturnType<(typeof ExtendedMultiOwnerPlugin_)["providerMethods"]>, typeof MultiOwnerPluginAbi>;
export {};
