{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/session-key/extension.ts"],"names":[],"mappings":"AAOA,OAAO,EAAe,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AACpE,OAAO,EAAE,8BAA8B,EAAE,MAAM,YAAY,CAAC;AAE5D,MAAM,yBAAyB,GAAG;IAChC,GAAG,gBAAgB;IACnB,cAAc,EAAE,CAAC,OAA6B,EAAE,EAAE,CAAC,CAAC;QAClD,mBAAmB,EAAE,KAAK,EAAE,EAC1B,GAAG,EACH,aAAa,GAId,EAAE,EAAE;YACH,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAC3C,OAAO,CAAC,WAAW,EACnB,aAAa,CACd,CAAC;YAEF,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;gBACxC,MAAM,OAAO,CAAC,UAAU,EAAE;gBAC1B,GAAG;aACJ,CAAC,CAAC;QACL,CAAC;QAED,qBAAqB,EAAE,KAAK,EAAE,EAC5B,aAAa,GAGd,EAAE,EAAE;YACH,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAC3C,OAAO,CAAC,WAAW,EACnB,aAAa,CACd,CAAC;YAEF,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACzE,CAAC;KACF,CAAC;IACF,eAAe,EAAE,CAMf,QAAW,EACX,EAAE;QACF,MAAM,SAAS,GAAG,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC7D,OAAO;YACL,GAAG,SAAS;YAEZ,uBAAuB,EAAE,KAAK,EAC5B,EAAE,GAAG,EAAoB,EACzB,SAAkC,EAClC,EAAE;gBACF,MAAM,mBAAmB,GAAG,MAAM,8BAA8B,CAC9D,QAAQ,EACR,CAAC,GAAG,CAAC,CACN,CAAC;gBACF,OAAO,SAAS,CAAC,gBAAgB,CAC/B,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,EACnD,SAAS,CACV,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAIjC,yBAAyB,CAAC","sourcesContent":["import type {\n  ISmartAccountProvider,\n  SupportedTransports,\n  UserOperationOverrides,\n} from \"@alchemy/aa-core\";\nimport type { Address } from \"viem\";\nimport type { IMSCA } from \"../../types.js\";\nimport { type Plugin } from \"../types.js\";\nimport { SessionKeyPlugin, SessionKeyPluginAbi } from \"./plugin.js\";\nimport { buildSessionKeysToRemoveStruct } from \"./utils.js\";\n\nconst ExtendedSessionKeyPlugin_ = {\n  ...SessionKeyPlugin,\n  accountMethods: (account: IMSCA<any, any, any>) => ({\n    isAccountSessionKey: async ({\n      key,\n      pluginAddress,\n    }: {\n      key: Address;\n      pluginAddress?: Address;\n    }) => {\n      const contract = SessionKeyPlugin.getContract(\n        account.rpcProvider,\n        pluginAddress\n      );\n\n      return await contract.read.isSessionKeyOf([\n        await account.getAddress(),\n        key,\n      ]);\n    },\n\n    getAccountSessionKeys: async ({\n      pluginAddress,\n    }: {\n      pluginAddress?: Address;\n    }) => {\n      const contract = SessionKeyPlugin.getContract(\n        account.rpcProvider,\n        pluginAddress\n      );\n\n      return await contract.read.sessionKeysOf([await account.getAddress()]);\n    },\n  }),\n  providerMethods: <\n    TTransport extends SupportedTransports,\n    P extends ISmartAccountProvider<TTransport> & {\n      account: IMSCA<TTransport>;\n    }\n  >(\n    provider: P\n  ) => {\n    const generated = SessionKeyPlugin.providerMethods(provider);\n    return {\n      ...generated,\n\n      removeAccountSessionKey: async (\n        { key }: { key: Address },\n        overrides?: UserOperationOverrides\n      ) => {\n        const sessionKeysToRemove = await buildSessionKeysToRemoveStruct(\n          provider,\n          [key]\n        );\n        return generated.removeSessionKey(\n          { args: [key, sessionKeysToRemove[0].predecessor] },\n          overrides\n        );\n      },\n    };\n  },\n};\n\nexport const ExtendedSessionKeyPlugin: Plugin<\n  ReturnType<(typeof ExtendedSessionKeyPlugin_)[\"accountMethods\"]>,\n  ReturnType<(typeof ExtendedSessionKeyPlugin_)[\"providerMethods\"]>,\n  typeof SessionKeyPluginAbi\n> = ExtendedSessionKeyPlugin_;\n"]}