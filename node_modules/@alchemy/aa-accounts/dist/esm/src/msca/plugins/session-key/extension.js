import {} from "../types.js";
import { SessionKeyPlugin, SessionKeyPluginAbi } from "./plugin.js";
import { buildSessionKeysToRemoveStruct } from "./utils.js";
const ExtendedSessionKeyPlugin_ = {
    ...SessionKeyPlugin,
    accountMethods: (account) => ({
        isAccountSessionKey: async ({ key, pluginAddress, }) => {
            const contract = SessionKeyPlugin.getContract(account.rpcProvider, pluginAddress);
            return await contract.read.isSessionKeyOf([
                await account.getAddress(),
                key,
            ]);
        },
        getAccountSessionKeys: async ({ pluginAddress, }) => {
            const contract = SessionKeyPlugin.getContract(account.rpcProvider, pluginAddress);
            return await contract.read.sessionKeysOf([await account.getAddress()]);
        },
    }),
    providerMethods: (provider) => {
        const generated = SessionKeyPlugin.providerMethods(provider);
        return {
            ...generated,
            removeAccountSessionKey: async ({ key }, overrides) => {
                const sessionKeysToRemove = await buildSessionKeysToRemoveStruct(provider, [key]);
                return generated.removeSessionKey({ args: [key, sessionKeysToRemove[0].predecessor] }, overrides);
            },
        };
    },
};
export const ExtendedSessionKeyPlugin = ExtendedSessionKeyPlugin_;
//# sourceMappingURL=extension.js.map