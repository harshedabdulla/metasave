import { encodeFunctionData } from "viem";
import { IStandardExecutorAbi } from "../../abis/IStandardExecutor.js";
import { SessionKeyPlugin, SessionKeyPluginAbi } from "./plugin.js";
import { SESSION_KEY_SIGNER_TYPE_PFX, SessionKeySigner } from "./signer.js";
export const SessionKeyExecutor = (acct) => {
    const owner = acct.getOwner();
    if (!owner) {
        throw new Error("Account must be connected to an owner");
    }
    const isSessionKeyActive = async (pluginAddress) => {
        const contract = SessionKeyPlugin.getContract(acct.rpcProvider, pluginAddress);
        const [accountAddress, sessionKey] = await Promise.all([
            acct.getAddress(),
            owner.getAddress(),
        ]);
        if (await contract.read
            .isSessionKeyOf([accountAddress, sessionKey])
            .catch(() => false)) {
            return true;
        }
        return (!owner.signerType.startsWith(SESSION_KEY_SIGNER_TYPE_PFX) ||
            (owner.signerType.startsWith(SESSION_KEY_SIGNER_TYPE_PFX) &&
                owner.isKeyActive()));
    };
    return {
        async encodeExecute(target, value, data) {
            if (!isSessionKeyActive()) {
                return encodeFunctionData({
                    abi: IStandardExecutorAbi,
                    functionName: "execute",
                    args: [target, value, data],
                });
            }
            return encodeFunctionData({
                abi: SessionKeyPluginAbi,
                functionName: "executeWithSessionKey",
                args: [[{ target, value, data }], await owner.getAddress()],
            });
        },
        async encodeBatchExecute(txs) {
            if (!isSessionKeyActive()) {
                return encodeFunctionData({
                    abi: IStandardExecutorAbi,
                    functionName: "executeBatch",
                    args: [
                        txs.map((tx) => ({
                            target: tx.target,
                            data: tx.data,
                            value: tx.value ?? 0n,
                        })),
                    ],
                });
            }
            return encodeFunctionData({
                abi: SessionKeyPluginAbi,
                functionName: "executeWithSessionKey",
                args: [
                    txs.map((tx) => ({
                        target: tx.target,
                        data: tx.data,
                        value: tx.value ?? 0n,
                    })),
                    await owner.getAddress(),
                ],
            });
        },
    };
};
//# sourceMappingURL=executor.js.map