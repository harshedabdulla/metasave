import { encodeFunctionData } from "viem";
import { SessionKeyPermissionsUpdatesAbi } from "./SessionKeyPermissionsUpdatesAbi.js";
var SessionKeyAccessListType;
(function (SessionKeyAccessListType) {
    SessionKeyAccessListType[SessionKeyAccessListType["ALLOWLIST"] = 0] = "ALLOWLIST";
    SessionKeyAccessListType[SessionKeyAccessListType["DENYLIST"] = 1] = "DENYLIST";
    SessionKeyAccessListType[SessionKeyAccessListType["NONE"] = 2] = "NONE";
})(SessionKeyAccessListType || (SessionKeyAccessListType = {}));
export class SessionKeyPermissionsBuilder {
    constructor() {
        Object.defineProperty(this, "_contractAccessControlType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: SessionKeyAccessListType.ALLOWLIST
        });
        Object.defineProperty(this, "_contractAddressAccessEntrys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_contractMethodAccessEntrys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_timeRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nativeTokenSpendLimit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_erc20TokenSpendLimits", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_gasSpendLimit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_requiredPaymaster", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    setContractAccessControlType(aclType) {
        this._contractAccessControlType = aclType;
        return this;
    }
    addContractAddressAccessEntry(entry) {
        this._contractAddressAccessEntrys.push(entry);
        return this;
    }
    addContractFunctionAccessEntry(entry) {
        this._contractMethodAccessEntrys.push(entry);
        return this;
    }
    setTimeRange(timeRange) {
        this._timeRange = timeRange;
        return this;
    }
    setNativeTokenSpendLimit(limit) {
        this._nativeTokenSpendLimit = limit;
        return this;
    }
    addErc20TokenSpendLimit(limit) {
        this._erc20TokenSpendLimits.push(limit);
        return this;
    }
    setGasSpendLimit(limit) {
        this._gasSpendLimit = limit;
        return this;
    }
    setRequiredPaymaster(paymaster) {
        this._requiredPaymaster = paymaster;
        return this;
    }
    encode() {
        return [
            encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setAccessListType",
                args: [this._contractAccessControlType],
            }),
            ...this._contractAddressAccessEntrys.map((entry) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateAccessListAddressEntry",
                args: [entry.contractAddress, entry.isOnList, entry.checkSelectors],
            })),
            ...this._contractMethodAccessEntrys.map((entry) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateAccessListFunctionEntry",
                args: [entry.contractAddress, entry.methodSelector, entry.isOnList],
            })),
            this.encodeIfDefined((timeRange) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateTimeRange",
                args: [timeRange.validFrom, timeRange.validUntil],
            }), this._timeRange),
            this.encodeIfDefined((nativeSpendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setNativeTokenSpendLimit",
                args: [
                    nativeSpendLimit.spendLimit,
                    nativeSpendLimit.refreshInterval ?? 0,
                ],
            }), this._nativeTokenSpendLimit),
            ...this._erc20TokenSpendLimits.map((erc20SpendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setERC20SpendLimit",
                args: [
                    erc20SpendLimit.tokenAddress,
                    erc20SpendLimit.spendLimit,
                    erc20SpendLimit.refreshInterval ?? 0,
                ],
            })),
            this.encodeIfDefined((spendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setGasSpendLimit",
                args: [spendLimit.spendLimit, spendLimit.refreshInterval ?? 0],
            }), this._gasSpendLimit),
            this.encodeIfDefined((paymaster) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setRequiredPaymaster",
                args: [paymaster],
            }), this._requiredPaymaster),
        ].filter((x) => x === "0x");
    }
    encodeIfDefined(encode, param) {
        if (!param)
            return "0x";
        return encode(param);
    }
}
//# sourceMappingURL=permissions.js.map