import { LocalAccountSigner, SignerSchema, } from "@alchemy/aa-core";
import { generatePrivateKey } from "viem/accounts";
import { z } from "zod";
export const createSessionKeySignerSchema = () => {
    return z.object({
        storageType: z
            .union([z.literal("local-storage"), z.literal("session-storage")])
            .default("local-storage"),
        storageKey: z.string().default("session-key-signer:session-key"),
        fallbackSigner: z.custom((signer) => SignerSchema.parse(signer)),
    });
};
export const SESSION_KEY_SIGNER_TYPE_PFX = "alchemy:session-key";
export class SessionKeySigner {
    constructor(config_) {
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "keyActive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fallback", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storageType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storageKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.keyActive) {
                    return this.fallback.getAddress();
                }
                return this.inner.getAddress();
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.keyActive) {
                    return this.fallback.signMessage(msg);
                }
                return this.inner.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.keyActive) {
                    return this.fallback.signTypedData(params);
                }
                return this.inner.signTypedData(params);
            }
        });
        Object.defineProperty(this, "isKeyActive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                return this.keyActive;
            }
        });
        Object.defineProperty(this, "setKeyActive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (active) => {
                return (this.keyActive = active);
            }
        });
        Object.defineProperty(this, "generateNewKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                const storage = this.storageType === "session-storage" ? sessionStorage : localStorage;
                const newKey = generatePrivateKey();
                storage.setItem(this.storageKey, newKey);
                this.inner = LocalAccountSigner.privateKeyToAccountSigner(newKey);
                this.keyActive = true;
                return this.inner.inner.address;
            }
        });
        const config = createSessionKeySignerSchema().parse(config_);
        this.signerType = `${SESSION_KEY_SIGNER_TYPE_PFX}:${config.fallbackSigner.signerType}`;
        this.storageKey = config.storageKey;
        this.storageType = config.storageType;
        const sessionKey = (() => {
            const storage = config.storageType === "session-storage"
                ? sessionStorage
                : localStorage;
            const key = storage.getItem(this.storageKey);
            if (key) {
                return key;
            }
            else {
                const newKey = generatePrivateKey();
                storage.setItem(this.storageKey, newKey);
                return newKey;
            }
        })();
        this.inner = LocalAccountSigner.privateKeyToAccountSigner(sessionKey);
        this.keyActive = true;
        this.fallback = config.fallbackSigner;
    }
}
//# sourceMappingURL=signer.js.map