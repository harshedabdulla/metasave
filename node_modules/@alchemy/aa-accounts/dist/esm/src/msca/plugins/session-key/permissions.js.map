{"version":3,"file":"permissions.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/session-key/permissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { encodeFunctionData, type Address, type Hex } from \"viem\";\nimport { SessionKeyPermissionsUpdatesAbi } from \"./SessionKeyPermissionsUpdatesAbi.js\";\n\nenum SessionKeyAccessListType {\n  ALLOWLIST = 0,\n  DENYLIST = 1,\n  NONE = 2,\n}\n\ntype ContractAccessEntry = {\n  // The contract address to add or remove.\n  contractAddress: Address;\n  // Whether the contract address should be on the list.\n  isOnList: boolean;\n  // Whether to check selectors for the contract address.\n  checkSelectors: boolean;\n};\n\ntype ContractMethodEntry = {\n  // The contract address to add or remove.\n  contractAddress: Address;\n  // The function selector to add or remove.\n  methodSelector: Hex;\n  // Whether the function selector should be on the list.\n  isOnList: boolean;\n};\n\ntype TimeRange = {\n  validFrom: number;\n  validUntil: number;\n};\n\ntype NativeTokenLimit = {\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\ntype Erc20TokenLimit = {\n  tokenAddress: Address;\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\n// uint256 spendLimit, uint48 refreshInterval\ntype GasSpendLimit = {\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\nexport class SessionKeyPermissionsBuilder {\n  private _contractAccessControlType: SessionKeyAccessListType =\n    SessionKeyAccessListType.ALLOWLIST;\n  private _contractAddressAccessEntrys: ContractAccessEntry[] = [];\n  private _contractMethodAccessEntrys: ContractMethodEntry[] = [];\n  private _timeRange?: TimeRange;\n  private _nativeTokenSpendLimit?: NativeTokenLimit;\n  private _erc20TokenSpendLimits: Erc20TokenLimit[] = [];\n  private _gasSpendLimit?: GasSpendLimit;\n  private _requiredPaymaster?: Address;\n\n  public setContractAccessControlType(aclType: SessionKeyAccessListType) {\n    this._contractAccessControlType = aclType;\n    return this;\n  }\n\n  public addContractAddressAccessEntry(entry: ContractAccessEntry) {\n    this._contractAddressAccessEntrys.push(entry);\n    return this;\n  }\n\n  public addContractFunctionAccessEntry(entry: ContractMethodEntry) {\n    this._contractMethodAccessEntrys.push(entry);\n    return this;\n  }\n\n  public setTimeRange(timeRange: TimeRange) {\n    this._timeRange = timeRange;\n    return this;\n  }\n\n  public setNativeTokenSpendLimit(limit: NativeTokenLimit) {\n    this._nativeTokenSpendLimit = limit;\n    return this;\n  }\n\n  public addErc20TokenSpendLimit(limit: Erc20TokenLimit) {\n    this._erc20TokenSpendLimits.push(limit);\n    return this;\n  }\n\n  public setGasSpendLimit(limit: GasSpendLimit) {\n    this._gasSpendLimit = limit;\n    return this;\n  }\n\n  public setRequiredPaymaster(paymaster: Address) {\n    this._requiredPaymaster = paymaster;\n    return this;\n  }\n\n  public encode(): Hex[] {\n    return [\n      encodeFunctionData({\n        abi: SessionKeyPermissionsUpdatesAbi,\n        functionName: \"setAccessListType\",\n        args: [this._contractAccessControlType],\n      }),\n      ...this._contractAddressAccessEntrys.map((entry) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"updateAccessListAddressEntry\",\n          args: [entry.contractAddress, entry.isOnList, entry.checkSelectors],\n        })\n      ),\n      ...this._contractMethodAccessEntrys.map((entry) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"updateAccessListFunctionEntry\",\n          args: [entry.contractAddress, entry.methodSelector, entry.isOnList],\n        })\n      ),\n      this.encodeIfDefined(\n        (timeRange) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"updateTimeRange\",\n            args: [timeRange.validFrom, timeRange.validUntil],\n          }),\n        this._timeRange\n      ),\n      this.encodeIfDefined(\n        (nativeSpendLimit) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setNativeTokenSpendLimit\",\n            args: [\n              nativeSpendLimit.spendLimit,\n              nativeSpendLimit.refreshInterval ?? 0,\n            ],\n          }),\n        this._nativeTokenSpendLimit\n      ),\n      ...this._erc20TokenSpendLimits.map((erc20SpendLimit) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"setERC20SpendLimit\",\n          args: [\n            erc20SpendLimit.tokenAddress,\n            erc20SpendLimit.spendLimit,\n            erc20SpendLimit.refreshInterval ?? 0,\n          ],\n        })\n      ),\n      this.encodeIfDefined(\n        (spendLimit) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setGasSpendLimit\",\n            args: [spendLimit.spendLimit, spendLimit.refreshInterval ?? 0],\n          }),\n        this._gasSpendLimit\n      ),\n      this.encodeIfDefined(\n        (paymaster) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setRequiredPaymaster\",\n            args: [paymaster],\n          }),\n        this._requiredPaymaster\n      ),\n    ].filter((x) => x === \"0x\");\n  }\n\n  private encodeIfDefined<T>(encode: (param: T) => Hex, param?: T): Hex {\n    if (!param) return \"0x\";\n\n    return encode(param);\n  }\n}\n"]}