{"version":3,"file":"installPlugin.js","sourceRoot":"","sources":["../../../../../src/msca/plugin-manager/installPlugin.ts"],"names":[],"mappings":"AAIA,OAAO,EACL,kBAAkB,EAClB,oBAAoB,EACpB,SAAS,GAGV,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAW9D,MAAM,CAAC,KAAK,UAAU,aAAa,CAGjC,QAAW,EACX,MAA2B,EAC3B,SAAkC;IAElC,MAAM,QAAQ,GAAG,MAAM,gCAAgC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC1E,OAAO,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gCAAgC,CAEpD,QAAW,EAAE,MAA2B;IACxC,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC;QAC3D,GAAG,EAAE,UAAU;QACf,OAAO,EAAE,MAAM,CAAC,aAAa;QAC7B,YAAY,EAAE,gBAAgB;KAC/B,CAAC,CAAC;IAEH,MAAM,YAAY,GAChB,MAAM,CAAC,YAAY;QACnB,SAAS,CACP,oBAAoB,CAAC;YACnB,GAAG,EAAE,UAAU;YACf,YAAY,EAAE,gBAAgB;YAC9B,MAAM,EAAE,cAAc;SACvB,CAAC,CACH,CAAC;IACJ,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,iBAAiB;QACtB,YAAY,EAAE,eAAe;QAC7B,IAAI,EAAE;YACJ,MAAM,CAAC,aAAa;YACpB,YAAY;YACZ,MAAM,CAAC,cAAc,IAAI,IAAI;YAC7B,MAAM,CAAC,YAAY,IAAI,EAAE;SAC1B;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type {\n  ISmartAccountProvider,\n  UserOperationOverrides,\n} from \"@alchemy/aa-core\";\nimport {\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  type Address,\n  type Hash,\n} from \"viem\";\nimport { IPluginAbi } from \"../abis/IPlugin.js\";\nimport { IPluginManagerAbi } from \"../abis/IPluginManager.js\";\nimport type { FunctionReference } from \"../account-loupe/types.js\";\nimport type { IMSCA } from \"../types.js\";\n\nexport type InstallPluginParams = {\n  pluginAddress: Address;\n  manifestHash?: Hash;\n  pluginInitData?: Hash;\n  dependencies?: FunctionReference[];\n};\n\nexport async function installPlugin<\n  P extends ISmartAccountProvider & { account: IMSCA<any, any, any> }\n>(\n  provider: P,\n  params: InstallPluginParams,\n  overrides?: UserOperationOverrides\n) {\n  const callData = await encodeInstallPluginUserOperation(provider, params);\n  return provider.sendUserOperation(callData, overrides);\n}\n\nexport async function encodeInstallPluginUserOperation<\n  P extends ISmartAccountProvider & { account: IMSCA<any, any, any> }\n>(provider: P, params: InstallPluginParams) {\n  const pluginManifest = await provider.rpcClient.readContract({\n    abi: IPluginAbi,\n    address: params.pluginAddress,\n    functionName: \"pluginManifest\",\n  });\n  // use the manifest hash passed in or get it from the plugin\n  const manifestHash: Hash =\n    params.manifestHash ??\n    keccak256(\n      encodeFunctionResult({\n        abi: IPluginAbi,\n        functionName: \"pluginManifest\",\n        result: pluginManifest,\n      })\n    );\n  return encodeFunctionData({\n    abi: IPluginManagerAbi,\n    functionName: \"installPlugin\",\n    args: [\n      params.pluginAddress,\n      manifestHash,\n      params.pluginInitData ?? \"0x\",\n      params.dependencies ?? [],\n    ],\n  });\n}\n"]}