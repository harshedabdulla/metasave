{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/msca/builder/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseSmartContractAccount,\n  createBaseSmartAccountParamsSchema,\n  isSigner,\n  type BatchUserOperationCallData,\n  type ISmartAccountProvider,\n  type SignTypedDataParams,\n  type SmartAccountSigner,\n  type SupportedTransports,\n} from \"@alchemy/aa-core\";\nimport { type Abi, type Transport } from \"viem\";\nimport { z } from \"zod\";\nimport { pluginManagerDecorator } from \"../plugin-manager/decorator.js\";\nimport type { Plugin } from \"../plugins/types\";\nimport type { IMSCA } from \"../types.js\";\nimport type { Executor, Factory, SignerMethods } from \"./types.js\";\n\nconst zCompleteBuilder = z.object({\n  executor: z.custom<Executor>(),\n  signer: z.custom<SignerMethods>(),\n  factory: z.custom<Factory>(),\n});\n\nexport type ModularAccountBuilderParams<\n  TTransport extends SupportedTransports = Transport,\n  TOwner extends SmartAccountSigner = SmartAccountSigner\n> = z.input<\n  ReturnType<typeof ModularAccountBuilderParamsSchema<TTransport, TOwner>>\n>;\n\nexport const ModularAccountBuilderParamsSchema = <\n  TTransport extends SupportedTransports = Transport,\n  TOwner extends SmartAccountSigner = SmartAccountSigner\n>() =>\n  createBaseSmartAccountParamsSchema<TTransport, TOwner>().extend({\n    owner: z.custom<TOwner>(isSigner),\n    index: z.bigint().optional(),\n  });\n\nexport class MSCABuilder {\n  executor?: Executor;\n  signer?: SignerMethods;\n  factory?: Factory;\n\n  withExecutor(executor: Executor): this & { executor: Executor } {\n    return Object.assign(this, { executor });\n  }\n\n  withSigner(methods: SignerMethods): this & { signer: SignerMethods } {\n    return Object.assign(this, { signer: methods });\n  }\n\n  withFactory(initCode: Factory): this & { factory: Factory } {\n    return Object.assign(this, { factory: initCode });\n  }\n\n  build<\n    TTransport extends SupportedTransports = Transport,\n    TOwner extends SmartAccountSigner = SmartAccountSigner\n  >(\n    params: ModularAccountBuilderParams<TTransport, TOwner>\n  ): IMSCA<TTransport, TOwner, ReturnType<typeof pluginManagerDecorator>> {\n    const builder = this;\n    const { signer, executor, factory } = zCompleteBuilder.parse(builder);\n\n    return new (class DynamicMSCA<\n      TProviderDecorators = ReturnType<typeof pluginManagerDecorator>\n    > extends BaseSmartContractAccount<TTransport, (typeof params)[\"owner\"]> {\n      providerDecorators_: (<\n        TProvider extends ISmartAccountProvider<TTransport> & { account: IMSCA }\n      >(\n        p: TProvider\n      ) => any)[] = [pluginManagerDecorator];\n\n      providerDecorators: (\n        p: ISmartAccountProvider<TTransport>\n      ) => TProviderDecorators = (p) => {\n        if (!p.isConnected() && p.account !== this) {\n          throw new Error(\n            \"provider should be connected if it is being decorated by the account\"\n          );\n        }\n\n        return this.providerDecorators_.reduce(\n          (acc, decorator) => ({\n            ...acc,\n            ...decorator(\n              p as ISmartAccountProvider<TTransport> & { account: IMSCA }\n            ),\n          }),\n          {} as TProviderDecorators\n        );\n      };\n\n      getDummySignature(): `0x${string}` {\n        return signer(this).getDummySignature();\n      }\n\n      encodeExecute(\n        target: string,\n        value: bigint,\n        data: string\n      ): Promise<`0x${string}`> {\n        return executor(this).encodeExecute(target, value, data);\n      }\n\n      encodeBatchExecute(\n        txs: BatchUserOperationCallData\n      ): Promise<`0x${string}`> {\n        return executor(this).encodeBatchExecute(txs);\n      }\n\n      signMessage(msg: string | Uint8Array): Promise<`0x${string}`> {\n        return signer(this).signMessage(msg);\n      }\n\n      signTypedData(params: SignTypedDataParams): Promise<`0x${string}`> {\n        return signer(this).signTypedData(params);\n      }\n\n      signUserOperationHash(uoHash: `0x${string}`): Promise<`0x${string}`> {\n        return signer(this).signUserOperationHash(uoHash);\n      }\n\n      protected getAccountInitCode(): Promise<`0x${string}`> {\n        return factory(this);\n      }\n\n      extendWithPluginMethods = <AD, PD, TAbi extends Abi>(\n        plugin: Plugin<AD, PD, TAbi>\n      ): DynamicMSCA<TProviderDecorators & PD> & AD => {\n        const methods = plugin.accountMethods(this);\n        const result = Object.assign(this, methods) as unknown as DynamicMSCA<\n          TProviderDecorators & PD\n        > &\n          AD;\n        result.providerDecorators_.push(plugin.providerMethods);\n\n        return result as unknown as DynamicMSCA<TProviderDecorators & PD> & AD;\n      };\n\n      addProviderDecorator = <\n        PD,\n        TProvider extends ISmartAccountProvider<TTransport> & { account: IMSCA }\n      >(\n        decorator: (p: TProvider) => PD\n      ): DynamicMSCA<TProviderDecorators & PD> => {\n        // @ts-expect-error this will be an error, but it's fine because we cast below\n        this.providerDecorators_.push(decorator);\n\n        return this as unknown as DynamicMSCA<TProviderDecorators & PD>;\n      };\n    })(params);\n  }\n}\n"]}