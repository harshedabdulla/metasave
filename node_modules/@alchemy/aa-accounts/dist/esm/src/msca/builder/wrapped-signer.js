import { hashMessage, hashTypedData, hexToBytes, isBytes, } from "viem";
import { MultiOwnerPlugin, MultiOwnerPluginAbi, } from "../plugins/multi-owner/plugin.js";
export const WrapWith712SignerMethods = (acct) => {
    const owner = acct.getOwner();
    if (!owner) {
        throw new Error("owner is required for use with signer methods");
    }
    const signWith712Wrapper = async (msg) => {
        const [, name, version, chainId, , salt] = await acct.rpcProvider.readContract({
            abi: MultiOwnerPluginAbi,
            address: MultiOwnerPlugin.meta.addresses[acct.rpcProvider.chain.id],
            functionName: "eip712Domain",
            account: await acct.getAddress(),
        });
        return owner.signTypedData({
            domain: {
                chainId: Number(chainId),
                name,
                salt,
                verifyingContract: await acct.getAddress(),
                version,
            },
            types: {
                AlchemyModularAccountMessage: [{ name: "message", type: "bytes" }],
            },
            message: {
                message: msg,
            },
            primaryType: "AlchemyModularAccountMessage",
        });
    };
    return {
        getDummySignature() {
            return "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";
        },
        signUserOperationHash(uoHash) {
            return owner.signMessage(hexToBytes(uoHash));
        },
        signMessage(msg) {
            return signWith712Wrapper(hashMessage(typeof msg === "string" && !isBytes(msg)
                ? msg
                : {
                    raw: msg,
                }));
        },
        signTypedData(params) {
            return signWith712Wrapper(hashTypedData(params));
        },
    };
};
//# sourceMappingURL=wrapped-signer.js.map