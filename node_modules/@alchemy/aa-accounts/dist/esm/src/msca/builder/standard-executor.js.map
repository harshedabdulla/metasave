{"version":3,"file":"standard-executor.js","sourceRoot":"","sources":["../../../../../src/msca/builder/standard-executor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAA0B,MAAM,MAAM,CAAC;AAClE,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAGpE,MAAM,CAAC,MAAM,gBAAgB,GAAa,GAAG,EAAE,CAAC,CAAC;IAC/C,KAAK,CAAC,aAAa,CACjB,MAAe,EACf,KAAa,EACb,IAAS;QAET,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,oBAAoB;YACzB,YAAY,EAAE,SAAS;YACvB,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;SAC5B,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,GAA+B;QAE/B,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,oBAAoB;YACzB,YAAY,EAAE,cAAc;YAC5B,IAAI,EAAE;gBACJ,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBACf,MAAM,EAAE,EAAE,CAAC,MAAM;oBACjB,IAAI,EAAE,EAAE,CAAC,IAAI;oBACb,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;iBACtB,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { BatchUserOperationCallData } from \"@alchemy/aa-core\";\nimport { encodeFunctionData, type Address, type Hex } from \"viem\";\nimport { IStandardExecutorAbi } from \"../abis/IStandardExecutor.js\";\nimport type { Executor } from \"./types\";\n\nexport const StandardExecutor: Executor = () => ({\n  async encodeExecute(\n    target: Address,\n    value: bigint,\n    data: Hex\n  ): Promise<`0x${string}`> {\n    return encodeFunctionData({\n      abi: IStandardExecutorAbi,\n      functionName: \"execute\",\n      args: [target, value, data],\n    });\n  },\n\n  async encodeBatchExecute(\n    txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    return encodeFunctionData({\n      abi: IStandardExecutorAbi,\n      functionName: \"executeBatch\",\n      args: [\n        txs.map((tx) => ({\n          target: tx.target,\n          data: tx.data,\n          value: tx.value ?? 0n,\n        })),\n      ],\n    });\n  },\n});\n"]}