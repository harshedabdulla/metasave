{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../../src/nani-account/account.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,EACxB,oBAAoB,GAMrB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,SAAS,EACT,oBAAoB,EACpB,kBAAkB,EAMlB,WAAW,EACX,UAAU,GACX,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EAAE,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;AAUxE,MAAM,OAAO,WAEX,SAAQ,wBAAoC;IAK5C,YAAY,MAA0C;QACpD,KAAK,CAAC,MAAM,CAAC,CAAC;QALN;;;;;WAA0B;QACnB;;;;;WAAc;QACrB;;;;;WAAW;QAKnB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAEQ,KAAK,CAAC,aAAa,CAAC,MAA2B;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAOD,KAAK,CAAC,eAAe;QACnB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAC7C,EAAE,EAAE,MAAM,IAAI,CAAC,UAAU,EAAE;YAC3B,IAAI,EAAE,kBAAkB,CAAC;gBACvB,GAAG,EAAE,cAAc;gBACnB,YAAY,EAAE,OAAO;aACtB,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,iBAAiB,GAAG,oBAAoB,CAAC;YAC7C,GAAG,EAAE,cAAc;YACnB,YAAY,EAAE,OAAO;YACrB,IAAI,EAAE,UAAU,CAAC,IAAI;SACtB,CAAC,CAAC;QAEH,IAAI,iBAAiB,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;YAC1D,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,CAAC;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAC7C,EAAE,EAAE,IAAI,CAAC,cAAc;YACvB,IAAI,EAAE,kBAAkB,CAAC;gBACvB,GAAG,EAAE,qBAAqB;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;aAC7B,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,iBAAiB,GAAG,oBAAoB,CAAC;YAC7C,GAAG,EAAE,qBAAqB;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,UAAU,CAAC,IAAI;SACtB,CAAC,CAAC;QAEH,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,iBAAiB;QACf,OAAO,sIAAsI,CAAC;IAChJ,CAAC;IAED,WAAW,CAAC,GAAwB;QAClC,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YACpD,GAAG,GAAG,UAAU,CAAC,GAAU,CAAC,CAAC;QAC/B,CAAC;aAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACnC,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAW,EAAE,KAAa,EAAE,IAAS;QACvD,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,cAAc;YACnB,YAAY,EAAE,SAAS;YACvB,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;SAC5B,CAAC,CAAC;IACL,CAAC;IAEQ,KAAK,CAAC,kBAAkB,CAC/B,KAAiC;QAEjC,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,cAAc;YACnB,YAAY,EAAE,cAAc;YAC5B,IAAI,EAAE;gBACJ,KAAK,CAAC,GAAG,CAAC,CAAC,IAAyC,EAAE,EAAE,CAAC,CAAC;oBACxD,GAAG,IAAI;oBACP,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;iBACxB,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;IACL,CAAC;IASD,MAAM,CAAC,qBAAqB,CAAC,QAAiB,EAAE,IAAS;QACvD,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,cAAc;YACnB,YAAY,EAAE,iBAAiB;YAC/B,IAAI,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC;SACvB,CAAC,CAAC;IACL,CAAC;IAQD,MAAM,CAAC,uBAAuB,CAAC,QAAiB;QAC9C,OAAO,kBAAkB,CAAC;YACxB,GAAG,EAAE,cAAc;YACnB,YAAY,EAAE,mBAAmB;YACjC,IAAI,EAAE,CAAC,QAAQ,CAAC;SACjB,CAAC,CAAC;IACL,CAAC;IAWD,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAG5B,QAEC,EACD,QAA4B,EAC5B,aAAsB,KAAK;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACvE,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,iBAAiB,CAAC;YAC9C,MAAM,EAAE,MAAM,QAAQ,CAAC,UAAU,EAAE;YACnC,IAAI;SACL,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC;QAElC,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,QAAQ,CAAC,+BAA+B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/D,CAAC;QAED,OAAO,MAAM,CAAC,IAAI,CAAC;IACrB,CAAC;IAEkB,KAAK,CAAC,kBAAkB;QACzC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC;YAC7B,IAAI,CAAC,cAAc;YACnB,MAAM,IAAI,CAAC,kBAAkB,EAAE;SAChC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,KAAK,CAAC,OAAO;QACrB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;gBAC/D,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;iBAAM,CAAC;gBACN,OAAO,IAAI,CAAC,IAAI,CAAC;YACnB,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;YACf,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YAC7B,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;SACtC,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,kBAAkB;QAChC,IAAI,CAAC;YACH,OAAO,kBAAkB,CAAC;gBACxB,GAAG,EAAE,qBAAqB;gBAC1B,YAAY,EAAE,eAAe;gBAC7B,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;aAC5D,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;CACF","sourcesContent":["import {\n  BaseSmartContractAccount,\n  SmartAccountProvider,\n  type SignTypedDataParams,\n  type SmartAccountSigner,\n  type BaseSmartAccountParams,\n  type BatchUserOperationCallData,\n  type UserOperationCallData,\n} from \"@alchemy/aa-core\";\nimport {\n  concatHex,\n  decodeFunctionResult,\n  encodeFunctionData,\n  type Address,\n  type FallbackTransport,\n  type Hash,\n  type Hex,\n  type Transport,\n  numberToHex,\n  hexToBytes,\n} from \"viem\";\nimport { NaniAccountAbi } from \"./abis/NaniAccountAbi.js\";\nimport { NaniAccountFactoryAbi } from \"./abis/NaniAccountFactoryAbi.js\";\n\nexport interface NaniSmartAccountParams<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends BaseSmartAccountParams<TTransport> {\n  owner: SmartAccountSigner;\n  index?: bigint;\n  salt?: Hex;\n}\n\nexport class NaniAccount<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends BaseSmartContractAccount<TTransport> {\n  protected owner: SmartAccountSigner;\n  private readonly index: bigint;\n  protected salt?: Hex;\n\n  constructor(params: NaniSmartAccountParams<TTransport>) {\n    super(params);\n\n    this.index = params.index ?? 0n;\n    this.owner = params.owner;\n    this.salt = params.salt;\n  }\n\n  override async signTypedData(params: SignTypedDataParams): Promise<Hash> {\n    return this.owner.signTypedData(params);\n  }\n\n  /**\n   * Returns the on-chain EOA owner address of the account.\n   *\n   * @returns {Address} the on-chain EOA owner of the account\n   */\n  async getOwnerAddress(): Promise<Address> {\n    const callResult = await this.rpcProvider.call({\n      to: await this.getAddress(),\n      data: encodeFunctionData({\n        abi: NaniAccountAbi,\n        functionName: \"owner\",\n      }),\n    });\n\n    if (callResult.data == null) {\n      throw new Error(\"could not get on-chain owner\");\n    }\n\n    const decodedCallResult = decodeFunctionResult({\n      abi: NaniAccountAbi,\n      functionName: \"owner\",\n      data: callResult.data,\n    });\n\n    if (decodedCallResult !== (await this.owner.getAddress())) {\n      throw new Error(\"on-chain owner does not match account owner\");\n    }\n\n    return decodedCallResult;\n  }\n\n  async getAddress(): Promise<Address> {\n    const callResult = await this.rpcProvider.call({\n      to: this.factoryAddress,\n      data: encodeFunctionData({\n        abi: NaniAccountFactoryAbi,\n        functionName: \"getAddress\",\n        args: [await this.getSalt()],\n      }),\n    });\n\n    if (callResult.data == null) {\n      throw new Error(\"could not get deterministic address\");\n    }\n\n    const decodedCallResult = decodeFunctionResult({\n      abi: NaniAccountFactoryAbi,\n      functionName: \"getAddress\",\n      data: callResult.data,\n    });\n\n    return decodedCallResult;\n  }\n\n  getDummySignature(): Hex {\n    return \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n  }\n\n  signMessage(msg: Uint8Array | string): Promise<Hex> {\n    if (typeof msg === \"string\" && msg.startsWith(\"0x\")) {\n      msg = hexToBytes(msg as Hex);\n    } else if (typeof msg === \"string\") {\n      msg = new TextEncoder().encode(msg);\n    }\n\n    return this.owner.signMessage(msg);\n  }\n\n  async encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex> {\n    return encodeFunctionData({\n      abi: NaniAccountAbi,\n      functionName: \"execute\",\n      args: [target, value, data],\n    });\n  }\n\n  override async encodeBatchExecute(\n    calls: BatchUserOperationCallData\n  ): Promise<Hex> {\n    return encodeFunctionData({\n      abi: NaniAccountAbi,\n      functionName: \"executeBatch\",\n      args: [\n        calls.map((call: Exclude<UserOperationCallData, Hex>) => ({\n          ...call,\n          value: call.value ?? 0n,\n        })),\n      ],\n    });\n  }\n\n  /**\n   * Encodes the delegateExecute function call using Nani Account ABI.\n   *\n   * @param delegate - the delegate to execute the function call\n   * @param data - the data to be passed to the function call\n   * @returns {Hex} the encoded function call\n   */\n  static encodeExecuteDelegate(delegate: Address, data: Hex): Hex {\n    return encodeFunctionData({\n      abi: NaniAccountAbi,\n      functionName: \"delegateExecute\",\n      args: [delegate, data],\n    });\n  }\n\n  /**\n   * Encodes the transferOwnership function call using Nani Account ABI.\n   *\n   * @param newOwner - the new owner of the account\n   * @returns {Hex} the encoded function call\n   */\n  static encodeTransferOwnership(newOwner: Address): Hex {\n    return encodeFunctionData({\n      abi: NaniAccountAbi,\n      functionName: \"transferOwnership\",\n      args: [newOwner],\n    });\n  }\n\n  /**\n   * Transfers ownership of the account to the newOwner on-chain and also updates the owner of the account.\n   * Optionally waits for the transaction to be mined.\n   *\n   * @param provider - the provider to use to send the transaction\n   * @param newOwner - the new owner of the account\n   * @param waitForTxn - whether or not to wait for the transaction to be mined\n   * @returns {Hash} the userOperation hash, or transaction hash if `waitForTxn` is true\n   */\n  static async transferOwnership<\n    TTransport extends Transport | FallbackTransport = Transport\n  >(\n    provider: SmartAccountProvider<TTransport> & {\n      account: NaniAccount<TTransport>;\n    },\n    newOwner: SmartAccountSigner,\n    waitForTxn: boolean = false\n  ): Promise<Hash> {\n    const data = this.encodeTransferOwnership(await newOwner.getAddress());\n    const result = await provider.sendUserOperation({\n      target: await provider.getAddress(),\n      data,\n    });\n\n    provider.account.owner = newOwner;\n\n    if (waitForTxn) {\n      return provider.waitForUserOperationTransaction(result.hash);\n    }\n\n    return result.hash;\n  }\n\n  protected override async getAccountInitCode(): Promise<`0x${string}`> {\n    const result = await concatHex([\n      this.factoryAddress,\n      await this.getFactoryInitCode(),\n    ]);\n\n    return result;\n  }\n\n  protected async getSalt(): Promise<Hex> {\n    if (this.salt) {\n      if (this.salt.slice(0, 42) !== (await this.owner.getAddress())) {\n        throw new Error(\"Salt does not match owner\");\n      } else {\n        return this.salt;\n      }\n    }\n\n    return concatHex([\n      await this.owner.getAddress(),\n      numberToHex(this.index, { size: 12 }),\n    ]);\n  }\n\n  protected async getFactoryInitCode(): Promise<Hex> {\n    try {\n      return encodeFunctionData({\n        abi: NaniAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [await this.owner.getAddress(), await this.getSalt()],\n      });\n    } catch (err: any) {\n      throw new Error(\"Factory Code generation failed\");\n    }\n  }\n}\n"]}