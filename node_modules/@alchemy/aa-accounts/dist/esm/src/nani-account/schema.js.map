{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../src/nani-account/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EACZ,sCAAsC,GACvC,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,CAAC,MAAM,CAAC;IACrD,KAAK,EAAE,YAAY;IACnB,cAAc,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACzC,4CAA4C,CAC7C;IACD,QAAQ,EAAE,CAAC;SACR,MAAM,EAAE;SACR,MAAM,CAAC,KAAK,EAAE,+BAA+B,CAAC;SAC9C,QAAQ,EAAE;SACV,QAAQ,CAAC,8CAA8C,CAAC;IAC3D,cAAc,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACzC,4EAA4E,CAC7E;IACD,IAAI,EAAE,CAAC;SACJ,MAAM,EAAE;SACR,MAAM,CAAC,KAAK,EAAE,0BAA0B,CAAC;SACzC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,EAAE,EAAE,uBAAuB,CAAC;SACvD,QAAQ,EAAE;SACV,QAAQ,CAAC,yCAAyC,CAAC;IACtD,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,EAAE;SACV,QAAQ,CAAC,0CAA0C,CAAC;CACxD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,+BAA+B,GAC1C,sCAAsC,EAAE,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC","sourcesContent":["import {\n  SignerSchema,\n  createSmartAccountProviderConfigSchema,\n} from \"@alchemy/aa-core\";\nimport { Address } from \"abitype/zod\";\nimport { isHex } from \"viem\";\nimport { z } from \"zod\";\n\nexport const NaniAccountFactoryConfigSchema = z.object({\n  owner: SignerSchema,\n  accountAddress: Address.optional().describe(\n    \"Optional override for the account address.\"\n  ),\n  initCode: z\n    .string()\n    .refine(isHex, \"initCode must be a valid hex.\")\n    .optional()\n    .describe(\"Optional override for the account init code.\"),\n  factoryAddress: Address.optional().describe(\n    \"Optional override for the factory address which deploys the smart account.\"\n  ),\n  salt: z\n    .string()\n    .refine(isHex, \"salt must be a valid hex\")\n    .refine((s) => s.length === 66, \"salt must be 32 bytes\")\n    .optional()\n    .describe(\"Optional override for the account salt.\"),\n  index: z\n    .bigint()\n    .optional()\n    .describe(\"Optional override for the account index.\"),\n});\n\nexport const NaniAccountProviderConfigSchema =\n  createSmartAccountProviderConfigSchema().and(NaniAccountFactoryConfigSchema);\n"]}