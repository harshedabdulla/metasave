import { SimpleSmartContractAccount, type ISmartAccountProvider, type SignTypedDataParams, type SmartAccountSigner } from "@alchemy/aa-core";
import { type Address, type FallbackTransport, type Hash, type Hex, type Transport } from "viem";
import { type LightAccountVersion } from "./utils.js";
export declare class LightSmartContractAccount<TTransport extends Transport | FallbackTransport = Transport> extends SimpleSmartContractAccount<TTransport> {
    signMessage(msg: string | Uint8Array): Promise<`0x${string}`>;
    signTypedData(params: SignTypedDataParams): Promise<`0x${string}`>;
    signUserOperationHash(uoHash: `0x${string}`): Promise<`0x${string}`>;
    getLightAccountVersion: () => Promise<LightAccountVersion>;
    private signWith1271Wrapper;
    getOwnerAddress(): Promise<Address>;
    encodeUpgradeToAndCall: (upgradeToImplAddress: Address, upgradeToInitData: Hex) => Promise<Hex>;
    static encodeTransferOwnership(newOwner: Address): Hex;
    static transferOwnership<P extends ISmartAccountProvider, TTransport extends Transport | FallbackTransport = Transport>(provider: P & {
        account: LightSmartContractAccount<TTransport>;
    }, newOwner: SmartAccountSigner, waitForTxn?: boolean): Promise<Hash>;
    protected getAccountInitCode(): Promise<`0x${string}`>;
}
