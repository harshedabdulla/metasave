{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/provider/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { Address } from \"abitype/zod\";\nimport type { Transport } from \"viem\";\nimport z from \"zod\";\nimport { createPublicErc4337ClientSchema } from \"../client/schema.js\";\nimport type { SupportedTransports } from \"../client/types\";\nimport {\n  BigNumberishRangeSchema,\n  ChainSchema,\n  PercentageSchema,\n} from \"../utils/index.js\";\n\nexport const ConnectionConfigSchema = z.union([\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.string(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n]);\n\nexport const UserOperationFeeOptionsFieldSchema =\n  BigNumberishRangeSchema.merge(PercentageSchema).partial();\n\nexport const UserOperationFeeOptionsSchema = z\n  .object({\n    maxFeePerGas: UserOperationFeeOptionsFieldSchema,\n    maxPriorityFeePerGas: UserOperationFeeOptionsFieldSchema,\n    callGasLimit: UserOperationFeeOptionsFieldSchema,\n    verificationGasLimit: UserOperationFeeOptionsFieldSchema,\n    preVerificationGas: UserOperationFeeOptionsFieldSchema,\n  })\n  .partial()\n  .strict();\n\nexport const SmartAccountProviderOptsSchema = z\n  .object({\n    /**\n     * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)\n     */\n    txMaxRetries: z.number().min(0).optional().default(5),\n\n    /**\n     * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000)\n     */\n    txRetryIntervalMs: z.number().min(0).optional().default(2_000),\n\n    /**\n     * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)\n     */\n    txRetryMulitplier: z.number().min(0).optional().default(1.5),\n\n    /**\n     * Optional user operation fee options to be set globally at the provider level\n     */\n    feeOptions: UserOperationFeeOptionsSchema.optional(),\n  })\n  .strict();\n\nexport const createSmartAccountProviderConfigSchema = <\n  TTransport extends SupportedTransports = Transport\n>() => {\n  return z.object({\n    rpcProvider: z.union([\n      z.string(),\n      createPublicErc4337ClientSchema<TTransport>(),\n    ]),\n    chain: ChainSchema,\n    /**\n     * Optional entry point contract address for override if needed.\n     * If not provided, the entry point contract address for the provider is the connected account's entry point contract,\n     * or if not connected, falls back to the default entry point contract for the chain.\n     *\n     * Refer to https://docs.alchemy.com/reference/eth-supportedentrypoints for all the supported entrypoints\n     * when using Alchemy as your RPC provider.\n     */\n    entryPointAddress: Address.optional(),\n    opts: SmartAccountProviderOptsSchema.optional().default(\n      SmartAccountProviderOptsSchema.parse({})\n    ),\n  });\n};\n"]}