{"version":3,"file":"wallet-client.js","sourceRoot":"","sources":["../../../src/signer/wallet-client.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,KAAK,GAIN,MAAM,MAAM,CAAC;AAId,MAAM,OAAO,kBAAkB;IAI7B,YAAY,MAAoB,EAAE,UAAkB;QAHpD;;;;;WAAmB;QACnB;;;;;WAAoB;QAUpB;;;;mBAA2C,KAAK,IAAI,EAAE;gBACpD,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;gBAChD,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;WAAC;QAEO;;;;mBAEqB,KAAK,EAAE,OAAO,EAAE,EAAE;gBAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;oBACnD,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;wBAC5B,OAAO;wBACP,OAAO;qBACR,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;wBAC5B,OAAO;wBACP,OAAO,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;qBAC1B,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;WAAC;QAEF;;;;mBACE,KAAK,EAAE,MAAM,EAAE,EAAE;gBACf,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBAC9B,OAAO;oBACP,GAAG,MAAM;iBACV,CAAC,CAAC;YACL,CAAC;WAAC;QAtCF,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CAkCF","sourcesContent":["import {\n  getAddress,\n  isHex,\n  type ByteArray,\n  type Hex,\n  type WalletClient,\n} from \"viem\";\nimport type { SignTypedDataParams } from \"../account/types\";\nimport type { SmartAccountSigner } from \"./types\";\n\nexport class WalletClientSigner implements SmartAccountSigner<WalletClient> {\n  signerType: string;\n  inner: WalletClient;\n\n  constructor(client: WalletClient, signerType: string) {\n    this.inner = client;\n    if (!signerType) {\n      throw new Error(\"Valid signerType param is required.\");\n    }\n    this.signerType = signerType;\n  }\n\n  getAddress: () => Promise<`0x${string}`> = async () => {\n    let addresses = await this.inner.getAddresses();\n    return getAddress(addresses[0]);\n  };\n\n  readonly signMessage: (\n    message: string | Hex | ByteArray\n  ) => Promise<`0x${string}`> = async (message) => {\n    const account = this.inner.account ?? (await this.getAddress());\n\n    if (typeof message === \"string\" && !isHex(message)) {\n      return this.inner.signMessage({\n        account,\n        message,\n      });\n    } else {\n      return this.inner.signMessage({\n        account,\n        message: { raw: message },\n      });\n    }\n  };\n\n  signTypedData: (params: SignTypedDataParams) => Promise<`0x${string}`> =\n    async (params) => {\n      const account = this.inner.account ?? (await this.getAddress());\n\n      return this.inner.signTypedData({\n        account,\n        ...params,\n      });\n    };\n}\n"]}