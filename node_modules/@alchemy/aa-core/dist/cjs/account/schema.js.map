{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/account/schema.ts"],"names":[],"mappings":";;;;;;AAAA,qCAAsC;AACtC,+BAA6C;AAC7C,8CAAoB;AACpB,mDAAsE;AAEtE,mDAA+C;AAE/C,gDAAgD;AAEzC,MAAM,kCAAkC,GAAG,GAG9C,EAAE,CACJ,aAAC,CAAC,MAAM,CAAC;IACP,SAAS,EAAE,aAAC,CAAC,KAAK,CAAC;QACjB,aAAC,CAAC,MAAM,EAAE;QACV,IAAA,2CAA+B,GAAc;KAC9C,CAAC;IACF,cAAc,EAAE,aAAO;IACvB,KAAK,EAAE,aAAC;SACL,MAAM,CAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,oBAAQ,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;SAChE,QAAQ,EAAE;IACb,iBAAiB,EAAE,aAAO,CAAC,QAAQ,EAAE;IACrC,KAAK,EAAE,sBAAW;IAClB,cAAc,EAAE,aAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACzC,4CAA4C,CAC7C;IACD,QAAQ,EAAE,aAAC;SACR,MAAM,EAAE;SACR,MAAM,CAAC,YAAK,EAAE,+BAA+B,CAAC;SAC9C,QAAQ,EAAE;SACV,QAAQ,CAAC,8CAA8C,CAAC;CAC5D,CAAC,CAAC;AAvBQ,QAAA,kCAAkC,sCAuB1C;AAEE,MAAM,8BAA8B,GAAG,GAG1C,EAAE,CACJ,IAAA,0CAAkC,GAAsB,CAAC,MAAM,CAAC;IAC9D,KAAK,EAAE,aAAC,CAAC,MAAM,CAAS,oBAAQ,CAAC;IACjC,KAAK,EAAE,aAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC7B,CAAC,CAAC;AAPQ,QAAA,8BAA8B,kCAOtC","sourcesContent":["import { Address } from \"abitype/zod\";\nimport { isHex, type Transport } from \"viem\";\nimport z from \"zod\";\nimport { createPublicErc4337ClientSchema } from \"../client/schema.js\";\nimport type { SupportedTransports } from \"../client/types\";\nimport { isSigner } from \"../signer/schema.js\";\nimport type { SmartAccountSigner } from \"../signer/types.js\";\nimport { ChainSchema } from \"../utils/index.js\";\n\nexport const createBaseSmartAccountParamsSchema = <\n  TTransport extends SupportedTransports = Transport,\n  TOwner extends SmartAccountSigner | undefined = SmartAccountSigner | undefined\n>() =>\n  z.object({\n    rpcClient: z.union([\n      z.string(),\n      createPublicErc4337ClientSchema<TTransport>(),\n    ]),\n    factoryAddress: Address,\n    owner: z\n      .custom<TOwner>((owner) => (owner ? isSigner(owner) : undefined))\n      .optional(),\n    entryPointAddress: Address.optional(),\n    chain: ChainSchema,\n    accountAddress: Address.optional().describe(\n      \"Optional override for the account address.\"\n    ),\n    initCode: z\n      .string()\n      .refine(isHex, \"initCode must be a valid hex.\")\n      .optional()\n      .describe(\"Optional override for the account init code.\"),\n  });\n\nexport const SimpleSmartAccountParamsSchema = <\n  TTransport extends SupportedTransports = Transport,\n  TOwner extends SmartAccountSigner = SmartAccountSigner\n>() =>\n  createBaseSmartAccountParamsSchema<TTransport, TOwner>().extend({\n    owner: z.custom<TOwner>(isSigner),\n    index: z.bigint().optional(),\n  });\n"]}