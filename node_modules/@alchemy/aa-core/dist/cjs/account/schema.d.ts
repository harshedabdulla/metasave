import { type Transport } from "viem";
import z from "zod";
import type { SupportedTransports } from "../client/types";
import type { SmartAccountSigner } from "../signer/types.js";
export declare const createBaseSmartAccountParamsSchema: <TTransport extends SupportedTransports = Transport, TOwner extends SmartAccountSigner<any> | undefined = SmartAccountSigner<any> | undefined>() => z.ZodObject<{
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    owner: z.ZodOptional<z.ZodType<TOwner, z.ZodTypeDef, TOwner>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    owner: z.ZodOptional<z.ZodType<TOwner, z.ZodTypeDef, TOwner>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}>, "chain" | "rpcClient" | "factoryAddress" | (undefined extends TOwner | undefined ? never : "owner")>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    owner: z.ZodOptional<z.ZodType<TOwner, z.ZodTypeDef, TOwner>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}>, "chain" | "rpcClient" | "factoryAddress" | (undefined extends TOwner | undefined ? never : "owner")>[k_1]; }, { [k_2 in keyof z.baseObjectInputType<{
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    owner: z.ZodOptional<z.ZodType<TOwner, z.ZodTypeDef, TOwner>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}>]: z.baseObjectInputType<{
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    owner: z.ZodOptional<z.ZodType<TOwner, z.ZodTypeDef, TOwner>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
}>[k_2]; }>;
export declare const SimpleSmartAccountParamsSchema: <TTransport extends SupportedTransports = Transport, TOwner extends SmartAccountSigner<any> = SmartAccountSigner<any>>() => z.ZodObject<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owner: z.ZodType<TOwner, z.ZodTypeDef, TOwner>;
    index: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owner: z.ZodType<TOwner, z.ZodTypeDef, TOwner>;
    index: z.ZodOptional<z.ZodBigInt>;
}>, "chain" | "rpcClient" | "factoryAddress" | (undefined extends TOwner ? never : "owner")> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owner: z.ZodType<TOwner, z.ZodTypeDef, TOwner>;
    index: z.ZodOptional<z.ZodBigInt>;
}>, "chain" | "rpcClient" | "factoryAddress" | (undefined extends TOwner ? never : "owner")>[k]; } : never, z.baseObjectInputType<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owner: z.ZodType<TOwner, z.ZodTypeDef, TOwner>;
    index: z.ZodOptional<z.ZodBigInt>;
}> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<{
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    rpcClient: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    factoryAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    owner: z.ZodType<TOwner, z.ZodTypeDef, TOwner>;
    index: z.ZodOptional<z.ZodBigInt>;
}>[k_1]; } : never>;
