{"abi":[{"type":"function","name":"DEFAULT_ADMIN_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"TRANSFER_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getRoleAdmin","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getRoleMember","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"member","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getRoleMemberCount","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"count","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"grantRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"hasRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"hasRoleWithSwitch","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"renounceRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"restrictTransfers","inputs":[{"name":"_toRestrict","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokeRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"RoleAdminChanged","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"previousAdminRole","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"newAdminRole","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RoleGranted","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RoleRevoked","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TransfersRestricted","inputs":[{"name":"isRestricted","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"error","name":"PermissionsAlreadyGranted","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"role","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"PermissionsInvalidPermission","inputs":[{"name":"expected","type":"address","internalType":"address"},{"name":"actual","type":"address","internalType":"address"}]},{"type":"error","name":"PermissionsUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"neededRole","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","TRANSFER_ROLE()":"206b60f9","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","hasRoleWithSwitch(bytes32,address)":"a32fa5b3","renounceRole(bytes32,address)":"36568abe","restrictTransfers(bool)":"73fa563f","revokeRole(bytes32,address)":"d547741f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"PermissionsAlreadyGranted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"PermissionsInvalidPermission\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"PermissionsUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRestricted\",\"type\":\"bool\"}],\"name\":\"TransfersRestricted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleWithSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toRestrict\",\"type\":\"bool\"}],\"name\":\"restrictTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"PermissionsAlreadyGranted(address,bytes32)\":[{\"details\":\"The `account` already is a holder of `role`\"}],\"PermissionsInvalidPermission(address,address)\":[{\"details\":\"Invalid priviledge to revoke\"}],\"PermissionsUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.\",\"params\":{\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns `member` who has `role`, at `index` of role-members list.                  See struct {RoleMembers}, and mapping {roleMembers}\",\"params\":{\"index\":\"Index in list of current members for the role.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"},\"returns\":{\"member\":\" Address of account that has `role`\"}},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns `count` of accounts that have `role`.                  See struct {RoleMembers}, and mapping {roleMembers}\",\"params\":{\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"},\"returns\":{\"count\":\"  Total number of accounts that have `role`\"}},\"grantRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.\",\"params\":{\"account\":\"Address of the account to which the role is being granted.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRoleWithSwitch(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"restrictTransfers(bool)\":{\"details\":\"Restricting transfers means revoking the TRANSFER_ROLE from address(0). Making                    transfers unrestricted means granting the TRANSFER_ROLE to address(0).\",\"params\":{\"_toRestrict\":\"Whether to restrict transfers or not.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}}},\"stateVariables\":{\"TRANSFER_ROLE\":{\"details\":\"Only transfers to or from TRANSFER_ROLE holders are valid, when transfers are restricted.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"notice\":\"Returns the admin role that controls the specified role.\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Returns the role-member from a list of members for a role,                  at a given index.\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Returns total number of accounts that have a role.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account, if not previously granted.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role.\"},\"hasRoleWithSwitch(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role;                  role restrictions can be swtiched on and off.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes role from the account.\"},\"restrictTransfers(bool)\":{\"notice\":\"Restrict transfers of NFTs.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes role from an account.\"}},\"notice\":\"The `SoulboundERC721A` extension smart contract is meant to be used with ERC721A contracts as its base. It  provides the appropriate `before transfer` hook for ERC721A, where it checks whether a given transfer is  valid to go through or not.  This contract uses the `Permissions` extension, and creates a role 'TRANSFER_ROLE'.      - If `address(0)` holds the transfer role, then all transfers go through.      - Else, a transfer goes through only if either the sender or recipient holds the transfe role.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/SoulboundERC721A.sol\":\"SoulboundERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/Permissions.sol\":{\"keccak256\":\"0x37bd3bb30ecb3e927ceeef6f06c91dbcf1b26a67f89fe4da668667410d8e9f3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6b5f6ffbcfeaa1dfc3af7998ebed5874e5086ff85d24d4e2a3fdfc1e0c43fbf1\",\"dweb:/ipfs/QmcEhkjLGEsPseuowokqk2FJpNscmNDaxwJx6rDCjoZwKc\"]},\"contracts/extension/PermissionsEnumerable.sol\":{\"keccak256\":\"0x434a6ffc16ddc437ffb37b8fbe4c9696385252f15a617c4606b8c5e10561caf3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1a9d4dac4bf2ae3c3c086af1956dc25e8b149b0914125e660cc0648791c247cb\",\"dweb:/ipfs/QmTMEggPdBea1JCamsShwRf3en2FgVTXNTPJ2isFtBk4Kk\"]},\"contracts/extension/SoulboundERC721A.sol\":{\"keccak256\":\"0xba90e07db761a1c1f9c92e425079a2c94ddffa154247e26c2c042e8f7481c34c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://615165118f853468cd6f92ef1ede4b3046721600cbee3b132f71e331f1f1e719\",\"dweb:/ipfs/QmazYKnWsMTRrfQZBybC8TF6aJ2EBdx3nkmQBzYFUwENN5\"]},\"contracts/extension/interface/IPermissions.sol\":{\"keccak256\":\"0xc0cd1f87bac474a06f85e2b341b9b57662aee957fc24180d42c872481c2f2ae3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7dec3eed451d63867531d693f0be3279fa2c9aef3130f0826c3520c06820fa5d\",\"dweb:/ipfs/QmTYANrcPdd9SCe99DWsKJ19evNRQKQGZeoS1Keew4M2cS\"]},\"contracts/extension/interface/IPermissionsEnumerable.sol\":{\"keccak256\":\"0x2e742c18a4481bad41d56424cd16c52def2fb415f69e5fb5f67d8d979300ff95\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d9be33bb865e3e82aca540a3e38cbc2bf2e431f9d1bf39c50d6c757e7b7bf3ee\",\"dweb:/ipfs/Qmdad1Xqj5SQ44Bk4bwD2uA36XnGHtqnVYSomKZQvnUBVG\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"role","type":"bytes32"}],"type":"error","name":"PermissionsAlreadyGranted"},{"inputs":[{"internalType":"address","name":"expected","type":"address"},{"internalType":"address","name":"actual","type":"address"}],"type":"error","name":"PermissionsInvalidPermission"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"type":"error","name":"PermissionsUnauthorizedAccount"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32","indexed":true},{"internalType":"bytes32","name":"previousAdminRole","type":"bytes32","indexed":true},{"internalType":"bytes32","name":"newAdminRole","type":"bytes32","indexed":true}],"type":"event","name":"RoleAdminChanged","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32","indexed":true},{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":true}],"type":"event","name":"RoleGranted","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32","indexed":true},{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":true}],"type":"event","name":"RoleRevoked","anonymous":false},{"inputs":[{"internalType":"bool","name":"isRestricted","type":"bool","indexed":false}],"type":"event","name":"TransfersRestricted","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"TRANSFER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRoleMember","outputs":[{"internalType":"address","name":"member","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"grantRole"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"hasRoleWithSwitch","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"renounceRole"},{"inputs":[{"internalType":"bool","name":"_toRestrict","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"restrictTransfers"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"revokeRole"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.","params":{"role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}},"getRoleMember(bytes32,uint256)":{"details":"Returns `member` who has `role`, at `index` of role-members list.                  See struct {RoleMembers}, and mapping {roleMembers}","params":{"index":"Index in list of current members for the role.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"},"returns":{"member":" Address of account that has `role`"}},"getRoleMemberCount(bytes32)":{"details":"Returns `count` of accounts that have `role`.                  See struct {RoleMembers}, and mapping {roleMembers}","params":{"role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"},"returns":{"count":"  Total number of accounts that have `role`"}},"grantRole(bytes32,address)":{"details":"Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.","params":{"account":"Address of the account to which the role is being granted.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`.","params":{"account":"Address of the account for which the role is being checked.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}},"hasRoleWithSwitch(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.","params":{"account":"Address of the account for which the role is being checked.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}},"renounceRole(bytes32,address)":{"details":"Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.","params":{"account":"Address of the account from which the role is being revoked.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}},"restrictTransfers(bool)":{"details":"Restricting transfers means revoking the TRANSFER_ROLE from address(0). Making                    transfers unrestricted means granting the TRANSFER_ROLE to address(0).","params":{"_toRestrict":"Whether to restrict transfers or not."}},"revokeRole(bytes32,address)":{"details":"Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.","params":{"account":"Address of the account from which the role is being revoked.","role":"keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"}}},"version":1},"userdoc":{"kind":"user","methods":{"getRoleAdmin(bytes32)":{"notice":"Returns the admin role that controls the specified role."},"getRoleMember(bytes32,uint256)":{"notice":"Returns the role-member from a list of members for a role,                  at a given index."},"getRoleMemberCount(bytes32)":{"notice":"Returns total number of accounts that have a role."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account, if not previously granted."},"hasRole(bytes32,address)":{"notice":"Checks whether an account has a particular role."},"hasRoleWithSwitch(bytes32,address)":{"notice":"Checks whether an account has a particular role;                  role restrictions can be swtiched on and off."},"renounceRole(bytes32,address)":{"notice":"Revokes role from the account."},"restrictTransfers(bool)":{"notice":"Restrict transfers of NFTs."},"revokeRole(bytes32,address)":{"notice":"Revokes role from an account."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/SoulboundERC721A.sol":"SoulboundERC721A"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/Permissions.sol":{"keccak256":"0x37bd3bb30ecb3e927ceeef6f06c91dbcf1b26a67f89fe4da668667410d8e9f3f","urls":["bzz-raw://6b5f6ffbcfeaa1dfc3af7998ebed5874e5086ff85d24d4e2a3fdfc1e0c43fbf1","dweb:/ipfs/QmcEhkjLGEsPseuowokqk2FJpNscmNDaxwJx6rDCjoZwKc"],"license":"Apache-2.0"},"contracts/extension/PermissionsEnumerable.sol":{"keccak256":"0x434a6ffc16ddc437ffb37b8fbe4c9696385252f15a617c4606b8c5e10561caf3","urls":["bzz-raw://1a9d4dac4bf2ae3c3c086af1956dc25e8b149b0914125e660cc0648791c247cb","dweb:/ipfs/QmTMEggPdBea1JCamsShwRf3en2FgVTXNTPJ2isFtBk4Kk"],"license":"Apache-2.0"},"contracts/extension/SoulboundERC721A.sol":{"keccak256":"0xba90e07db761a1c1f9c92e425079a2c94ddffa154247e26c2c042e8f7481c34c","urls":["bzz-raw://615165118f853468cd6f92ef1ede4b3046721600cbee3b132f71e331f1f1e719","dweb:/ipfs/QmazYKnWsMTRrfQZBybC8TF6aJ2EBdx3nkmQBzYFUwENN5"],"license":"Apache-2.0"},"contracts/extension/interface/IPermissions.sol":{"keccak256":"0xc0cd1f87bac474a06f85e2b341b9b57662aee957fc24180d42c872481c2f2ae3","urls":["bzz-raw://7dec3eed451d63867531d693f0be3279fa2c9aef3130f0826c3520c06820fa5d","dweb:/ipfs/QmTYANrcPdd9SCe99DWsKJ19evNRQKQGZeoS1Keew4M2cS"],"license":"Apache-2.0"},"contracts/extension/interface/IPermissionsEnumerable.sol":{"keccak256":"0x2e742c18a4481bad41d56424cd16c52def2fb415f69e5fb5f67d8d979300ff95","urls":["bzz-raw://d9be33bb865e3e82aca540a3e38cbc2bf2e431f9d1bf39c50d6c757e7b7bf3ee","dweb:/ipfs/Qmdad1Xqj5SQ44Bk4bwD2uA36XnGHtqnVYSomKZQvnUBVG"],"license":"Apache-2.0"},"contracts/lib/Strings.sol":{"keccak256":"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568","urls":["bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb","dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/SoulboundERC721A.sol","id":25217,"exportedSymbols":{"IPermissions":[34226],"IPermissionsEnumerable":[34251],"Permissions":[22341],"PermissionsEnumerable":[22641],"SoulboundERC721A":[25216],"Strings":[66570]},"nodeType":"SourceUnit","src":"39:2144:87","nodes":[{"id":25114,"nodeType":"PragmaDirective","src":"39:23:87","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":25115,"nodeType":"ImportDirective","src":"86:37:87","nodes":[],"absolutePath":"contracts/extension/PermissionsEnumerable.sol","file":"./PermissionsEnumerable.sol","nameLocation":"-1:-1:-1","scope":25217,"sourceUnit":22642,"symbolAliases":[],"unitAlias":""},{"id":25216,"nodeType":"ContractDefinition","src":"662:1520:87","nodes":[{"id":25124,"nodeType":"VariableDeclaration","src":"831:66:87","nodes":[],"constant":true,"documentation":{"id":25119,"nodeType":"StructuredDocumentation","src":"728:98:87","text":"@dev Only transfers to or from TRANSFER_ROLE holders are valid, when transfers are restricted."},"functionSelector":"206b60f9","mutability":"constant","name":"TRANSFER_ROLE","nameLocation":"855:13:87","scope":25216,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"831:7:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5452414e534645525f524f4c45","id":25122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"881:15:87","typeDescriptions":{"typeIdentifier":"t_stringliteral_8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c","typeString":"literal_string \"TRANSFER_ROLE\""},"value":"TRANSFER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c","typeString":"literal_string \"TRANSFER_ROLE\""}],"id":25121,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"871:9:87","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":25123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:26:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":25128,"nodeType":"EventDefinition","src":"904:45:87","nodes":[],"anonymous":false,"eventSelector":"2ebd4f59eaa9d49c5dcd06a0afa8b39bf09928fbd60111acee2f986fa485d098","name":"TransfersRestricted","nameLocation":"910:19:87","parameters":{"id":25127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25126,"indexed":false,"mutability":"mutable","name":"isRestricted","nameLocation":"935:12:87","nodeType":"VariableDeclaration","scope":25128,"src":"930:17:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":25125,"name":"bool","nodeType":"ElementaryTypeName","src":"930:4:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"929:19:87"}},{"id":25155,"nodeType":"FunctionDefinition","src":"1299:224:87","nodes":[],"body":{"id":25154,"nodeType":"Block","src":"1359:164:87","nodes":[],"statements":[{"condition":{"id":25134,"name":"_toRestrict","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25131,"src":"1373:11:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":25152,"nodeType":"Block","src":"1455:62:87","statements":[{"expression":{"arguments":[{"id":25145,"name":"TRANSFER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25124,"src":"1480:13:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":25148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1503:1:87","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":25147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1495:7:87","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":25146,"name":"address","nodeType":"ElementaryTypeName","src":"1495:7:87","typeDescriptions":{}}},"id":25149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1495:10:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":25144,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[22565],"referencedDeclaration":22565,"src":"1469:10:87","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":25150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1469:37:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25151,"nodeType":"ExpressionStatement","src":"1469:37:87"}]},"id":25153,"nodeType":"IfStatement","src":"1369:148:87","trueBody":{"id":25143,"nodeType":"Block","src":"1386:63:87","statements":[{"expression":{"arguments":[{"id":25136,"name":"TRANSFER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25124,"src":"1412:13:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":25139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1435:1:87","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":25138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1427:7:87","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":25137,"name":"address","nodeType":"ElementaryTypeName","src":"1427:7:87","typeDescriptions":{}}},"id":25140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1427:10:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":25135,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[22543],"referencedDeclaration":22543,"src":"1400:11:87","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":25141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1400:38:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25142,"nodeType":"ExpressionStatement","src":"1400:38:87"}]}}]},"documentation":{"id":25129,"nodeType":"StructuredDocumentation","src":"955:339:87","text":"  @notice           Restrict transfers of NFTs.\n  @dev              Restricting transfers means revoking the TRANSFER_ROLE from address(0). Making\n                    transfers unrestricted means granting the TRANSFER_ROLE to address(0).\n  @param _toRestrict Whether to restrict transfers or not."},"functionSelector":"73fa563f","implemented":true,"kind":"function","modifiers":[],"name":"restrictTransfers","nameLocation":"1308:17:87","parameters":{"id":25132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25131,"mutability":"mutable","name":"_toRestrict","nameLocation":"1331:11:87","nodeType":"VariableDeclaration","scope":25155,"src":"1326:16:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":25130,"name":"bool","nodeType":"ElementaryTypeName","src":"1326:4:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1325:18:87"},"returnParameters":{"id":25133,"nodeType":"ParameterList","parameters":[],"src":"1359:0:87"},"scope":25216,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":25161,"nodeType":"FunctionDefinition","src":"1616:70:87","nodes":[],"documentation":{"id":25156,"nodeType":"StructuredDocumentation","src":"1529:82:87","text":"@dev Returns whether transfers can be restricted in a given execution context."},"implemented":false,"kind":"function","modifiers":[],"name":"_canRestrictTransfers","nameLocation":"1625:21:87","parameters":{"id":25157,"nodeType":"ParameterList","parameters":[],"src":"1646:2:87"},"returnParameters":{"id":25160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":25161,"src":"1680:4:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":25158,"name":"bool","nodeType":"ElementaryTypeName","src":"1680:4:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1679:6:87"},"scope":25216,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":25215,"nodeType":"FunctionDefinition","src":"1742:438:87","nodes":[],"body":{"id":25214,"nodeType":"Block","src":"1834:346:87","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":25194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":25187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":25180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1948:35:87","subExpression":{"arguments":[{"id":25174,"name":"TRANSFER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25124,"src":"1957:13:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":25177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:1:87","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":25176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1972:7:87","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":25175,"name":"address","nodeType":"ElementaryTypeName","src":"1972:7:87","typeDescriptions":{}}},"id":25178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1972:10:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":25173,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22089,"src":"1949:7:87","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":25179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:34:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":25186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":25181,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25164,"src":"1987:4:87","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":25184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2003:1:87","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":25183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1995:7:87","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":25182,"name":"address","nodeType":"ElementaryTypeName","src":"1995:7:87","typeDescriptions":{}}},"id":25185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1995:10:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1987:18:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1948:57:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":25193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":25188,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25166,"src":"2009:2:87","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":25191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:87","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":25190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:87","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":25189,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:87","typeDescriptions":{}}},"id":25192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2009:16:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1948:77:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":25213,"nodeType":"IfStatement","src":"1944:230:87","trueBody":{"id":25212,"nodeType":"Block","src":"2027:147:87","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":25205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":25199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2045:29:87","subExpression":{"arguments":[{"id":25196,"name":"TRANSFER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25124,"src":"2054:13:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":25197,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25164,"src":"2069:4:87","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":25195,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22089,"src":"2046:7:87","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":25198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2046:28:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":25204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2078:27:87","subExpression":{"arguments":[{"id":25201,"name":"TRANSFER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25124,"src":"2087:13:87","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":25202,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25166,"src":"2102:2:87","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":25200,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22089,"src":"2079:7:87","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":25203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2079:26:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2045:60:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":25211,"nodeType":"IfStatement","src":"2041:123:87","trueBody":{"id":25210,"nodeType":"Block","src":"2107:57:87","statements":[{"expression":{"arguments":[{"hexValue":"215452414e534645525f524f4c45","id":25207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2132:16:87","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ea1468ca8317e9b6840862ccf0a85b5fb83560bab47947c35ac0dba17fc72ad","typeString":"literal_string \"!TRANSFER_ROLE\""},"value":"!TRANSFER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9ea1468ca8317e9b6840862ccf0a85b5fb83560bab47947c35ac0dba17fc72ad","typeString":"literal_string \"!TRANSFER_ROLE\""}],"id":25206,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2125:6:87","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":25208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2125:24:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25209,"nodeType":"ExpressionStatement","src":"2125:24:87"}]}}]}}]},"documentation":{"id":25162,"nodeType":"StructuredDocumentation","src":"1692:45:87","text":"@dev See {ERC721A-_beforeTokenTransfers}."},"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfers","nameLocation":"1751:21:87","parameters":{"id":25171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25164,"mutability":"mutable","name":"from","nameLocation":"1781:4:87","nodeType":"VariableDeclaration","scope":25215,"src":"1773:12:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":25163,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:87","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":25166,"mutability":"mutable","name":"to","nameLocation":"1795:2:87","nodeType":"VariableDeclaration","scope":25215,"src":"1787:10:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":25165,"name":"address","nodeType":"ElementaryTypeName","src":"1787:7:87","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":25168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":25215,"src":"1799:7:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":25170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":25215,"src":"1808:7:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1808:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1772:44:87"},"returnParameters":{"id":25172,"nodeType":"ParameterList","parameters":[],"src":"1834:0:87"},"scope":25216,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":25117,"name":"PermissionsEnumerable","nameLocations":["700:21:87"],"nodeType":"IdentifierPath","referencedDeclaration":22641,"src":"700:21:87"},"id":25118,"nodeType":"InheritanceSpecifier","src":"700:21:87"}],"canonicalName":"SoulboundERC721A","contractDependencies":[],"contractKind":"contract","documentation":{"id":25116,"nodeType":"StructuredDocumentation","src":"125:535:87","text":"  The `SoulboundERC721A` extension smart contract is meant to be used with ERC721A contracts as its base. It\n  provides the appropriate `before transfer` hook for ERC721A, where it checks whether a given transfer is\n  valid to go through or not.\n  This contract uses the `Permissions` extension, and creates a role 'TRANSFER_ROLE'.\n      - If `address(0)` holds the transfer role, then all transfers go through.\n      - Else, a transfer goes through only if either the sender or recipient holds the transfe role."},"fullyImplemented":false,"linearizedBaseContracts":[25216,22641,22341,34251,34226],"name":"SoulboundERC721A","nameLocation":"680:16:87","scope":25217,"usedErrors":[22028,22035,22042],"usedEvents":[25128,34165,34174,34183]}],"license":"Apache-2.0"},"id":87}