{"abi":[{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfBatch","inputs":[{"name":"accounts","type":"address[]","internalType":"address[]"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"claim","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"quantity","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"allowlistProof","type":"tuple","internalType":"struct IDropERC1155.AllowlistProof","components":[{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"},{"name":"maxQuantityInAllowlist","type":"uint256","internalType":"uint256"}]},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lazyMint","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"baseURIForTokens","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeBatchTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setClaimConditions","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"phases","type":"tuple[]","internalType":"struct IDropClaimCondition.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]},{"name":"resetClaimEligibility","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"ClaimConditionsUpdated","inputs":[{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claimConditions","type":"tuple[]","indexed":false,"internalType":"struct IDropClaimCondition.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]}],"anonymous":false},{"type":"event","name":"MaxTotalSupplyUpdated","inputs":[{"name":"tokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"maxTotalSupply","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SaleRecipientForTokenUpdated","inputs":[{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"saleRecipient","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimConditionIndex","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensLazyMinted","inputs":[{"name":"startTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"endTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"baseURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"TransferBatch","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"ids","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"values","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"TransferSingle","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"id","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"URI","inputs":[{"name":"value","type":"string","indexed":false,"internalType":"string"},{"name":"id","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)":"27db5f08","isApprovedForAll(address,address)":"e985e9c5","lazyMint(uint256,string)":"47158264","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":"ab073c22","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saleRecipient\",\"type\":\"address\"}],\"name\":\"SaleRecipientForTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantityInAllowlist\",\"type\":\"uint256\"}],\"internalType\":\"struct IDropERC1155.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURIForTokens\",\"type\":\"string\"}],\"name\":\"lazyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"ClaimConditionsUpdated(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set for a token.\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"details\":\"Emitted when the global max supply of a token is updated.\"},\"SaleRecipientForTokenUpdated(uint256,address)\":{\"details\":\"Emitted when the sale recipient for a particular tokenId is updated.\"},\"TokensClaimed(uint256,uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"},\"TokensLazyMinted(uint256,uint256,string)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of the NFT to claim.\",\"receiver\":\"The receiver of the NFT to claim.\",\"tokenId\":\"The tokenId of the NFT to claim.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"lazyMint(uint256,string)\":{\"params\":{\"amount\":\"The amount of NFTs to lazy mint.\",\"baseURIForTokens\":\"The URI for the NFTs to lazy mint.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\",\"tokenId\":\"The token ID for which to set mint conditions.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"lazyMint(uint256,string)\":{\"notice\":\"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\"},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC721` contract is a distribution mechanism for ERC721 tokens.  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens  at once by providing a single base URI for all tokens being lazy minted.  The URI for each of the 'n' tokens lazy minted is the provided base URI +  `{tokenId}` of the respective token. (e.g. \\\"ipsf://Qmece.../1\\\").  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/interface/drop/IDropERC1155.sol\":\"IDropERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/prebuilts/interface/drop/IDropClaimCondition.sol\":{\"keccak256\":\"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c\",\"dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j\"]},\"contracts/prebuilts/interface/drop/IDropERC1155.sol\":{\"keccak256\":\"0xb537a512f41e343e8f86a0c153361261ae6ce982d8f163583d5580688236c05f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://93ec4b31a699a7196298fd4114435ffe4ac8b3b263b908f9acb27ffb2c195b7e\",\"dweb:/ipfs/QmNSgvp6XPg8twyFk2cHiXRZJadTKheBKYUMA5WzG4cmBt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\":{\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32c68498e1b6013477d299e4881dcea818d7e4c3e3aba7a18bde3989b12dff83\",\"dweb:/ipfs/QmZzw1eHLQmDLfKbxVivEWUdae2BfTmjSg1aLowuLwScuZ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4\",\"dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true},{"internalType":"struct IDropClaimCondition.ClaimCondition[]","name":"claimConditions","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}],"indexed":false}],"type":"event","name":"ClaimConditionsUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"maxTotalSupply","type":"uint256","indexed":false}],"type":"event","name":"MaxTotalSupplyUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true},{"internalType":"address","name":"saleRecipient","type":"address","indexed":false}],"type":"event","name":"SaleRecipientForTokenUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"claimConditionIndex","type":"uint256","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true},{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":false},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"endTokenId","type":"uint256","indexed":false},{"internalType":"string","name":"baseURI","type":"string","indexed":false}],"type":"event","name":"TokensLazyMinted","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256[]","name":"ids","type":"uint256[]","indexed":false},{"internalType":"uint256[]","name":"values","type":"uint256[]","indexed":false}],"type":"event","name":"TransferBatch","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"id","type":"uint256","indexed":false},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"TransferSingle","anonymous":false},{"inputs":[{"internalType":"string","name":"value","type":"string","indexed":false},{"internalType":"uint256","name":"id","type":"uint256","indexed":true}],"type":"event","name":"URI","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"struct IDropERC1155.AllowlistProof","name":"allowlistProof","type":"tuple","components":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"maxQuantityInAllowlist","type":"uint256"}]},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string","name":"baseURIForTokens","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"lazyMint"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeBatchTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"struct IDropClaimCondition.ClaimCondition[]","name":"phases","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}]},{"internalType":"bool","name":"resetClaimEligibility","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setClaimConditions"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)":{"params":{"allowlistProof":"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.","currency":"The currency in which to pay for the claim.","data":"Arbitrary bytes data that can be leveraged in the implementation of this interface.","pricePerToken":"The price per token to pay for the claim.","quantity":"The quantity of the NFT to claim.","receiver":"The receiver of the NFT to claim.","tokenId":"The tokenId of the NFT to claim."}},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"lazyMint(uint256,string)":{"params":{"amount":"The amount of NFTs to lazy mint.","baseURIForTokens":"The URI for the NFTs to lazy mint."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"params":{"phases":"Claim conditions in ascending order by `startTimestamp`.","resetClaimEligibility":"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.","tokenId":"The token ID for which to set mint conditions."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)":{"notice":"Lets an account claim a given quantity of NFTs."},"lazyMint(uint256,string)":{"notice":"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`."},"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"notice":"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/prebuilts/interface/drop/IDropERC1155.sol":"IDropERC1155"},"evmVersion":"london","libraries":{}},"sources":{"contracts/prebuilts/interface/drop/IDropClaimCondition.sol":{"keccak256":"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629","urls":["bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c","dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j"],"license":"Apache-2.0"},"contracts/prebuilts/interface/drop/IDropERC1155.sol":{"keccak256":"0xb537a512f41e343e8f86a0c153361261ae6ce982d8f163583d5580688236c05f","urls":["bzz-raw://93ec4b31a699a7196298fd4114435ffe4ac8b3b263b908f9acb27ffb2c195b7e","dweb:/ipfs/QmNSgvp6XPg8twyFk2cHiXRZJadTKheBKYUMA5WzG4cmBt"],"license":"Apache-2.0"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol":{"keccak256":"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8","urls":["bzz-raw://32c68498e1b6013477d299e4881dcea818d7e4c3e3aba7a18bde3989b12dff83","dweb:/ipfs/QmZzw1eHLQmDLfKbxVivEWUdae2BfTmjSg1aLowuLwScuZ"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol":{"keccak256":"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09","urls":["bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758","dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol":{"keccak256":"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9","urls":["bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4","dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/prebuilts/interface/drop/IDropERC1155.sol","id":77836,"exportedSymbols":{"BitMapsUpgradeable":[166360],"IDropClaimCondition":[77735],"IDropERC1155":[77835],"IERC1155Upgradeable":[156784],"IERC165Upgradeable":[163710]},"nodeType":"SourceUnit","src":"39:4205:351","nodes":[{"id":77737,"nodeType":"PragmaDirective","src":"39:24:351","nodes":[],"literals":["solidity","^","0.8",".11"]},{"id":77738,"nodeType":"ImportDirective","src":"65:83:351","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","nameLocation":"-1:-1:-1","scope":77836,"sourceUnit":156785,"symbolAliases":[],"unitAlias":""},{"id":77739,"nodeType":"ImportDirective","src":"149:35:351","nodes":[],"absolutePath":"contracts/prebuilts/interface/drop/IDropClaimCondition.sol","file":"./IDropClaimCondition.sol","nameLocation":"-1:-1:-1","scope":77836,"sourceUnit":77736,"symbolAliases":[],"unitAlias":""},{"id":77835,"nodeType":"ContractDefinition","src":"1086:3157:351","nodes":[{"id":77750,"nodeType":"StructDefinition","src":"1159:94:351","nodes":[],"canonicalName":"IDropERC1155.AllowlistProof","members":[{"constant":false,"id":77747,"mutability":"mutable","name":"proof","nameLocation":"1201:5:351","nodeType":"VariableDeclaration","scope":77750,"src":"1191:15:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":77745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1191:7:351","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":77746,"nodeType":"ArrayTypeName","src":"1191:9:351","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":77749,"mutability":"mutable","name":"maxQuantityInAllowlist","nameLocation":"1224:22:351","nodeType":"VariableDeclaration","scope":77750,"src":"1216:30:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AllowlistProof","nameLocation":"1166:14:351","scope":77835,"visibility":"public"},{"id":77763,"nodeType":"EventDefinition","src":"1305:196:351","nodes":[],"anonymous":false,"documentation":{"id":77751,"nodeType":"StructuredDocumentation","src":"1259:41:351","text":"@dev Emitted when tokens are claimed."},"eventSelector":"4f72e6585331094d368e469f11198272039d08cbddfcda1577e192687a83afb6","name":"TokensClaimed","nameLocation":"1311:13:351","parameters":{"id":77762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77753,"indexed":true,"mutability":"mutable","name":"claimConditionIndex","nameLocation":"1350:19:351","nodeType":"VariableDeclaration","scope":77763,"src":"1334:35:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77752,"name":"uint256","nodeType":"ElementaryTypeName","src":"1334:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77755,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1395:7:351","nodeType":"VariableDeclaration","scope":77763,"src":"1379:23:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77754,"name":"uint256","nodeType":"ElementaryTypeName","src":"1379:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77757,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"1428:7:351","nodeType":"VariableDeclaration","scope":77763,"src":"1412:23:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77756,"name":"address","nodeType":"ElementaryTypeName","src":"1412:7:351","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77759,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"1453:8:351","nodeType":"VariableDeclaration","scope":77763,"src":"1445:16:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77758,"name":"address","nodeType":"ElementaryTypeName","src":"1445:7:351","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77761,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"1479:15:351","nodeType":"VariableDeclaration","scope":77763,"src":"1471:23:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77760,"name":"uint256","nodeType":"ElementaryTypeName","src":"1471:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1324:176:351"}},{"id":77772,"nodeType":"EventDefinition","src":"1557:81:351","nodes":[],"anonymous":false,"documentation":{"id":77764,"nodeType":"StructuredDocumentation","src":"1507:45:351","text":"@dev Emitted when tokens are lazy minted."},"eventSelector":"4e6c698792b8dfb7c94c60c7e9e91f82932832d5e1ec0870ed42cf674e6af445","name":"TokensLazyMinted","nameLocation":"1563:16:351","parameters":{"id":77771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77766,"indexed":false,"mutability":"mutable","name":"startTokenId","nameLocation":"1588:12:351","nodeType":"VariableDeclaration","scope":77772,"src":"1580:20:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1580:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77768,"indexed":false,"mutability":"mutable","name":"endTokenId","nameLocation":"1610:10:351","nodeType":"VariableDeclaration","scope":77772,"src":"1602:18:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1602:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77770,"indexed":false,"mutability":"mutable","name":"baseURI","nameLocation":"1629:7:351","nodeType":"VariableDeclaration","scope":77772,"src":"1622:14:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":77769,"name":"string","nodeType":"ElementaryTypeName","src":"1622:6:351","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:58:351"}},{"id":77781,"nodeType":"EventDefinition","src":"1712:88:351","nodes":[],"anonymous":false,"documentation":{"id":77773,"nodeType":"StructuredDocumentation","src":"1644:63:351","text":"@dev Emitted when new claim conditions are set for a token."},"eventSelector":"7822655b74d50f461cbd7ca5dfc8b5e48b21fa2157bd7d277888fccce85af2ae","name":"ClaimConditionsUpdated","nameLocation":"1718:22:351","parameters":{"id":77780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77775,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1757:7:351","nodeType":"VariableDeclaration","scope":77781,"src":"1741:23:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77774,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77779,"indexed":false,"mutability":"mutable","name":"claimConditions","nameLocation":"1783:15:351","nodeType":"VariableDeclaration","scope":77781,"src":"1766:32:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_memory_ptr_$dyn_memory_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"},"typeName":{"baseType":{"id":77777,"nodeType":"UserDefinedTypeName","pathNode":{"id":77776,"name":"ClaimCondition","nameLocations":["1766:14:351"],"nodeType":"IdentifierPath","referencedDeclaration":77706,"src":"1766:14:351"},"referencedDeclaration":77706,"src":"1766:14:351","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$77706_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition"}},"id":77778,"nodeType":"ArrayTypeName","src":"1766:16:351","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"}},"visibility":"internal"}],"src":"1740:59:351"}},{"id":77788,"nodeType":"EventDefinition","src":"1877:69:351","nodes":[],"anonymous":false,"documentation":{"id":77782,"nodeType":"StructuredDocumentation","src":"1806:66:351","text":"@dev Emitted when the global max supply of a token is updated."},"eventSelector":"c58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd","name":"MaxTotalSupplyUpdated","nameLocation":"1883:21:351","parameters":{"id":77787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77784,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"1913:7:351","nodeType":"VariableDeclaration","scope":77788,"src":"1905:15:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77783,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77786,"indexed":false,"mutability":"mutable","name":"maxTotalSupply","nameLocation":"1930:14:351","nodeType":"VariableDeclaration","scope":77788,"src":"1922:22:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:41:351"}},{"id":77795,"nodeType":"EventDefinition","src":"2034:83:351","nodes":[],"anonymous":false,"documentation":{"id":77789,"nodeType":"StructuredDocumentation","src":"1952:77:351","text":"@dev Emitted when the sale recipient for a particular tokenId is updated."},"eventSelector":"359479172ba65a6639b0df237f704e030498cb7135d5e89b56f598bd1d84b016","name":"SaleRecipientForTokenUpdated","nameLocation":"2040:28:351","parameters":{"id":77794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77791,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"2085:7:351","nodeType":"VariableDeclaration","scope":77795,"src":"2069:23:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77790,"name":"uint256","nodeType":"ElementaryTypeName","src":"2069:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77793,"indexed":false,"mutability":"mutable","name":"saleRecipient","nameLocation":"2102:13:351","nodeType":"VariableDeclaration","scope":77795,"src":"2094:21:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77792,"name":"address","nodeType":"ElementaryTypeName","src":"2094:7:351","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2068:48:351"}},{"id":77803,"nodeType":"FunctionDefinition","src":"2440:77:351","nodes":[],"documentation":{"id":77796,"nodeType":"StructuredDocumentation","src":"2123:312:351","text":"  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n  @param amount           The amount of NFTs to lazy mint.\n  @param baseURIForTokens The URI for the NFTs to lazy mint."},"functionSelector":"47158264","implemented":false,"kind":"function","modifiers":[],"name":"lazyMint","nameLocation":"2449:8:351","parameters":{"id":77801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77798,"mutability":"mutable","name":"amount","nameLocation":"2466:6:351","nodeType":"VariableDeclaration","scope":77803,"src":"2458:14:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77797,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77800,"mutability":"mutable","name":"baseURIForTokens","nameLocation":"2490:16:351","nodeType":"VariableDeclaration","scope":77803,"src":"2474:32:351","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":77799,"name":"string","nodeType":"ElementaryTypeName","src":"2474:6:351","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2457:50:351"},"returnParameters":{"id":77802,"nodeType":"ParameterList","parameters":[],"src":"2516:0:351"},"scope":77835,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":77822,"nodeType":"FunctionDefinition","src":"3351:247:351","nodes":[],"documentation":{"id":77804,"nodeType":"StructuredDocumentation","src":"2523:823:351","text":"  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFT to claim.\n  @param tokenId                        The tokenId of the NFT to claim.\n  @param quantity                       The quantity of the NFT to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."},"functionSelector":"27db5f08","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"3360:5:351","parameters":{"id":77820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77806,"mutability":"mutable","name":"receiver","nameLocation":"3383:8:351","nodeType":"VariableDeclaration","scope":77822,"src":"3375:16:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77805,"name":"address","nodeType":"ElementaryTypeName","src":"3375:7:351","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77808,"mutability":"mutable","name":"tokenId","nameLocation":"3409:7:351","nodeType":"VariableDeclaration","scope":77822,"src":"3401:15:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77807,"name":"uint256","nodeType":"ElementaryTypeName","src":"3401:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77810,"mutability":"mutable","name":"quantity","nameLocation":"3434:8:351","nodeType":"VariableDeclaration","scope":77822,"src":"3426:16:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77809,"name":"uint256","nodeType":"ElementaryTypeName","src":"3426:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77812,"mutability":"mutable","name":"currency","nameLocation":"3460:8:351","nodeType":"VariableDeclaration","scope":77822,"src":"3452:16:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77811,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:351","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77814,"mutability":"mutable","name":"pricePerToken","nameLocation":"3486:13:351","nodeType":"VariableDeclaration","scope":77822,"src":"3478:21:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77813,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77817,"mutability":"mutable","name":"allowlistProof","nameLocation":"3533:14:351","nodeType":"VariableDeclaration","scope":77822,"src":"3509:38:351","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$77750_calldata_ptr","typeString":"struct IDropERC1155.AllowlistProof"},"typeName":{"id":77816,"nodeType":"UserDefinedTypeName","pathNode":{"id":77815,"name":"AllowlistProof","nameLocations":["3509:14:351"],"nodeType":"IdentifierPath","referencedDeclaration":77750,"src":"3509:14:351"},"referencedDeclaration":77750,"src":"3509:14:351","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$77750_storage_ptr","typeString":"struct IDropERC1155.AllowlistProof"}},"visibility":"internal"},{"constant":false,"id":77819,"mutability":"mutable","name":"data","nameLocation":"3570:4:351","nodeType":"VariableDeclaration","scope":77822,"src":"3557:17:351","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":77818,"name":"bytes","nodeType":"ElementaryTypeName","src":"3557:5:351","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3365:215:351"},"returnParameters":{"id":77821,"nodeType":"ParameterList","parameters":[],"src":"3597:0:351"},"scope":77835,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":77834,"nodeType":"FunctionDefinition","src":"4125:116:351","nodes":[],"documentation":{"id":77823,"nodeType":"StructuredDocumentation","src":"3604:516:351","text":"  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param tokenId               The token ID for which to set mint conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."},"functionSelector":"ab073c22","implemented":false,"kind":"function","modifiers":[],"name":"setClaimConditions","nameLocation":"4134:18:351","parameters":{"id":77832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77825,"mutability":"mutable","name":"tokenId","nameLocation":"4161:7:351","nodeType":"VariableDeclaration","scope":77834,"src":"4153:15:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77824,"name":"uint256","nodeType":"ElementaryTypeName","src":"4153:7:351","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77829,"mutability":"mutable","name":"phases","nameLocation":"4196:6:351","nodeType":"VariableDeclaration","scope":77834,"src":"4170:32:351","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"},"typeName":{"baseType":{"id":77827,"nodeType":"UserDefinedTypeName","pathNode":{"id":77826,"name":"ClaimCondition","nameLocations":["4170:14:351"],"nodeType":"IdentifierPath","referencedDeclaration":77706,"src":"4170:14:351"},"referencedDeclaration":77706,"src":"4170:14:351","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$77706_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition"}},"id":77828,"nodeType":"ArrayTypeName","src":"4170:16:351","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"}},"visibility":"internal"},{"constant":false,"id":77831,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"4209:21:351","nodeType":"VariableDeclaration","scope":77834,"src":"4204:26:351","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":77830,"name":"bool","nodeType":"ElementaryTypeName","src":"4204:4:351","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4152:79:351"},"returnParameters":{"id":77833,"nodeType":"ParameterList","parameters":[],"src":"4240:0:351"},"scope":77835,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":77741,"name":"IERC1155Upgradeable","nameLocations":["1112:19:351"],"nodeType":"IdentifierPath","referencedDeclaration":156784,"src":"1112:19:351"},"id":77742,"nodeType":"InheritanceSpecifier","src":"1112:19:351"},{"baseName":{"id":77743,"name":"IDropClaimCondition","nameLocations":["1133:19:351"],"nodeType":"IdentifierPath","referencedDeclaration":77735,"src":"1133:19:351"},"id":77744,"nodeType":"InheritanceSpecifier","src":"1133:19:351"}],"canonicalName":"IDropERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":77740,"nodeType":"StructuredDocumentation","src":"186:898:351","text":"  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC721` contract is a distribution mechanism for ERC721 tokens.\n  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens\n  at once by providing a single base URI for all tokens being lazy minted.\n  The URI for each of the 'n' tokens lazy minted is the provided base URI +\n  `{tokenId}` of the respective token. (e.g. \"ipsf://Qmece.../1\").\n  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'\n  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."},"fullyImplemented":false,"linearizedBaseContracts":[77835,77735,156784,163710],"name":"IDropERC1155","nameLocation":"1096:12:351","scope":77836,"usedErrors":[],"usedEvents":[77763,77772,77781,77788,77795,156681,156696,156705,156712]}],"license":"Apache-2.0"},"id":351}