{"abi":[{"type":"function","name":"entryPoint","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEntryPoint"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct UserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"callGasLimit","type":"uint256","internalType":"uint256"},{"name":"verificationGasLimit","type":"uint256","internalType":"uint256"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"maxFeePerGas","type":"uint256","internalType":"uint256"},{"name":"maxPriorityFeePerGas","type":"uint256","internalType":"uint256"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"validationData","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"entryPoint()":"b0d691fe","getNonce()":"d087d288","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"notice\":\"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/account/utils/BaseAccount.sol\":\"BaseAccount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/prebuilts/account/interface/IAccount.sol\":{\"keccak256\":\"0x98f2d41bd69f4b46a697957681d2e14cf2f10b6133ede864b838f821899d4e41\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ddaae235044c84994f693a38030d3923bb8e65f9b7f1fc5028a424a16f7a723c\",\"dweb:/ipfs/QmdXzv1k9mdECGxUDigBf6GAb3bn3qMdTKcmGadJ4EoLzL\"]},\"contracts/prebuilts/account/interface/IAggregator.sol\":{\"keccak256\":\"0xf25b6da72dfcb022d6d3c16aaa4a2d9860bf51483356cb26b314b37a01e7a1bb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://800a724a532870ae3de64fe798352427c9a3168cc44fe1320f1fecea8126df03\",\"dweb:/ipfs/QmNb1s7rDkKePrE4iKMQ3UJyrsScZRomLWf4aj6QBJnRAZ\"]},\"contracts/prebuilts/account/interface/IEntrypoint.sol\":{\"keccak256\":\"0x8108c62da675ac3e840e56c07dc74f04e6993d1f23812821082a92cfd6a079b1\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://abc88d73e8e22622456cc4079e8df66ce81a66e6fd280731c63875d7cb667f0c\",\"dweb:/ipfs/QmVpxV56vM6TbZEK5idNEtdvHtQ3dXMJdWXusm6cit3FPo\"]},\"contracts/prebuilts/account/interface/INonceManager.sol\":{\"keccak256\":\"0xf509795f7336c849ac5d247d71af20376b67201c647aa847fd17ca8e7909dec3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b3418173e37999ba0015bb352ab1b9dfbe1296143a8565ea3d3ce7a9a9e087b4\",\"dweb:/ipfs/QmS93Dw1FfPj5kHk9cLrh1VssbwNyaKKo5LNmEHwxzDqNp\"]},\"contracts/prebuilts/account/interface/IStakeManager.sol\":{\"keccak256\":\"0x61562da096c3c3da5755bbb5b552ea713723d7be36975cd401022ff321753b73\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://e6bcd63477257007d2fcd92b38c8105cb82c2d0eae3836ac856839234481f4ab\",\"dweb:/ipfs/QmZuNE3y1RvtRXYiw3eiT25YQH2SAa1kFcpxAgW9KX6KtZ\"]},\"contracts/prebuilts/account/utils/BaseAccount.sol\":{\"keccak256\":\"0xe4c645052e3223dc617ce4fdb8c44eee6047f50187b38d2b19e8f88575a6362d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://25f657768c1c652e7e68ba8ba3c4e667ff22872a7476c902ea7966092923f4aa\",\"dweb:/ipfs/QmRke55xXKGsKMoNFUtm17t2nqmgfSHfEgx4vrib8c3i7D\"]},\"contracts/prebuilts/account/utils/Helpers.sol\":{\"keccak256\":\"0x362ebd624a0a4893c8d80f2dc86b27198a6f22d3bca6d4ad648cd4f12b8b2e5d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bb43f98886861a0d1a6a80aaf8bfda8a2e8dace798e559dcba9fe5ebd2738817\",\"dweb:/ipfs/QmUfAk7cbLqfhJdGgZeCqdzHFxrtjQgcbGtcQEbioLUDuS\"]},\"contracts/prebuilts/account/utils/UserOperation.sol\":{\"keccak256\":\"0x3f3aa133687f459f9fb538835a54aa769418dd6303a02c9fa691690fcc397964\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://993f8daa2320ca301167767fff33a6989697394fe6dc65905edc4b32368850b5\",\"dweb:/ipfs/Qmaymg8dsE6mrfAWJPs4DXbHR1wxESJnxyFhNkm7AmKBCK\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct UserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"entryPoint()":{"notice":"return the entryPoint used by this account. subclass should return the current entryPoint used by this account."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/prebuilts/account/utils/BaseAccount.sol":"BaseAccount"},"evmVersion":"london","libraries":{}},"sources":{"contracts/prebuilts/account/interface/IAccount.sol":{"keccak256":"0x98f2d41bd69f4b46a697957681d2e14cf2f10b6133ede864b838f821899d4e41","urls":["bzz-raw://ddaae235044c84994f693a38030d3923bb8e65f9b7f1fc5028a424a16f7a723c","dweb:/ipfs/QmdXzv1k9mdECGxUDigBf6GAb3bn3qMdTKcmGadJ4EoLzL"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IAggregator.sol":{"keccak256":"0xf25b6da72dfcb022d6d3c16aaa4a2d9860bf51483356cb26b314b37a01e7a1bb","urls":["bzz-raw://800a724a532870ae3de64fe798352427c9a3168cc44fe1320f1fecea8126df03","dweb:/ipfs/QmNb1s7rDkKePrE4iKMQ3UJyrsScZRomLWf4aj6QBJnRAZ"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IEntrypoint.sol":{"keccak256":"0x8108c62da675ac3e840e56c07dc74f04e6993d1f23812821082a92cfd6a079b1","urls":["bzz-raw://abc88d73e8e22622456cc4079e8df66ce81a66e6fd280731c63875d7cb667f0c","dweb:/ipfs/QmVpxV56vM6TbZEK5idNEtdvHtQ3dXMJdWXusm6cit3FPo"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/INonceManager.sol":{"keccak256":"0xf509795f7336c849ac5d247d71af20376b67201c647aa847fd17ca8e7909dec3","urls":["bzz-raw://b3418173e37999ba0015bb352ab1b9dfbe1296143a8565ea3d3ce7a9a9e087b4","dweb:/ipfs/QmS93Dw1FfPj5kHk9cLrh1VssbwNyaKKo5LNmEHwxzDqNp"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IStakeManager.sol":{"keccak256":"0x61562da096c3c3da5755bbb5b552ea713723d7be36975cd401022ff321753b73","urls":["bzz-raw://e6bcd63477257007d2fcd92b38c8105cb82c2d0eae3836ac856839234481f4ab","dweb:/ipfs/QmZuNE3y1RvtRXYiw3eiT25YQH2SAa1kFcpxAgW9KX6KtZ"],"license":"GPL-3.0-only"},"contracts/prebuilts/account/utils/BaseAccount.sol":{"keccak256":"0xe4c645052e3223dc617ce4fdb8c44eee6047f50187b38d2b19e8f88575a6362d","urls":["bzz-raw://25f657768c1c652e7e68ba8ba3c4e667ff22872a7476c902ea7966092923f4aa","dweb:/ipfs/QmRke55xXKGsKMoNFUtm17t2nqmgfSHfEgx4vrib8c3i7D"],"license":"GPL-3.0"},"contracts/prebuilts/account/utils/Helpers.sol":{"keccak256":"0x362ebd624a0a4893c8d80f2dc86b27198a6f22d3bca6d4ad648cd4f12b8b2e5d","urls":["bzz-raw://bb43f98886861a0d1a6a80aaf8bfda8a2e8dace798e559dcba9fe5ebd2738817","dweb:/ipfs/QmUfAk7cbLqfhJdGgZeCqdzHFxrtjQgcbGtcQEbioLUDuS"],"license":"GPL-3.0"},"contracts/prebuilts/account/utils/UserOperation.sol":{"keccak256":"0x3f3aa133687f459f9fb538835a54aa769418dd6303a02c9fa691690fcc397964","urls":["bzz-raw://993f8daa2320ca301167767fff33a6989697394fe6dc65905edc4b32368850b5","dweb:/ipfs/Qmaymg8dsE6mrfAWJPs4DXbHR1wxESJnxyFhNkm7AmKBCK"],"license":"GPL-3.0"}},"version":1},"ast":{"absolutePath":"contracts/prebuilts/account/utils/BaseAccount.sol","id":70080,"exportedSymbols":{"BaseAccount":[70079],"IAccount":[66763],"IAggregator":[66903],"IEntryPoint":[67109],"INonceManager":[67128],"IStakeManager":[67269],"UserOperation":[73795],"UserOperationLib":[73965],"ValidationData":[72844],"_intersectTimeRange":[72988],"_packValidationData":[73025,73063],"_parseValidationData":[72903],"calldataKeccak":[73073]},"nodeType":"SourceUnit","src":"36:4658:323","nodes":[{"id":69939,"nodeType":"PragmaDirective","src":"36:24:323","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":69940,"nodeType":"ImportDirective","src":"145:35:323","nodes":[],"absolutePath":"contracts/prebuilts/account/interface/IAccount.sol","file":"../interface/IAccount.sol","nameLocation":"-1:-1:-1","scope":70080,"sourceUnit":66764,"symbolAliases":[],"unitAlias":""},{"id":69941,"nodeType":"ImportDirective","src":"181:38:323","nodes":[],"absolutePath":"contracts/prebuilts/account/interface/IEntrypoint.sol","file":"../interface/IEntrypoint.sol","nameLocation":"-1:-1:-1","scope":70080,"sourceUnit":67110,"symbolAliases":[],"unitAlias":""},{"id":69942,"nodeType":"ImportDirective","src":"220:23:323","nodes":[],"absolutePath":"contracts/prebuilts/account/utils/Helpers.sol","file":"./Helpers.sol","nameLocation":"-1:-1:-1","scope":70080,"sourceUnit":73074,"symbolAliases":[],"unitAlias":""},{"id":70079,"nodeType":"ContractDefinition","src":"478:4215:323","nodes":[{"id":69949,"nodeType":"UsingForDirective","src":"526:41:323","nodes":[],"global":false,"libraryName":{"id":69946,"name":"UserOperationLib","nameLocations":["532:16:323"],"nodeType":"IdentifierPath","referencedDeclaration":73965,"src":"532:16:323"},"typeName":{"id":69948,"nodeType":"UserDefinedTypeName","pathNode":{"id":69947,"name":"UserOperation","nameLocations":["553:13:323"],"nodeType":"IdentifierPath","referencedDeclaration":73795,"src":"553:13:323"},"referencedDeclaration":73795,"src":"553:13:323","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_storage_ptr","typeString":"struct UserOperation"}}},{"id":69952,"nodeType":"VariableDeclaration","src":"694:51:323","nodes":[],"constant":true,"mutability":"constant","name":"SIG_VALIDATION_FAILED","nameLocation":"720:21:323","scope":70079,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69950,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":69951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"744:1:323","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"id":69969,"nodeType":"FunctionDefinition","src":"933:121:323","nodes":[],"body":{"id":69968,"nodeType":"Block","src":"991:63:323","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":69963,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1038:4:323","typeDescriptions":{"typeIdentifier":"t_contract$_BaseAccount_$70079","typeString":"contract BaseAccount"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseAccount_$70079","typeString":"contract BaseAccount"}],"id":69962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1030:7:323","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":69961,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:323","typeDescriptions":{}}},"id":69964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:13:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":69965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:323","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":69958,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69976,"src":"1008:10:323","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$67109_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":69959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:12:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$67109","typeString":"contract IEntryPoint"}},"id":69960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1021:8:323","memberName":"getNonce","nodeType":"MemberAccess","referencedDeclaration":67121,"src":"1008:21:323","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint192_$returns$_t_uint256_$","typeString":"function (address,uint192) view external returns (uint256)"}},"id":69966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:39:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":69957,"id":69967,"nodeType":"Return","src":"1001:46:323"}]},"documentation":{"id":69953,"nodeType":"StructuredDocumentation","src":"752:176:323","text":" Return the account nonce.\n This method returns the next sequential nonce.\n For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"functionSelector":"d087d288","implemented":true,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"942:8:323","parameters":{"id":69954,"nodeType":"ParameterList","parameters":[],"src":"950:2:323"},"returnParameters":{"id":69957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69969,"src":"982:7:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69955,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:323"},"scope":70079,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":69976,"nodeType":"FunctionDefinition","src":"1202:64:323","nodes":[],"documentation":{"id":69970,"nodeType":"StructuredDocumentation","src":"1060:137:323","text":" return the entryPoint used by this account.\n subclass should return the current entryPoint used by this account."},"functionSelector":"b0d691fe","implemented":false,"kind":"function","modifiers":[],"name":"entryPoint","nameLocation":"1211:10:323","parameters":{"id":69971,"nodeType":"ParameterList","parameters":[],"src":"1221:2:323"},"returnParameters":{"id":69975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69976,"src":"1253:11:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$67109","typeString":"contract IEntryPoint"},"typeName":{"id":69973,"nodeType":"UserDefinedTypeName","pathNode":{"id":69972,"name":"IEntryPoint","nameLocations":["1253:11:323"],"nodeType":"IdentifierPath","referencedDeclaration":67109,"src":"1253:11:323"},"referencedDeclaration":67109,"src":"1253:11:323","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$67109","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"1252:13:323"},"scope":70079,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":70010,"nodeType":"FunctionDefinition","src":"1456:379:323","nodes":[],"body":{"id":70009,"nodeType":"Block","src":"1649:186:323","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":69990,"name":"_requireFromEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70027,"src":"1659:22:323","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":69991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1659:24:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69992,"nodeType":"ExpressionStatement","src":"1659:24:323"},{"expression":{"id":69998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":69993,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69988,"src":"1693:14:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":69995,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69980,"src":"1729:6:323","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_calldata_ptr","typeString":"struct UserOperation calldata"}},{"id":69996,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69982,"src":"1737:10:323","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$73795_calldata_ptr","typeString":"struct UserOperation calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":69994,"name":"_validateSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70038,"src":"1710:18:323","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UserOperation_$73795_calldata_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (struct UserOperation calldata,bytes32) returns (uint256)"}},"id":69997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:38:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1693:55:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":69999,"nodeType":"ExpressionStatement","src":"1693:55:323"},{"expression":{"arguments":[{"expression":{"id":70001,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69980,"src":"1773:6:323","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":70002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1780:5:323","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":73776,"src":"1773:12:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":70000,"name":"_validateNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70045,"src":"1758:14:323","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":70003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1758:28:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":70004,"nodeType":"ExpressionStatement","src":"1758:28:323"},{"expression":{"arguments":[{"id":70006,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69984,"src":"1808:19:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":70005,"name":"_payPrefund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70078,"src":"1796:11:323","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":70007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1796:32:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":70008,"nodeType":"ExpressionStatement","src":"1796:32:323"}]},"baseFunctions":[66762],"documentation":{"id":69977,"nodeType":"StructuredDocumentation","src":"1272:179:323","text":" Validate user's signature and nonce.\n subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."},"functionSelector":"3a871cdd","implemented":true,"kind":"function","modifiers":[],"name":"validateUserOp","nameLocation":"1465:14:323","overrides":{"id":69986,"nodeType":"OverrideSpecifier","overrides":[],"src":"1607:8:323"},"parameters":{"id":69985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69980,"mutability":"mutable","name":"userOp","nameLocation":"1512:6:323","nodeType":"VariableDeclaration","scope":70010,"src":"1489:29:323","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":69979,"nodeType":"UserDefinedTypeName","pathNode":{"id":69978,"name":"UserOperation","nameLocations":["1489:13:323"],"nodeType":"IdentifierPath","referencedDeclaration":73795,"src":"1489:13:323"},"referencedDeclaration":73795,"src":"1489:13:323","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":69982,"mutability":"mutable","name":"userOpHash","nameLocation":"1536:10:323","nodeType":"VariableDeclaration","scope":70010,"src":"1528:18:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":69981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1528:7:323","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":69984,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"1564:19:323","nodeType":"VariableDeclaration","scope":70010,"src":"1556:27:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1556:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1479:110:323"},"returnParameters":{"id":69989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69988,"mutability":"mutable","name":"validationData","nameLocation":"1633:14:323","nodeType":"VariableDeclaration","scope":70010,"src":"1625:22:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69987,"name":"uint256","nodeType":"ElementaryTypeName","src":"1625:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1624:24:323"},"scope":70079,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":70027,"nodeType":"FunctionDefinition","src":"1916:149:323","nodes":[],"body":{"id":70026,"nodeType":"Block","src":"1972:93:323","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":70022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":70015,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1990:3:323","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":70016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1994:6:323","memberName":"sender","nodeType":"MemberAccess","src":"1990:10:323","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":70019,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69976,"src":"2012:10:323","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$67109_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":70020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:12:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$67109","typeString":"contract IEntryPoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$67109","typeString":"contract IEntryPoint"}],"id":70018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2004:7:323","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":70017,"name":"address","nodeType":"ElementaryTypeName","src":"2004:7:323","typeDescriptions":{}}},"id":70021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2004:21:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1990:35:323","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e743a206e6f742066726f6d20456e747279506f696e74","id":70023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2027:30:323","typeDescriptions":{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""},"value":"account: not from EntryPoint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""}],"id":70014,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1982:7:323","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":70024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1982:76:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":70025,"nodeType":"ExpressionStatement","src":"1982:76:323"}]},"documentation":{"id":70011,"nodeType":"StructuredDocumentation","src":"1841:70:323","text":" ensure the request comes from the known entrypoint."},"implemented":true,"kind":"function","modifiers":[],"name":"_requireFromEntryPoint","nameLocation":"1925:22:323","parameters":{"id":70012,"nodeType":"ParameterList","parameters":[],"src":"1947:2:323"},"returnParameters":{"id":70013,"nodeType":"ParameterList","parameters":[],"src":"1972:0:323"},"scope":70079,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":70038,"nodeType":"FunctionDefinition","src":"2980:151:323","nodes":[],"documentation":{"id":70028,"nodeType":"StructuredDocumentation","src":"2071:904:323","text":" validate the signature is valid for this message.\n @param userOp validate the userOp.signature field\n @param userOpHash convenient field: the hash of the request, to check the signature against\n          (also hashes the entrypoint and chain id)\n @return validationData signature and time-range of this operation\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"implemented":false,"kind":"function","modifiers":[],"name":"_validateSignature","nameLocation":"2989:18:323","parameters":{"id":70034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70031,"mutability":"mutable","name":"userOp","nameLocation":"3040:6:323","nodeType":"VariableDeclaration","scope":70038,"src":"3017:29:323","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":70030,"nodeType":"UserDefinedTypeName","pathNode":{"id":70029,"name":"UserOperation","nameLocations":["3017:13:323"],"nodeType":"IdentifierPath","referencedDeclaration":73795,"src":"3017:13:323"},"referencedDeclaration":73795,"src":"3017:13:323","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73795_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":70033,"mutability":"mutable","name":"userOpHash","nameLocation":"3064:10:323","nodeType":"VariableDeclaration","scope":70038,"src":"3056:18:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":70032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3056:7:323","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3007:73:323"},"returnParameters":{"id":70037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70036,"mutability":"mutable","name":"validationData","nameLocation":"3115:14:323","nodeType":"VariableDeclaration","scope":70038,"src":"3107:22:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70035,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3106:24:323"},"scope":70079,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":70045,"nodeType":"FunctionDefinition","src":"3782:63:323","nodes":[],"body":{"id":70044,"nodeType":"Block","src":"3843:2:323","nodes":[],"statements":[]},"documentation":{"id":70039,"nodeType":"StructuredDocumentation","src":"3137:640:323","text":" Validate the nonce of the UserOperation.\n This method may validate the nonce requirement of this account.\n e.g.\n To limit the nonce to use sequenced UserOps only (no \"out of order\" UserOps):\n      `require(nonce < type(uint64).max)`\n For a hypothetical account that *requires* the nonce to be out-of-order:\n      `require(nonce & type(uint64).max == 0)`\n The actual nonce uniqueness is managed by the EntryPoint, and thus no other\n action is needed by the account itself.\n @param nonce to validate\n solhint-disable-next-line no-empty-blocks"},"implemented":true,"kind":"function","modifiers":[],"name":"_validateNonce","nameLocation":"3791:14:323","parameters":{"id":70042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70041,"mutability":"mutable","name":"nonce","nameLocation":"3814:5:323","nodeType":"VariableDeclaration","scope":70045,"src":"3806:13:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70040,"name":"uint256","nodeType":"ElementaryTypeName","src":"3806:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3805:15:323"},"returnParameters":{"id":70043,"nodeType":"ParameterList","parameters":[],"src":"3843:0:323"},"scope":70079,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":70078,"nodeType":"FunctionDefinition","src":"4353:338:323","nodes":[],"body":{"id":70077,"nodeType":"Block","src":"4420:271:323","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":70053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":70051,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70048,"src":"4434:19:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":70052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4457:1:323","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4434:24:323","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":70076,"nodeType":"IfStatement","src":"4430:255:323","trueBody":{"id":70075,"nodeType":"Block","src":"4460:225:323","statements":[{"assignments":[70055,null],"declarations":[{"constant":false,"id":70055,"mutability":"mutable","name":"success","nameLocation":"4480:7:323","nodeType":"VariableDeclaration","scope":70075,"src":"4475:12:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":70054,"name":"bool","nodeType":"ElementaryTypeName","src":"4475:4:323","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":70071,"initialValue":{"arguments":[{"hexValue":"","id":70069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4572:2:323","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":70058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4501:3:323","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":70059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4505:6:323","memberName":"sender","nodeType":"MemberAccess","src":"4501:10:323","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":70057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4493:8:323","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":70056,"name":"address","nodeType":"ElementaryTypeName","src":"4493:8:323","stateMutability":"payable","typeDescriptions":{}}},"id":70060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:19:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":70061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4513:4:323","memberName":"call","nodeType":"MemberAccess","src":"4493:24:323","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":70068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value","gas"],"nodeType":"FunctionCallOptions","options":[{"id":70062,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70048,"src":"4526:19:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":70065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4557:7:323","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":70064,"name":"uint256","nodeType":"ElementaryTypeName","src":"4557:7:323","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":70063,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4552:4:323","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":70066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4552:13:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":70067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4566:3:323","memberName":"max","nodeType":"MemberAccess","src":"4552:17:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4493:78:323","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":70070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:82:323","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4474:101:323"},{"expression":{"components":[{"id":70072,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70055,"src":"4590:7:323","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":70073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4589:9:323","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":70074,"nodeType":"ExpressionStatement","src":"4589:9:323"}]}}]},"documentation":{"id":70046,"nodeType":"StructuredDocumentation","src":"3851:497:323","text":" sends to the entrypoint (msg.sender) the missing funds for this transaction.\n subclass MAY override this method for better funds management\n (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n it will not be required to send again)\n @param missingAccountFunds the minimum value this method should send the entrypoint.\n  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster."},"implemented":true,"kind":"function","modifiers":[],"name":"_payPrefund","nameLocation":"4362:11:323","parameters":{"id":70049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70048,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"4382:19:323","nodeType":"VariableDeclaration","scope":70078,"src":"4374:27:323","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70047,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:323","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4373:29:323"},"returnParameters":{"id":70050,"nodeType":"ParameterList","parameters":[],"src":"4420:0:323"},"scope":70079,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":69944,"name":"IAccount","nameLocations":["511:8:323"],"nodeType":"IdentifierPath","referencedDeclaration":66763,"src":"511:8:323"},"id":69945,"nodeType":"InheritanceSpecifier","src":"511:8:323"}],"canonicalName":"BaseAccount","contractDependencies":[],"contractKind":"contract","documentation":{"id":69943,"nodeType":"StructuredDocumentation","src":"245:232:323","text":" Basic account implementation.\n this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n specific account implementation should inherit it and provide the account-specific logic"},"fullyImplemented":false,"linearizedBaseContracts":[70079,66763],"name":"BaseAccount","nameLocation":"496:11:323","scope":70080,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0"},"id":323}