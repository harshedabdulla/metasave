{"abi":[{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setOwner","inputs":[{"name":"_newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnerUpdated","inputs":[{"name":"prevOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"OwnableUnauthorized","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"owner()":"8da5cb5b","setOwner(address)":"13af4035"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OwnableUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableUnauthorized()\":[{\"details\":\"The sender is not authorized to perform the action\"}]},\"events\":{\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"}},\"kind\":\"dev\",\"methods\":{\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}}},\"stateVariables\":{\"_owner\":{\"details\":\"Owner of the contract (purpose: OpenSea compatibility)\"}},\"title\":\"Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"}},\"notice\":\"Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses           information about who the contract's owner is.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0xd5edceecc8eee7460707d4c078f8273e8e488ab76cd2dcfaab36bd48e7f8bfaa\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0e0a2692225385848e6b781dd54381e27d7287be46033a00b67d3c66d19bb1a3\",\"dweb:/ipfs/QmStFLkQwcpTtzNefx4yxNxmHbf4WdVSzkSNEN97vaWzyg\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"OwnableUnauthorized"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnerUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setOwner"}],"devdoc":{"kind":"dev","methods":{"setOwner(address)":{"params":{"_newOwner":"The address to set as the new owner of the contract."}}},"version":1},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Returns the owner of the contract."},"setOwner(address)":{"notice":"Lets an authorized wallet set a new owner for the contract."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/Ownable.sol":"Ownable"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/Ownable.sol":{"keccak256":"0xd5edceecc8eee7460707d4c078f8273e8e488ab76cd2dcfaab36bd48e7f8bfaa","urls":["bzz-raw://0e0a2692225385848e6b781dd54381e27d7287be46033a00b67d3c66d19bb1a3","dweb:/ipfs/QmStFLkQwcpTtzNefx4yxNxmHbf4WdVSzkSNEN97vaWzyg"],"license":"Apache-2.0"},"contracts/extension/interface/IOwnable.sol":{"keccak256":"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3","urls":["bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9","dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/Ownable.sol","id":22015,"exportedSymbols":{"IOwnable":[34153],"Ownable":[22014]},"nodeType":"SourceUnit","src":"39:1808:70","nodes":[{"id":21933,"nodeType":"PragmaDirective","src":"39:23:70","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":21934,"nodeType":"ImportDirective","src":"86:34:70","nodes":[],"absolutePath":"contracts/extension/interface/IOwnable.sol","file":"./interface/IOwnable.sol","nameLocation":"-1:-1:-1","scope":22015,"sourceUnit":34154,"symbolAliases":[],"unitAlias":""},{"id":22014,"nodeType":"ContractDefinition","src":"485:1361:70","nodes":[{"id":21940,"nodeType":"ErrorDefinition","src":"593:28:70","nodes":[],"documentation":{"id":21938,"nodeType":"StructuredDocumentation","src":"529:59:70","text":"@dev The sender is not authorized to perform the action"},"errorSelector":"2d997396","name":"OwnableUnauthorized","nameLocation":"599:19:70","parameters":{"id":21939,"nodeType":"ParameterList","parameters":[],"src":"618:2:70"}},{"id":21943,"nodeType":"VariableDeclaration","src":"695:22:70","nodes":[],"constant":false,"documentation":{"id":21941,"nodeType":"StructuredDocumentation","src":"627:63:70","text":"@dev Owner of the contract (purpose: OpenSea compatibility)"},"mutability":"mutable","name":"_owner","nameLocation":"711:6:70","scope":22014,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21942,"name":"address","nodeType":"ElementaryTypeName","src":"695:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"id":21957,"nodeType":"ModifierDefinition","src":"773:127:70","nodes":[],"body":{"id":21956,"nodeType":"Block","src":"794:106:70","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":21949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":21946,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"808:3:70","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":21947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"812:6:70","memberName":"sender","nodeType":"MemberAccess","src":"808:10:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":21948,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21943,"src":"822:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"808:20:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":21954,"nodeType":"IfStatement","src":"804:79:70","trueBody":{"id":21953,"nodeType":"Block","src":"830:53:70","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":21950,"name":"OwnableUnauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21940,"src":"851:19:70","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":21951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"851:21:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21952,"nodeType":"RevertStatement","src":"844:28:70"}]}},{"id":21955,"nodeType":"PlaceholderStatement","src":"892:1:70"}]},"documentation":{"id":21944,"nodeType":"StructuredDocumentation","src":"724:44:70","text":"@dev Reverts if caller is not the owner."},"name":"onlyOwner","nameLocation":"782:9:70","parameters":{"id":21945,"nodeType":"ParameterList","parameters":[],"src":"791:2:70"},"virtual":false,"visibility":"internal"},{"id":21967,"nodeType":"FunctionDefinition","src":"973:86:70","nodes":[],"body":{"id":21966,"nodeType":"Block","src":"1029:30:70","nodes":[],"statements":[{"expression":{"id":21964,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21943,"src":"1046:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":21963,"id":21965,"nodeType":"Return","src":"1039:13:70"}]},"baseFunctions":[34139],"documentation":{"id":21958,"nodeType":"StructuredDocumentation","src":"906:62:70","text":"  @notice Returns the owner of the contract."},"functionSelector":"8da5cb5b","implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"982:5:70","overrides":{"id":21960,"nodeType":"OverrideSpecifier","overrides":[],"src":"1002:8:70"},"parameters":{"id":21959,"nodeType":"ParameterList","parameters":[],"src":"987:2:70"},"returnParameters":{"id":21963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21967,"src":"1020:7:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21961,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1019:9:70"},"scope":22014,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":21987,"nodeType":"FunctionDefinition","src":"1235:177:70","nodes":[],"body":{"id":21986,"nodeType":"Block","src":"1290:122:70","nodes":[],"statements":[{"condition":{"id":21976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1304:15:70","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":21974,"name":"_canSetOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22013,"src":"1305:12:70","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":21975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:14:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":21981,"nodeType":"IfStatement","src":"1300:74:70","trueBody":{"id":21980,"nodeType":"Block","src":"1321:53:70","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":21977,"name":"OwnableUnauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21940,"src":"1342:19:70","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":21978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:21:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21979,"nodeType":"RevertStatement","src":"1335:28:70"}]}},{"expression":{"arguments":[{"id":21983,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21970,"src":"1395:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":21982,"name":"_setupOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22007,"src":"1383:11:70","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":21984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:22:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21985,"nodeType":"ExpressionStatement","src":"1383:22:70"}]},"baseFunctions":[34145],"documentation":{"id":21968,"nodeType":"StructuredDocumentation","src":"1065:165:70","text":"  @notice Lets an authorized wallet set a new owner for the contract.\n  @param _newOwner The address to set as the new owner of the contract."},"functionSelector":"13af4035","implemented":true,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"1244:8:70","overrides":{"id":21972,"nodeType":"OverrideSpecifier","overrides":[],"src":"1281:8:70"},"parameters":{"id":21971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21970,"mutability":"mutable","name":"_newOwner","nameLocation":"1261:9:70","nodeType":"VariableDeclaration","scope":21987,"src":"1253:17:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21969,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1252:19:70"},"returnParameters":{"id":21973,"nodeType":"ParameterList","parameters":[],"src":"1290:0:70"},"scope":22014,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":22007,"nodeType":"FunctionDefinition","src":"1527:172:70","nodes":[],"body":{"id":22006,"nodeType":"Block","src":"1576:123:70","nodes":[],"statements":[{"assignments":[21994],"declarations":[{"constant":false,"id":21994,"mutability":"mutable","name":"_prevOwner","nameLocation":"1594:10:70","nodeType":"VariableDeclaration","scope":22006,"src":"1586:18:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21993,"name":"address","nodeType":"ElementaryTypeName","src":"1586:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":21996,"initialValue":{"id":21995,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21943,"src":"1607:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1586:27:70"},{"expression":{"id":21999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21997,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21943,"src":"1623:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":21998,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21990,"src":"1632:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1623:18:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":22000,"nodeType":"ExpressionStatement","src":"1623:18:70"},{"eventCall":{"arguments":[{"id":22002,"name":"_prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21994,"src":"1670:10:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":22003,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21990,"src":"1682:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":22001,"name":"OwnerUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34152,"src":"1657:12:70","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":22004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1657:35:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":22005,"nodeType":"EmitStatement","src":"1652:40:70"}]},"documentation":{"id":21988,"nodeType":"StructuredDocumentation","src":"1418:104:70","text":"@dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin."},"implemented":true,"kind":"function","modifiers":[],"name":"_setupOwner","nameLocation":"1536:11:70","parameters":{"id":21991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21990,"mutability":"mutable","name":"_newOwner","nameLocation":"1556:9:70","nodeType":"VariableDeclaration","scope":22007,"src":"1548:17:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21989,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1547:19:70"},"returnParameters":{"id":21992,"nodeType":"ParameterList","parameters":[],"src":"1576:0:70"},"scope":22014,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":22013,"nodeType":"FunctionDefinition","src":"1783:61:70","nodes":[],"documentation":{"id":22008,"nodeType":"StructuredDocumentation","src":"1705:73:70","text":"@dev Returns whether owner can be set in the given execution context."},"implemented":false,"kind":"function","modifiers":[],"name":"_canSetOwner","nameLocation":"1792:12:70","parameters":{"id":22009,"nodeType":"ParameterList","parameters":[],"src":"1804:2:70"},"returnParameters":{"id":22012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":22011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":22013,"src":"1838:4:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":22010,"name":"bool","nodeType":"ElementaryTypeName","src":"1838:4:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1837:6:70"},"scope":22014,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":21936,"name":"IOwnable","nameLocations":["514:8:70"],"nodeType":"IdentifierPath","referencedDeclaration":34153,"src":"514:8:70"},"id":21937,"nodeType":"InheritanceSpecifier","src":"514:8:70"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":21935,"nodeType":"StructuredDocumentation","src":"122:361:70","text":"  @title   Ownable\n  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n           information about who the contract's owner is."},"fullyImplemented":false,"linearizedBaseContracts":[22014,34153],"name":"Ownable","nameLocation":"503:7:70","scope":22015,"usedErrors":[21940],"usedEvents":[34152]}],"license":"Apache-2.0"},"id":70}