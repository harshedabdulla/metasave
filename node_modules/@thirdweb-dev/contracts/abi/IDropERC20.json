{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"claim","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"quantity","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"allowlistProof","type":"tuple","internalType":"struct IDropERC20.AllowlistProof","components":[{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"},{"name":"maxQuantityInAllowlist","type":"uint256","internalType":"uint256"}]},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setClaimConditions","inputs":[{"name":"phases","type":"tuple[]","internalType":"struct IDropClaimCondition.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]},{"name":"resetClaimEligibility","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ClaimConditionsUpdated","inputs":[{"name":"claimConditions","type":"tuple[]","indexed":false,"internalType":"struct IDropClaimCondition.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]}],"anonymous":false},{"type":"event","name":"ContractURIUpdated","inputs":[{"name":"prevURI","type":"string","indexed":false,"internalType":"string"},{"name":"newURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"MaxTotalSupplyUpdated","inputs":[{"name":"maxTotalSupply","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimConditionIndex","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)":"5ab31c1a","setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":"e23b8164","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantityInAllowlist\",\"type\":\"uint256\"}],\"internalType\":\"struct IDropERC20.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"ClaimConditionsUpdated((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set.\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"MaxTotalSupplyUpdated(uint256)\":{\"details\":\"Emitted when the global max supply of tokens is updated.\"},\"TokensClaimed(uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of tokens to claim.\",\"receiver\":\"The receiver of the tokens to claim.\"}},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC20` contract is a distribution mechanism for ERC20 tokens.  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/interface/drop/IDropERC20.sol\":\"IDropERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/prebuilts/interface/drop/IDropClaimCondition.sol\":{\"keccak256\":\"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c\",\"dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j\"]},\"contracts/prebuilts/interface/drop/IDropERC20.sol\":{\"keccak256\":\"0xdb7b7687546212f7ddea7a4d3aa7d32875151125ba6fc2dd49942a58f7e14a8b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://374f1b553203d23c836da4b658ecf905fcd783257432e8cb9922470391a5ce43\",\"dweb:/ipfs/QmXVKZVtb8wh4trn73aQBy13AgcKEVhFHLU6AGUigPTVje\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4\",\"dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"spender","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"struct IDropClaimCondition.ClaimCondition[]","name":"claimConditions","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}],"indexed":false}],"type":"event","name":"ClaimConditionsUpdated","anonymous":false},{"inputs":[{"internalType":"string","name":"prevURI","type":"string","indexed":false},{"internalType":"string","name":"newURI","type":"string","indexed":false}],"type":"event","name":"ContractURIUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"maxTotalSupply","type":"uint256","indexed":false}],"type":"event","name":"MaxTotalSupplyUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"claimConditionIndex","type":"uint256","indexed":true},{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"struct IDropERC20.AllowlistProof","name":"allowlistProof","type":"tuple","components":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"maxQuantityInAllowlist","type":"uint256"}]},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"struct IDropClaimCondition.ClaimCondition[]","name":"phases","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}]},{"internalType":"bool","name":"resetClaimEligibility","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setClaimConditions"},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)":{"params":{"allowlistProof":"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.","currency":"The currency in which to pay for the claim.","data":"Arbitrary bytes data that can be leveraged in the implementation of this interface.","pricePerToken":"The price per token to pay for the claim.","quantity":"The quantity of tokens to claim.","receiver":"The receiver of the tokens to claim."}},"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"params":{"phases":"Claim conditions in ascending order by `startTimestamp`.","resetClaimEligibility":"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions."}},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)":{"notice":"Lets an account claim a given quantity of NFTs."},"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"notice":"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/prebuilts/interface/drop/IDropERC20.sol":"IDropERC20"},"evmVersion":"london","libraries":{}},"sources":{"contracts/prebuilts/interface/drop/IDropClaimCondition.sol":{"keccak256":"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629","urls":["bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c","dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j"],"license":"Apache-2.0"},"contracts/prebuilts/interface/drop/IDropERC20.sol":{"keccak256":"0xdb7b7687546212f7ddea7a4d3aa7d32875151125ba6fc2dd49942a58f7e14a8b","urls":["bzz-raw://374f1b553203d23c836da4b658ecf905fcd783257432e8cb9922470391a5ce43","dweb:/ipfs/QmXVKZVtb8wh4trn73aQBy13AgcKEVhFHLU6AGUigPTVje"],"license":"Apache-2.0"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol":{"keccak256":"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f","urls":["bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f","dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol":{"keccak256":"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9","urls":["bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4","dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/prebuilts/interface/drop/IDropERC20.sol","id":77909,"exportedSymbols":{"BitMapsUpgradeable":[166360],"IDropClaimCondition":[77735],"IDropERC20":[77908],"IERC20Upgradeable":[157774]},"nodeType":"SourceUnit","src":"39:2850:352","nodes":[{"id":77837,"nodeType":"PragmaDirective","src":"39:24:352","nodes":[],"literals":["solidity","^","0.8",".11"]},{"id":77838,"nodeType":"ImportDirective","src":"65:79:352","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","nameLocation":"-1:-1:-1","scope":77909,"sourceUnit":157775,"symbolAliases":[],"unitAlias":""},{"id":77839,"nodeType":"ImportDirective","src":"145:35:352","nodes":[],"absolutePath":"contracts/prebuilts/interface/drop/IDropClaimCondition.sol","file":"./IDropClaimCondition.sol","nameLocation":"-1:-1:-1","scope":77909,"sourceUnit":77736,"symbolAliases":[],"unitAlias":""},{"id":77908,"nodeType":"ContractDefinition","src":"609:2279:352","nodes":[{"id":77850,"nodeType":"StructDefinition","src":"678:94:352","nodes":[],"canonicalName":"IDropERC20.AllowlistProof","members":[{"constant":false,"id":77847,"mutability":"mutable","name":"proof","nameLocation":"720:5:352","nodeType":"VariableDeclaration","scope":77850,"src":"710:15:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":77845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"710:7:352","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":77846,"nodeType":"ArrayTypeName","src":"710:9:352","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":77849,"mutability":"mutable","name":"maxQuantityInAllowlist","nameLocation":"743:22:352","nodeType":"VariableDeclaration","scope":77850,"src":"735:30:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77848,"name":"uint256","nodeType":"ElementaryTypeName","src":"735:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AllowlistProof","nameLocation":"685:14:352","scope":77908,"visibility":"public"},{"id":77861,"nodeType":"EventDefinition","src":"824:171:352","nodes":[],"anonymous":false,"documentation":{"id":77851,"nodeType":"StructuredDocumentation","src":"778:41:352","text":"@dev Emitted when tokens are claimed."},"eventSelector":"9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee7","name":"TokensClaimed","nameLocation":"830:13:352","parameters":{"id":77860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77853,"indexed":true,"mutability":"mutable","name":"claimConditionIndex","nameLocation":"869:19:352","nodeType":"VariableDeclaration","scope":77861,"src":"853:35:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77852,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77855,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"914:7:352","nodeType":"VariableDeclaration","scope":77861,"src":"898:23:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77854,"name":"address","nodeType":"ElementaryTypeName","src":"898:7:352","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77857,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"947:8:352","nodeType":"VariableDeclaration","scope":77861,"src":"931:24:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77856,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:352","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77859,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"973:15:352","nodeType":"VariableDeclaration","scope":77861,"src":"965:23:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77858,"name":"uint256","nodeType":"ElementaryTypeName","src":"965:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"843:151:352"}},{"id":77868,"nodeType":"EventDefinition","src":"1057:63:352","nodes":[],"anonymous":false,"documentation":{"id":77862,"nodeType":"StructuredDocumentation","src":"1001:51:352","text":"@dev Emitted when new claim conditions are set."},"eventSelector":"22ddd1bcb3816651679299dbffccb94973edec10c32e88dc2f4735c7699a02ca","name":"ClaimConditionsUpdated","nameLocation":"1063:22:352","parameters":{"id":77867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77866,"indexed":false,"mutability":"mutable","name":"claimConditions","nameLocation":"1103:15:352","nodeType":"VariableDeclaration","scope":77868,"src":"1086:32:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_memory_ptr_$dyn_memory_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"},"typeName":{"baseType":{"id":77864,"nodeType":"UserDefinedTypeName","pathNode":{"id":77863,"name":"ClaimCondition","nameLocations":["1086:14:352"],"nodeType":"IdentifierPath","referencedDeclaration":77706,"src":"1086:14:352"},"referencedDeclaration":77706,"src":"1086:14:352","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$77706_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition"}},"id":77865,"nodeType":"ArrayTypeName","src":"1086:16:352","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"}},"visibility":"internal"}],"src":"1085:34:352"}},{"id":77873,"nodeType":"EventDefinition","src":"1196:52:352","nodes":[],"anonymous":false,"documentation":{"id":77869,"nodeType":"StructuredDocumentation","src":"1126:65:352","text":"@dev Emitted when the global max supply of tokens is updated."},"eventSelector":"f2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af","name":"MaxTotalSupplyUpdated","nameLocation":"1202:21:352","parameters":{"id":77872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77871,"indexed":false,"mutability":"mutable","name":"maxTotalSupply","nameLocation":"1232:14:352","nodeType":"VariableDeclaration","scope":77873,"src":"1224:22:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1223:24:352"}},{"id":77880,"nodeType":"EventDefinition","src":"1309:56:352","nodes":[],"anonymous":false,"documentation":{"id":77874,"nodeType":"StructuredDocumentation","src":"1254:50:352","text":"@dev Emitted when the contract URI is updated."},"eventSelector":"c9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a16","name":"ContractURIUpdated","nameLocation":"1315:18:352","parameters":{"id":77879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77876,"indexed":false,"mutability":"mutable","name":"prevURI","nameLocation":"1341:7:352","nodeType":"VariableDeclaration","scope":77880,"src":"1334:14:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":77875,"name":"string","nodeType":"ElementaryTypeName","src":"1334:6:352","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":77878,"indexed":false,"mutability":"mutable","name":"newURI","nameLocation":"1357:6:352","nodeType":"VariableDeclaration","scope":77880,"src":"1350:13:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":77877,"name":"string","nodeType":"ElementaryTypeName","src":"1350:6:352","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1333:31:352"}},{"id":77897,"nodeType":"FunctionDefinition","src":"2122:222:352","nodes":[],"documentation":{"id":77881,"nodeType":"StructuredDocumentation","src":"1371:746:352","text":"  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the tokens to claim.\n  @param quantity                       The quantity of tokens to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."},"functionSelector":"5ab31c1a","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2131:5:352","parameters":{"id":77895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77883,"mutability":"mutable","name":"receiver","nameLocation":"2154:8:352","nodeType":"VariableDeclaration","scope":77897,"src":"2146:16:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77882,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:352","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77885,"mutability":"mutable","name":"quantity","nameLocation":"2180:8:352","nodeType":"VariableDeclaration","scope":77897,"src":"2172:16:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77884,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77887,"mutability":"mutable","name":"currency","nameLocation":"2206:8:352","nodeType":"VariableDeclaration","scope":77897,"src":"2198:16:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77886,"name":"address","nodeType":"ElementaryTypeName","src":"2198:7:352","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77889,"mutability":"mutable","name":"pricePerToken","nameLocation":"2232:13:352","nodeType":"VariableDeclaration","scope":77897,"src":"2224:21:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:352","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":77892,"mutability":"mutable","name":"allowlistProof","nameLocation":"2279:14:352","nodeType":"VariableDeclaration","scope":77897,"src":"2255:38:352","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$77850_calldata_ptr","typeString":"struct IDropERC20.AllowlistProof"},"typeName":{"id":77891,"nodeType":"UserDefinedTypeName","pathNode":{"id":77890,"name":"AllowlistProof","nameLocations":["2255:14:352"],"nodeType":"IdentifierPath","referencedDeclaration":77850,"src":"2255:14:352"},"referencedDeclaration":77850,"src":"2255:14:352","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$77850_storage_ptr","typeString":"struct IDropERC20.AllowlistProof"}},"visibility":"internal"},{"constant":false,"id":77894,"mutability":"mutable","name":"data","nameLocation":"2316:4:352","nodeType":"VariableDeclaration","scope":77897,"src":"2303:17:352","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":77893,"name":"bytes","nodeType":"ElementaryTypeName","src":"2303:5:352","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2136:190:352"},"returnParameters":{"id":77896,"nodeType":"ParameterList","parameters":[],"src":"2343:0:352"},"scope":77908,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":77907,"nodeType":"FunctionDefinition","src":"2787:99:352","nodes":[],"documentation":{"id":77898,"nodeType":"StructuredDocumentation","src":"2350:432:352","text":"  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."},"functionSelector":"e23b8164","implemented":false,"kind":"function","modifiers":[],"name":"setClaimConditions","nameLocation":"2796:18:352","parameters":{"id":77905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77902,"mutability":"mutable","name":"phases","nameLocation":"2841:6:352","nodeType":"VariableDeclaration","scope":77907,"src":"2815:32:352","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"},"typeName":{"baseType":{"id":77900,"nodeType":"UserDefinedTypeName","pathNode":{"id":77899,"name":"ClaimCondition","nameLocations":["2815:14:352"],"nodeType":"IdentifierPath","referencedDeclaration":77706,"src":"2815:14:352"},"referencedDeclaration":77706,"src":"2815:14:352","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$77706_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition"}},"id":77901,"nodeType":"ArrayTypeName","src":"2815:16:352","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$77706_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition.ClaimCondition[]"}},"visibility":"internal"},{"constant":false,"id":77904,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"2854:21:352","nodeType":"VariableDeclaration","scope":77907,"src":"2849:26:352","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":77903,"name":"bool","nodeType":"ElementaryTypeName","src":"2849:4:352","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2814:62:352"},"returnParameters":{"id":77906,"nodeType":"ParameterList","parameters":[],"src":"2885:0:352"},"scope":77908,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":77841,"name":"IERC20Upgradeable","nameLocations":["633:17:352"],"nodeType":"IdentifierPath","referencedDeclaration":157774,"src":"633:17:352"},"id":77842,"nodeType":"InheritanceSpecifier","src":"633:17:352"},{"baseName":{"id":77843,"name":"IDropClaimCondition","nameLocations":["652:19:352"],"nodeType":"IdentifierPath","referencedDeclaration":77735,"src":"652:19:352"},"id":77844,"nodeType":"InheritanceSpecifier","src":"652:19:352"}],"canonicalName":"IDropERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":77840,"nodeType":"StructuredDocumentation","src":"182:425:352","text":"  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC20` contract is a distribution mechanism for ERC20 tokens.\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."},"fullyImplemented":false,"linearizedBaseContracts":[77908,77735,157774],"name":"IDropERC20","nameLocation":"619:10:352","scope":77909,"usedErrors":[],"usedEvents":[77861,77868,77873,77880,157708,157717]}],"license":"Apache-2.0"},"id":352}