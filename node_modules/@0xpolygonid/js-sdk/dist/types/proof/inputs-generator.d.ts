import { DID } from '@iden3/js-iden3-core';
import { RevocationStatus, W3CCredential } from '../verifiable';
import { ZeroKnowledgeProofRequest } from '../iden3comm';
import { CircuitClaim, Query, TreeState } from '../circuits';
import { PreparedAuthBJJCredential, PreparedCredential } from './common';
import { IIdentityWallet } from '../identity';
import { IStateStorage } from '../storage';
import { ICredentialWallet } from '../credentials';
export type DIDProfileMetadata = {
    authProfileNonce: number;
    credentialSubjectProfileNonce: number;
};
export type ProofGenerationOptions = {
    skipRevocation: boolean;
    challenge?: bigint;
    credential?: W3CCredential;
    credentialRevocationStatus?: RevocationStatus;
    verifierDid?: DID;
    linkNonce?: bigint;
};
export type ProofInputsParams = ProofGenerationOptions & DIDProfileMetadata;
type InputContext = {
    preparedCredential: PreparedCredential;
    identifier: DID;
    proofReq: ZeroKnowledgeProofRequest;
    params: ProofInputsParams;
    circuitQueries: Query[];
};
export declare class InputGenerator {
    private readonly _identityWallet;
    private readonly _credentialWallet;
    private readonly _stateStorage;
    constructor(_identityWallet: IIdentityWallet, _credentialWallet: ICredentialWallet, _stateStorage: IStateStorage);
    generateInputs(ctx: InputContext): Promise<Uint8Array>;
    newCircuitClaimData(preparedCredential: PreparedCredential): Promise<CircuitClaim>;
    prepareAuthBJJCredential(did: DID, treeStateInfo?: TreeState): Promise<PreparedAuthBJJCredential>;
    private credentialAtomicQueryMTPV2PrepareInputs;
    private credentialAtomicQueryMTPV2OnChainPrepareInputs;
    private credentialAtomicQuerySigV2PrepareInputs;
    private credentialAtomicQuerySigV2OnChainPrepareInputs;
    private credentialAtomicQueryV3PrepareInputs;
    private credentialAtomicQueryV3OnChainPrepareInputs;
    private linkedNullifierPrepareInputs;
    linkedMultiQuery10PrepareInputs: ({ preparedCredential, proofReq, params, circuitQueries }: InputContext) => Promise<Uint8Array>;
}
export {};
