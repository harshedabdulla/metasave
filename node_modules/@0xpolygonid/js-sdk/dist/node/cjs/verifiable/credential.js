"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTreeState = exports.extractProof = exports.W3CCredential = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const proof_1 = require("./proof");
const js_iden3_core_1 = require("@iden3/js-iden3-core");
const constants_1 = require("./constants");
const js_merkletree_1 = require("@iden3/js-merkletree");
const js_jsonld_merklization_1 = require("@iden3/js-jsonld-merklization");
const js_crypto_1 = require("@iden3/js-crypto");
const utils_1 = require("../credentials/utils");
const utils_2 = require("../utils");
/**
 * W3C Verifiable credential
 *
 * @public
 * @export
 * @class W3CCredential
 */
class W3CCredential {
    constructor() {
        this.id = '';
        this['@context'] = [];
        this.type = [];
        this.credentialSubject = {};
        this.issuer = '';
    }
    toJSON() {
        return {
            ...this,
            proof: Array.isArray(this.proof)
                ? this.proof.map(this.proofToJSON)
                : this.proofToJSON(this.proof)
        };
    }
    proofToJSON(p) {
        if (!p) {
            return p;
        }
        if (!p['type']) {
            throw new Error('proof must have type property');
        }
        switch (p.type) {
            case constants_1.ProofType.Iden3SparseMerkleTreeProof:
            case constants_1.ProofType.BJJSignature:
                return p.toJSON();
            default:
                return p;
        }
    }
    static fromJSON(obj) {
        const w = new W3CCredential();
        Object.assign(w, obj);
        w.proof = Array.isArray(w.proof)
            ? w.proof.map(W3CCredential.proofFromJSON)
            : W3CCredential.proofFromJSON(w.proof);
        return w;
    }
    /**
     * merklization of the verifiable credential
     *
     * @returns `Promise<Merklizer>`
     */
    async merklize(opts) {
        const credential = { ...this };
        delete credential.proof;
        return await js_jsonld_merklization_1.Merklizer.merklizeJSONLD(JSON.stringify(credential), opts);
    }
    /**
     * gets core claim representation from credential proof
     *
     * @param {ProofType} proofType
     * @returns {*}  {(Claim | undefined)}
     */
    getCoreClaimFromProof(proofType) {
        if (Array.isArray(this.proof)) {
            for (const proof of this.proof) {
                const { claim, proofType: extractedProofType } = extractProof(proof);
                if (proofType === extractedProofType) {
                    return claim;
                }
            }
        }
        else if (typeof this.proof === 'object') {
            const { claim, proofType: extractedProofType } = extractProof(this.proof);
            if (extractedProofType == proofType) {
                return claim;
            }
        }
        return undefined;
    }
    /**
     * checks BJJSignatureProof2021 in W3C VC
     *
     * @returns BJJSignatureProof2021 | undefined
     */
    getBJJSignature2021Proof() {
        const proof = this.getProofByType(constants_1.ProofType.BJJSignature);
        if (proof) {
            return proof;
        }
        return undefined;
    }
    /**
     * checks Iden3SparseMerkleTreeProof in W3C VC
     *
     * @returns {*}  {(Iden3SparseMerkleTreeProof | undefined)}
     */
    getIden3SparseMerkleTreeProof() {
        const proof = this.getProofByType(constants_1.ProofType.Iden3SparseMerkleTreeProof);
        if (proof) {
            return proof;
        }
        return undefined;
    }
    /**
     * Verify credential proof
     *
     * @returns {*}  {(boolean)}
     */
    async verifyProof(proofType, resolverURL, opts) {
        const proof = this.getProofByType(proofType);
        if (!proof) {
            throw new Error('proof not found');
        }
        const coreClaim = this.getCoreClaimFromProof(proofType);
        if (!coreClaim) {
            throw new Error(`can't get core claim`);
        }
        switch (proofType) {
            case constants_1.ProofType.BJJSignature: {
                if (!opts?.credStatusResolverRegistry) {
                    throw new Error('please provide credential status resolver registry');
                }
                const bjjProof = proof;
                const userDID = (0, utils_1.getUserDIDFromCredential)(bjjProof.issuerData.id, this);
                return this.verifyBJJSignatureProof(bjjProof, coreClaim, resolverURL, userDID, opts.credStatusResolverRegistry);
            }
            case constants_1.ProofType.Iden3SparseMerkleTreeProof: {
                return this.verifyIden3SparseMerkleTreeProof(proof, coreClaim, resolverURL);
            }
            default: {
                throw new Error('invalid proof type');
            }
        }
    }
    async verifyBJJSignatureProof(proof, coreClaim, resolverURL, userDID, credStatusResolverRegistry) {
        // issuer auth claim
        const authClaim = proof.issuerData.authCoreClaim;
        const rawSlotsInt = authClaim.rawSlotsAsInts();
        const pubKey = new js_crypto_1.PublicKey([rawSlotsInt[2], rawSlotsInt[3]]);
        // core claim hash
        const { hi, hv } = coreClaim.hiHv();
        const claimHash = js_crypto_1.poseidon.hash([hi, hv]);
        const bjjValid = pubKey.verifyPoseidon(claimHash, proof.signature);
        if (!bjjValid) {
            throw new Error('signature is not valid');
        }
        await (0, utils_2.validateDIDDocumentAuth)(proof.issuerData.id, resolverURL, proof.issuerData.state.value);
        const credStatusType = proof.issuerData.credentialStatus.type;
        const credStatusResolver = await credStatusResolverRegistry.get(credStatusType);
        if (!credStatusResolver) {
            throw new Error(`please register credential status resolver for ${credStatusType} type`);
        }
        const credStatus = await credStatusResolver.resolve(proof.issuerData.credentialStatus, {
            issuerDID: proof.issuerData.id,
            userDID: userDID
        });
        const stateValid = validateTreeState(credStatus.issuer);
        if (!stateValid) {
            throw new Error('signature proof: invalid tree state of the issuer while checking credential status of singing key');
        }
        const revocationNonce = BigInt(proof.issuerData.credentialStatus.revocationNonce || 0);
        if (revocationNonce !== proof.issuerData.authCoreClaim.getRevocationNonce()) {
            throw new Error(`revocation nonce mismatch: revocation nonce from core representation of auth credential is not the same as in its credential`);
        }
        const proofValid = await (0, js_merkletree_1.verifyProof)(js_merkletree_1.Hash.fromHex(credStatus.issuer.revocationTreeRoot), credStatus.mtp, revocationNonce, BigInt(0));
        if (!proofValid) {
            throw new Error(`proof validation failed. revNonce=${revocationNonce}`);
        }
        if (credStatus.mtp.existence) {
            throw new Error('signature proof: singing key of the issuer is revoked');
        }
        return true;
    }
    async verifyIden3SparseMerkleTreeProof(proof, coreClaim, resolverURL) {
        await (0, utils_2.validateDIDDocumentAuth)(proof.issuerData.id, resolverURL, proof.issuerData.state.value);
        // root from proof == issuerData.state.сlaimsTreeRoot
        const { hi, hv } = coreClaim.hiHv();
        const rootFromProofValue = await (0, js_merkletree_1.rootFromProof)(proof.mtp, hi, hv);
        if (!rootFromProofValue.equals(proof.issuerData.state.claimsTreeRoot)) {
            throw new Error('verifyIden3SparseMerkleTreeProof: root from proof not equal to issuer data claims tree root');
        }
        return true;
    }
    getProofByType(proofType) {
        if (Array.isArray(this.proof)) {
            for (const proof of this.proof) {
                if (proof?.type === proofType) {
                    return proof;
                }
            }
        }
        else if (this.proof?.type == proofType) {
            return this.proof;
        }
        return undefined;
    }
}
exports.W3CCredential = W3CCredential;
W3CCredential.proofFromJSON = (p) => {
    if (!p) {
        return p;
    }
    if (!p['type']) {
        throw new Error('proof must have type property');
    }
    switch (p.type) {
        case constants_1.ProofType.Iden3SparseMerkleTreeProof:
            return proof_1.Iden3SparseMerkleTreeProof.fromJSON(p);
        case constants_1.ProofType.BJJSignature:
            return proof_1.BJJSignatureProof2021.fromJSON(p);
        default:
            return p;
    }
};
/**
 * extracts core claim from Proof and returns Proof Type
 *
 * @param {object} proof - proof of vc
 * @returns {*}  {{ claim: Claim; proofType: ProofType }}
 */
function extractProof(proof) {
    if (proof instanceof proof_1.Iden3SparseMerkleTreeProof) {
        return {
            claim: proof.coreClaim,
            proofType: constants_1.ProofType.Iden3SparseMerkleTreeProof
        };
    }
    if (proof instanceof proof_1.BJJSignatureProof2021) {
        return { claim: proof.coreClaim, proofType: constants_1.ProofType.BJJSignature };
    }
    if (typeof proof === 'object') {
        const p = proof;
        const defaultProofType = p.type;
        if (!defaultProofType) {
            throw new Error('proof type is not specified');
        }
        if (!p.coreClaim) {
            throw new Error(`coreClaim field is not defined in proof type ${defaultProofType}`);
        }
        const coreClaim = p.coreClaim instanceof js_iden3_core_1.Claim ? p.coreClaim : new js_iden3_core_1.Claim().fromHex(p.coreClaim);
        return { claim: coreClaim, proofType: defaultProofType };
    }
    throw new Error('proof format is not supported');
}
exports.extractProof = extractProof;
/**
 * validate tree state by recalculating poseidon hash of roots and comparing with state
 *
 * @param {Issuer} treeState - issuer struct
 * @returns {boolean}
 */
function validateTreeState(treeState) {
    const ctrHash = treeState.claimsTreeRoot ? js_merkletree_1.Hash.fromHex(treeState.claimsTreeRoot) : new js_merkletree_1.Hash();
    const rtrHash = treeState.revocationTreeRoot
        ? js_merkletree_1.Hash.fromHex(treeState.revocationTreeRoot)
        : new js_merkletree_1.Hash();
    const rorHash = treeState.rootOfRoots ? js_merkletree_1.Hash.fromHex(treeState.rootOfRoots) : new js_merkletree_1.Hash();
    const wantState = js_crypto_1.poseidon.hash([ctrHash.bigInt(), rtrHash.bigInt(), rorHash.bigInt()]);
    const stateHash = treeState.state ? js_merkletree_1.Hash.fromHex(treeState.state) : new js_merkletree_1.Hash();
    return wantState === stateHash.bigInt();
}
exports.validateTreeState = validateTreeState;
