import { Id } from '@iden3/js-iden3-core';
import { byteDecoder, byteEncoder } from '../utils';
/**
 * LinkedNullifier circuit representation
 * Inputs and public signals declaration, marshalling and parsing
 *
 * @beta
 * @class LinkedNullifierInputs
 */
export class LinkedNullifierInputs {
    // InputsMarshal returns Circom private inputs for nullifier.circom
    inputsMarshal() {
        const s = {
            linkNonce: this.linkNonce.toString(),
            issuerClaim: this.issuerClaim.marshalJson(),
            userGenesisID: this.id.bigInt().toString(),
            claimSubjectProfileNonce: this.claimSubjectProfileNonce.toString(),
            claimSchema: this.issuerClaim.getSchemaHash().bigInt().toString(),
            verifierID: this.verifierID?.bigInt().toString() ?? '0',
            nullifierSessionID: this.nullifierSessionID.toString()
        };
        return byteEncoder.encode(JSON.stringify(s));
    }
}
// LinkedNullifierPubSignals nullifier.circom public signals
/**
 * public signals
 *
 * @beta
 * @class LinkedNullifierPubSignals
 */
export class LinkedNullifierPubSignals {
    /**
     * PubSignalsUnmarshal unmarshal nullifier.circom public inputs to LinkedNullifierPubSignals
     *
     * @beta
     * @param {Uint8Array} data
     * @returns LinkedNullifierPubSignals
     */
    pubSignalsUnmarshal(data) {
        const len = 4;
        const sVals = JSON.parse(byteDecoder.decode(data));
        if (sVals.length !== len) {
            throw new Error(`invalid number of Output values expected ${len} got ${sVals.length}`);
        }
        this.nullifier = BigInt(sVals[0]);
        this.linkID = BigInt(sVals[1]);
        this.verifierID = Id.fromBigInt(BigInt(sVals[2]));
        this.nullifierSessionID = BigInt(sVals[3]);
        return this;
    }
}
