{"version":3,"file":"torusEvmAdapter.esm.js","sources":["../src/torusWalletAdapter.ts"],"sourcesContent":["import Torus, { LoginParams, NetworkInterface, TorusCtorArgs, TorusParams } from \"@toruslabs/torus-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\nexport interface TorusWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: LoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class TorusWalletAdapter extends BaseEvmAdapter<never> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_EVM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: LoginParams = {};\n\n  constructor(params: TorusWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.torusInstance) {\n      return this.torusInstance.provider as unknown as IProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName,\n      // decimals: decimals || 18,\n    };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init({\n      showTorusButton: false,\n      ...this.initParams,\n      network,\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_EVM });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const chainId = await this.torusInstance.provider.request<string>({ method: \"eth_chainId\" });\n      if (chainId && parseInt(chainId) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n        const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n        const network: NetworkInterface = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker,\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider({\n          ...network,\n        });\n        const updatedChainID = await this.torusInstance.ethereum.request<string>({ method: \"eth_chainId\" });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n          throw WalletInitializationError.fromCode(\n            5000,\n            `Not connected to correct chainId. Expected: ${(this.chainConfig as CustomChainConfig).chainId}, Current: ${updatedChainID}`\n          );\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_EVM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"names":["TorusWalletAdapter","BaseEvmAdapter","constructor","params","arguments","length","undefined","_defineProperty","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","torusInstance","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","Number","parseInt","host","networkName","Torus","log","debug","_objectSpread","showTorusButton","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","request","method","_chainId","setProvider","updatedChainID","ethereum","fromCode","CONNECTED","reconnected","Web3AuthError","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","hideTorusButton","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","_this$torusInstance","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"mappings":"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"}