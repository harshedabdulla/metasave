{"version":3,"file":"openloginAdapter.esm.js","sources":["../src/config.ts","../src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin-utils\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.SAPPHIRE_MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n    privateKeyProvider: undefined,\n  };\n};\n","import OpenLogin from \"@toruslabs/openlogin\";\nimport { LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin-utils\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions, PrivateKeyProvider } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  public privateKeyProvider: PrivateKeyProvider | null = null;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n      privateKeyProvider: params.privateKeyProvider,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n    this.privateKeyProvider = params.privateKeyProvider || null;\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.privateKeyProvider) {\n      return this.privateKeyProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    const isRedirectResult = this.openloginOptions.uxMode === UX_MODE.REDIRECT;\n\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.SAPPHIRE_MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privateKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings> & { privateKeyProvider?: PrivateKeyProvider }): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n    if (adapterSettings.privateKeyProvider) {\n      this.privateKeyProvider = adapterSettings.privateKeyProvider;\n    }\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    this.privateKeyProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.privateKeyProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.openloginInstance.privKey && !this.openloginInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private _getFinalEd25519PrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.ed25519PrivKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.openloginInstance.ed25519PrivKey && !this.openloginInstance.coreKitEd25519Key) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitEd25519Key;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.privateKeyProvider) throw WalletInitializationError.invalidParams(\"PrivateKey Provider is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        finalPrivKey = this._getFinalEd25519PrivKey();\n      }\n\n      await this.privateKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","SAPPHIRE_MAINNET","clientId","uxMode","UX_MODE","POPUP","loginSettings","privateKeyProvider","undefined","OpenloginAdapter","BaseAdapter","constructor","params","arguments","length","_defineProperty","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","loginProvider","setAdapterSettings","_objectSpread","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","chainConfigProxy","provider","status","_","Error","init","options","checkInitializationRequirements","WalletInitializationError","invalidParams","openloginOptions","isRedirectResult","REDIRECT","replaceUrlOnRedirect","openloginInstance","OpenLogin","log","debug","READY","emit","ADAPTER_EVENTS","finalPrivKey","_getFinalPrivKey","autoConnect","rehydrated","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","Web3AuthError","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","authenticateUser","userInfo","getUserInfo","idToken","defaultOptions","info","addChain","_this$privateKeyProvi","checkAddChainRequirements","addChainConfig","switchChain","_this$privateKeyProvi2","checkSwitchChainRequirements","getChainConfig","chainId","_this$openloginOption","privKey","coreKitKey","coreKitKeyNotFound","_getFinalEd25519PrivKey","_this$openloginOption2","ed25519PrivKey","coreKitEd25519Key","_params$extraLoginOpt","keyAvailable","extraLoginOptions","id_token","_params$extraLoginOpt2","curve","currentChainNamespace","SOLANA","SUPPORTED_KEY_CURVES","ED25519","SECP256K1","login","merge","login_hint","setupProvider","reconnected"],"mappings":"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"}