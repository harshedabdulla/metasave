{"version":3,"file":"torusSolanaAdapter.esm.js","sources":["../src/solanaWalletAdapter.ts"],"sourcesContent":["import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      return this.solanaProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\",\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"names":["SolanaWalletAdapter","BaseSolanaAdapter","constructor","params","arguments","length","undefined","_defineProperty","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","solanaProvider","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","blockExplorerUrl","logo","torusInstance","Torus","log","debug","_objectSpread","showTorusButton","TorusInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","code","setProvider","CONNECTED","reconnected","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","_this$torusInstance","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"mappings":"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"}