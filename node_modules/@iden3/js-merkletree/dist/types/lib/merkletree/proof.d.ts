import { NodeAux, Siblings } from '../../types/merkletree';
import { Hash } from '../hash/hash';
import { Bytes } from '../../types';
export interface ProofJSON {
    existence: boolean;
    siblings: string[];
    nodeAux: NodeAuxJSON | undefined;
}
export interface NodeAuxJSON {
    key: string;
    value: string;
}
export declare class Proof {
    existence: boolean;
    private depth;
    private notEmpties;
    private siblings;
    nodeAux: NodeAux | undefined;
    constructor(obj?: {
        siblings: Siblings;
        nodeAux: NodeAux | undefined;
        existence: boolean;
    });
    bytes(): Bytes;
    toJSON(): {
        existence: boolean;
        siblings: string[];
        nodeAux: {
            key: string;
            value: string;
        } | undefined;
    };
    private reduceSiblings;
    static fromJSON(obj: ProofJSON): Proof;
    allSiblings(): Siblings;
    static buildAllSiblings(depth: number, notEmpties: Uint8Array, siblings: Hash[]): Siblings;
}
/**
 * @deprecated The method should not be used and will be removed in the next major version,
 * please use proof.allSiblings instead
 */
export declare const siblignsFroomProof: (proof: Proof) => Siblings;
export declare const verifyProof: (rootKey: Hash, proof: Proof, k: bigint, v: bigint) => Promise<boolean>;
export declare const rootFromProof: (proof: Proof, k: bigint, v: bigint) => Promise<Hash>;
