{"version":3,"file":"solanaEmbed.esm.js","sources":["../src/isStream.ts","../src/messages.ts","../src/interfaces.ts","../src/config.ts","../src/loglevel.ts","../src/utils.ts","../src/baseProvider.ts","../src/embedUtils.ts","../src/PopupHandler.ts","../src/communicationProvider.ts","../src/inPageProvider.ts","../src/siteMetadata.ts","../src/embed.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport function isStream(stream: any) {\n  return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\n\nexport function isWritableStream(stream: any) {\n  return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\n\nexport function isReadableStream(stream: any) {\n  return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\n\nexport function isDuplexStream(stream: any) {\n  return isWritableStream(stream) && isReadableStream(stream);\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type TransactionOrVersionedTransaction = Transaction | VersionedTransaction;\n\nexport type PAYMENT_PROVIDER_TYPE = (typeof PAYMENT_PROVIDER)[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = (typeof TORUS_BUILD_ENV)[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = (typeof BUTTON_POSITION)[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = (typeof LOGIN_PROVIDER)[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const e = error as { code?: number; name?: string };\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/97c87069b81ef4ec0765a267525c82153e5404fc/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  SafeEventEmitterProvider,\n  SendCallBack,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport { isDuplexStream } from \"./isStream\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback as (...args: unknown[]) => void);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","import { VersionedTransaction } from \"@solana/web3.js\";\n\nimport { TransactionOrVersionedTransaction } from \"./interfaces\";\n\nexport const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n\nexport function isLegacyTransactionInstance(transaction: TransactionOrVersionedTransaction): boolean {\n  return (transaction as VersionedTransaction).version === undefined;\n}\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  timeout: number;\n\n  constructor({ url, target, features, timeout = 30000 }: { url: URL; target?: string; features?: string; timeout?: number }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          setTimeout(() => {\n            if (!this.iClosedWindow) {\n              this.emit(\"close\");\n            }\n            this.iClosedWindow = false;\n            this.window = undefined;\n          }, this.timeout);\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LocaleLinks,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage() as keyof LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = ((err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        }) as (...args: unknown[]) => void;\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { version } from \"../package.json\";\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement, isLegacyTransactionInstance } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  TransactionOrVersionedTransaction,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        this.torusIframe.addEventListener(\"load\", async () => {\n          const dappMetadata = await getSiteMetadata();\n          // send init params here\n          this.torusIframe.contentWindow.postMessage(\n            {\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel,\n            },\n            torusIframeUrl.origin\n          );\n          await this._setupWeb3({\n            torusUrl,\n          });\n          if (showTorusButton) this.showTorusButton();\n          if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n          else this.hideTorusButton();\n          this.isInitialized = true;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (window as any).torus = this;\n          resolve();\n        });\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: TransactionOrVersionedTransaction): Promise<string> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, isLegacyTransaction },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: TransactionOrVersionedTransaction, options?: SendOptions): Promise<{ signature: string }> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, options, isLegacyTransaction },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: TransactionOrVersionedTransaction): Promise<TransactionOrVersionedTransaction> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serializeMessage().toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).message.serialize()).toString(\"hex\");\n\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message, messageOnly: true, isLegacyTransaction },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: TransactionOrVersionedTransaction[]): Promise<TransactionOrVersionedTransaction[]> {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map((tx) => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction\n        ? (tx as Transaction).serializeMessage().toString(\"hex\")\n        : Buffer.from((tx as VersionedTransaction).message.serialize()).toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true, isLegacyTransaction },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = ((payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    }) as (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (\n      m: keyof Omit<TorusInPageProvider, \"isTorus\" | \"selectedAddress\" | \"chainId\" | \"SafeEventEmitter\" | \"jsonRpcConnectionEvents\" | \"_rpcEngine\">\n    ) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request: JRPCRequest<string[]>, cb: (...args: unknown[]) => void) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE });\n          self\n            .login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return originalMethod.apply(this, [request, cb]);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n"],"names":["isStream","stream","pipe","isWritableStream","writable","_write","_writableState","isReadableStream","readable","_read","_readableState","isDuplexStream","errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKeyPrefix","loglevel","getLogger","createErrorMiddleware","req","res","next","error","ethErrors","rpc","invalidRequest","message","data","done","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","window","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","_ref","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","BaseProvider","SafeEventEmitter","constructor","connectionStream","jsonRpcStreamName","_defineProperty","Error","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","createLoggerMiddleware","origin","location","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","getRpcPromiseCallback","send","payload","callback","streamName","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","isLegacyTransactionInstance","transaction","version","PopupHandler","url","target","timeout","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","setTimeout","open","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_objectSpread","_defaultState","dappStorageKey","languageTranslations","configuration","embedTranslations","windowRefs","on","isConnected","notificationHandler","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","addEventListener","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","initialized","_handleWindow","arguments","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","torusWidgetVisibility","buttonPosition","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","accounts","isUnlocked","PROVIDER_JRPC_METHODS","isInternal","err","result","handle","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","hostname","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","body","login","loginProvider","provider","login_hint","loginWithPrivateKey","loginParams","privateKey","userInfo","success","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","getAccounts","response","sendTransaction","isLegacyTransaction","serialize","requireAllSignatures","Buffer","signAndSendTransaction","options","signature","signTransaction","serializeMessage","messageOnly","parsed","JSON","parse","publicKey","PublicKey","addSignature","signAllTransactions","transactions","encodedMessage","map","tx","responses","signatures","item","idx","signMessage","getGaslessPublicKey","localStorageKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all"],"mappings":"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"}